func_write:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, 1
	push rax
	call func_syscall3
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_exit:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, 60
	push rax
	call func_syscall1
	add rsp, 16
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_read:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, 0
	push rax
	call func_syscall3
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_open:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, 2
	push rax
	call func_syscall3
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_close:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, 3
	push rax
	call func_syscall1
	add rsp, 16
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_openat:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -40
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, 257
	push rax
	call func_syscall4
	add rsp, 40
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_wait:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 0
	push rax
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, 1
	neg rax
	push rax
	mov rax, 61
	push rax
	call func_syscall4
	add rsp, 40
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_lseek:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, 8
	push rax
	call func_syscall3
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_mmap:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -56
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -48
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -40
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, 9
	push rax
	call func_syscall6
	add rsp, 56
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_execve:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, 59
	push rax
	call func_syscall3
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_strlen:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 0
	mov [rbp-8], rax
.loop_start_0:
.loop_continue_0:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .loop_end_0
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_0
.break_0:
.loop_end_0:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_strcpy:
	push rbp
	mov rbp, rsp
	sub rsp, 0
.loop_start_1:
.loop_continue_1:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .loop_end_1
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	movsx rax, byte [rax]
	pop rcx
	mov [rcx], al
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -24
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_1
.break_1:
.loop_end_1:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], al
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_strcat:
	push rbp
	mov rbp, rsp
	sub rsp, 0
.loop_start_2:
.loop_continue_2:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .loop_end_2
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_2
.break_2:
.loop_end_2:
.loop_start_3:
.loop_continue_3:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .loop_end_3
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	movsx rax, byte [rax]
	pop rcx
	mov [rcx], al
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -24
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_3
.break_3:
.loop_end_3:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], al
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_strstartswith:
	push rbp
	mov rbp, rsp
	sub rsp, 0
.loop_start_4:
.loop_continue_4:
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	movsx rax, byte [rax]
	cmp rax, 0
	je .loop_end_4
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	movsx rax, byte [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_5
	mov rax, 0
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_5:
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -24
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_4
.break_4:
.loop_end_4:
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_streq:
	push rbp
	mov rbp, rsp
	sub rsp, 0
.loop_start_6:
.loop_continue_6:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	jne .and_right_7
	mov rax, 0
	jmp .and_end_7
.and_right_7:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_7:
	cmp rax, 0
	je .loop_end_6
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	movsx rax, byte [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_8
	mov rax, 0
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_8:
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -24
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_6
.break_6:
.loop_end_6:
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	movsx rax, byte [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_strrev:
	push rbp
	mov rbp, rsp
	sub rsp, 32
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_strlen
	add rsp, 8
	mov [rbp-8], rax
	mov rax, 0
	mov [rbp-16], rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	mov [rbp-24], rax
.loop_start_9:
.loop_continue_9:
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_9
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	mov [rbp-32], al
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	mov [rcx], al
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, 32
	movsx rax, byte [rax]
	pop rcx
	mov [rcx], al
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 24
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_9
.break_9:
.loop_end_9:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_atoi_end:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, 0
	mov [rbp-8], rax
	mov rax, 1
	mov [rbp-16], rax
	mov rax, 45
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_10
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	neg rax
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
.if_end_10:
.loop_start_11:
.loop_continue_11:
	mov rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setge al
	movzx rax, al
	cmp rax, 0
	jne .and_right_12
	mov rax, 0
	jmp .and_end_12
.and_right_12:
	mov rax, 57
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setle al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_12:
	cmp rax, 0
	je .loop_end_11
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	movsx rax, byte [rax]
	pop rcx
	sub rax, rcx
	push rax
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_11
.break_11:
.loop_end_11:
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_atoi:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_atoi_end
	add rsp, 16
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_find_extension_start:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_strlen
	add rsp, 8
	mov [rbp-8], rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	mov [rbp-16], rax
.loop_start_13:
.loop_continue_13:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setge al
	movzx rax, al
	cmp rax, 0
	je .loop_end_13
	mov rax, 46
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_14
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_14:
	mov rax, 47
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_15
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_15:
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_13
.break_13:
.loop_end_13:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_replace_extension:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_find_extension_start
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	call func_strcpy
	add rsp, 16
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_is_space:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 32
	push rax
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_18
	mov rax, 1
	jmp .or_end_18
.or_right_18:
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_18:
	cmp rax, 0
	je .or_right_17
	mov rax, 1
	jmp .or_end_17
.or_right_17:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_17:
	cmp rax, 0
	je .or_right_16
	mov rax, 1
	jmp .or_end_16
.or_right_16:
	mov rax, 13
	push rax
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_16:
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_is_digit:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setge al
	movzx rax, al
	cmp rax, 0
	jne .and_right_19
	mov rax, 0
	jmp .and_end_19
.and_right_19:
	mov rax, 57
	push rax
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setle al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_19:
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_is_alpha:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 97
	push rax
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setge al
	movzx rax, al
	cmp rax, 0
	jne .and_right_22
	mov rax, 0
	jmp .and_end_22
.and_right_22:
	mov rax, 122
	push rax
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setle al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_22:
	cmp rax, 0
	je .or_right_21
	mov rax, 1
	jmp .or_end_21
.or_right_21:
	mov rax, 65
	push rax
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setge al
	movzx rax, al
	cmp rax, 0
	jne .and_right_23
	mov rax, 0
	jmp .and_end_23
.and_right_23:
	mov rax, 90
	push rax
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setle al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_23:
	cmp rax, 0
	setne al
.or_end_21:
	cmp rax, 0
	je .or_right_20
	mov rax, 1
	jmp .or_end_20
.or_right_20:
	mov rax, 95
	push rax
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_20:
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_is_alnum:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	push rax
	call func_is_digit
	add rsp, 8
	cmp rax, 0
	je .or_right_24
	mov rax, 1
	jmp .or_end_24
.or_right_24:
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	push rax
	call func_is_alpha
	add rsp, 8
	cmp rax, 0
	setne al
.or_end_24:
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_is_hex:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	push rax
	call func_is_digit
	add rsp, 8
	cmp rax, 0
	je .or_right_26
	mov rax, 1
	jmp .or_end_26
.or_right_26:
	mov rax, 97
	push rax
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setge al
	movzx rax, al
	cmp rax, 0
	jne .and_right_27
	mov rax, 0
	jmp .and_end_27
.and_right_27:
	mov rax, 102
	push rax
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setle al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_27:
	cmp rax, 0
	setne al
.or_end_26:
	cmp rax, 0
	je .or_right_25
	mov rax, 1
	jmp .or_end_25
.or_right_25:
	mov rax, 65
	push rax
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setge al
	movzx rax, al
	cmp rax, 0
	jne .and_right_28
	mov rax, 0
	jmp .and_end_28
.and_right_28:
	mov rax, 70
	push rax
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setle al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_28:
	cmp rax, 0
	setne al
.or_end_25:
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_putc:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, 0
	push rax
	call func_write
	add rsp, 24
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_puts:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_strlen
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, 1
	push rax
	call func_write
	add rsp, 24
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_putsln:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_puts
	add rsp, 8
	mov rax, 10
	push rax
	call func_putc
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_putu_buffer:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 0
	mov [rbp-8], rax
.loop_start_29:
.loop_continue_29:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setg al
	movzx rax, al
	cmp rax, 0
	je .loop_end_29
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, 48
	push rax
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cqo
	idiv rcx
	mov rax, rdx
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], al
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cqo
	idiv rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_29
.break_29:
.loop_end_29:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_30
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, 48
	pop rcx
	mov [rcx], al
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
.if_end_30:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], al
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setg al
	movzx rax, al
	cmp rax, 0
	je .if_end_31
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_strrev
	add rsp, 8
.if_end_31:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_putu:
	push rbp
	mov rbp, rsp
	sub rsp, 40
	mov rax, rbp
	sub rax, 32
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_putu_buffer
	add rsp, 16
	mov [rbp-40], rax
	mov rax, rbp
	sub rax, 40
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 32
	push rax
	mov rax, 1
	push rax
	call func_write
	add rsp, 24
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_putflt:
	push rbp
	mov rbp, rsp
	sub rsp, 32
	mov rax, rbp
	sub rax, -16
	movsd xmm0, [rax]
	cvttsd2si rax, xmm0
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	cvtsi2sd xmm0, eax
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, rbp
	sub rax, -16
	movsd xmm0, [rax]
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	movsd [rbp-16], xmm0
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .if_end_32
	mov rax, 45
	push rax
	call func_putc
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	neg rax
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, rbp
	sub rax, 16
	movsd xmm0, [rax]
	xorps xmm1, xmm1
	subps xmm1, xmm0
	movsd xmm0, xmm1
	pop rcx
	movsd [rcx], xmm0
.if_end_32:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_putu
	add rsp, 8
	mov rax, 46
	push rax
	call func_putc
	add rsp, 8
	mov rax, 0
	mov [rbp-24], rax
.loop_start_33:
	mov rax, 5
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_33
	mov rax, 10
	cvtsi2sd xmm0, eax
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, rbp
	sub rax, 16
	movsd xmm0, [rax]
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	cvttsd2si rax, xmm0
	mov [rbp-32], rax
	mov rax, 48
	push rax
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	call func_putc
	add rsp, 8
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	cvtsi2sd xmm0, eax
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, 10
	cvtsi2sd xmm0, eax
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, rbp
	sub rax, 16
	movsd xmm0, [rax]
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	pop rcx
	movsd [rcx], xmm0
.loop_continue_33:
	mov rax, rbp
	sub rax, 24
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_33
.break_33:
.loop_end_33:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_die:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_puts
	add rsp, 8
	mov rax, qword gs_0
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 1
	push rax
	call func_exit
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_die2:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_puts
	add rsp, 8
	mov rax, qword gs_1
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 1
	push rax
	call func_exit
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_assert:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_34
	mov rax, qword gs_2
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_die
	add rsp, 16
.if_end_34:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_min:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .cond_else_35
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	jmp .cond_end_35
.cond_else_35:
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
.cond_end_35:
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_max:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setg al
	movzx rax, al
	cmp rax, 0
	je .cond_else_36
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	jmp .cond_end_36
.cond_else_36:
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
.cond_end_36:
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_sign:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setg al
	movzx rax, al
	cmp rax, 0
	je .cond_else_37
	mov rax, 1
	jmp .cond_end_37
.cond_else_37:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .cond_else_38
	mov rax, 0
	jmp .cond_end_38
.cond_else_38:
	mov rax, 1
	neg rax
.cond_end_38:
.cond_end_37:
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_abs:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_sign
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_factorial:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 1
	mov [rbp-8], rax
.loop_start_39:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setg al
	movzx rax, al
	cmp rax, 0
	je .loop_end_39
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	pop rcx
	mov [rcx], rax
.loop_continue_39:
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_39
.break_39:
.loop_end_39:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_align_up:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	not rax
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	sub rax, rcx
	pop rcx
	and rax, rcx
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_memcpy:
	push rbp
	mov rbp, rsp
	sub rsp, 24
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	mov [rbp-16], rax
	mov rax, 0
	mov [rbp-24], rax
.loop_start_40:
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_40
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	mov [rcx], al
.loop_continue_40:
	mov rax, rbp
	sub rax, 24
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_40
.break_40:
.loop_end_40:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_malloc:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 1073741824
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741832
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	cmp rax, rcx
	setg al
	movzx rax, al
	cmp rax, 0
	je .if_end_41
	mov rax, qword gs_3
	push rax
	mov rax, qword gs_4
	push rax
	call func_die
	add rsp, 16
.if_end_41:
	mov rax, qword gvars
	add rax, 1073741832
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 8
	pop rcx
	add rax, rcx
	mov [rbp-8], rax
	mov rax, qword gvars
	add rax, 1073741832
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741832
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_free:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_WIFEXITED:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 0
	push rax
	mov rax, 127
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	and rax, rcx
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_WEXITSTATUS:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 127
	push rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	shr rax, cl
	pop rcx
	and rax, rcx
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_run_command_env:
	push rbp
	mov rbp, rsp
	sub rsp, 24
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	cmp rax, 0
	je .if_end_42
	mov rax, qword gs_5
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	mov [rbp-8], rax
.loop_start_43:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	mov rax, [rax]
	cmp rax, 0
	je .loop_end_43
	mov rax, qword gs_6
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	mov rax, [rax]
	push rax
	call func_puts
	add rsp, 8
.loop_continue_43:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 8
	push rax
	mov rax, 1
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_43
.break_43:
.loop_end_43:
	mov rax, qword gs_7
	push rax
	call func_puts
	add rsp, 8
.if_end_42:
	call func_fork
	add rsp, 0
	mov [rbp-8], rax
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_44
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, 8
	push rax
	mov rax, 0
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	call func_execve
	add rsp, 24
	mov rax, qword gs_8
	push rax
	mov rax, qword gs_9
	push rax
	call func_die
	add rsp, 16
.if_end_44:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 16
	push rax
	call func_wait
	add rsp, 8
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .if_end_45
	mov rax, qword gs_10
	push rax
	mov rax, qword gs_11
	push rax
	call func_die
	add rsp, 16
.if_end_45:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_WIFEXITED
	add rsp, 8
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_46
	mov rax, qword gs_12
	push rax
	mov rax, qword gs_13
	push rax
	call func_die
	add rsp, 16
.if_end_46:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_WEXITSTATUS
	add rsp, 8
	mov [rbp-24], rax
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_47
	mov rax, qword gs_14
	push rax
	call func_puts
	add rsp, 8
	mov rax, qword gs_15
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	call func_putu
	add rsp, 8
	mov rax, qword gs_16
	push rax
	call func_putsln
	add rsp, 8
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	call func_exit
	add rsp, 8
.if_end_47:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_run_command:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_run_command_env
	add rsp, 24
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_fopen:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, 119
	push rax
	mov rax, rbp
	sub rax, -24
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_48
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 512
	push rax
	mov rax, 64
	push rax
	mov rax, 1
	pop rcx
	or rax, rcx
	pop rcx
	or rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .if_end_48
.if_else_48:
	mov rax, 114
	push rax
	mov rax, rbp
	sub rax, -24
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_49
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], rax
	jmp .if_end_49
.if_else_49:
	mov rax, qword gs_17
	push rax
	mov rax, qword gs_18
	push rax
	call func_die
	add rsp, 16
.if_end_49:
.if_end_48:
	mov rax, 1048
	push rax
	call func_malloc
	add rsp, 8
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, 438
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_open
	add rsp, 24
	pop rcx
	mov [rcx], rax
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .if_end_50
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, qword gs_19
	push rax
	mov rax, qword gs_20
	push rax
	call func_die2
	add rsp, 24
.if_end_50:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 1040
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_File_method_flush:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 1040
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setg al
	movzx rax, al
	cmp rax, 0
	je .if_end_51
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 1040
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_write
	add rsp, 24
	mov [rbp-8], rax
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .if_end_52
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gs_21
	push rax
	mov rax, qword gs_22
	push rax
	call func_die2
	add rsp, 24
.if_end_52:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 1040
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], rax
.if_end_51:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_File_method_write:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 1024
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 1040
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	cmp rax, rcx
	setg al
	movzx rax, al
	cmp rax, 0
	je .if_end_53
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _File_method_flush
	add rsp, 8
.if_end_53:
	mov rax, 1024
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setg al
	movzx rax, al
	cmp rax, 0
	je .if_else_54
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_write
	add rsp, 24
	jmp .if_end_54
.if_else_54:
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 1040
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	pop rcx
	add rax, rcx
	push rax
	call func_memcpy
	add rsp, 24
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 1040
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 1040
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
.if_end_54:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_File_method_read:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_read
	add rsp, 24
	mov [rbp-8], rax
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .if_end_55
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gs_23
	push rax
	mov rax, qword gs_24
	push rax
	call func_die2
	add rsp, 24
.if_end_55:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_File_method_close:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _File_method_flush
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_close
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, 1
	neg rax
	pop rcx
	mov [rcx], rax
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_File_method_puts:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_strlen
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _File_method_write
	add rsp, 24
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_File_method_putc:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _File_method_write
	add rsp, 24
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_File_method_putu:
	push rbp
	mov rbp, rsp
	sub rsp, 40
	mov rax, rbp
	sub rax, 32
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_putu_buffer
	add rsp, 16
	mov [rbp-40], rax
	mov rax, rbp
	sub rax, 40
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 32
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _File_method_write
	add rsp, 24
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_File_method_seek:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_lseek
	add rsp, 24
	mov [rbp-8], rax
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .if_end_56
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gs_25
	push rax
	mov rax, qword gs_26
	push rax
	call func_die2
	add rsp, 24
.if_end_56:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_File_method_size:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, 1
	push rax
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_lseek
	add rsp, 24
	mov [rbp-8], rax
	mov rax, 2
	push rax
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_lseek
	add rsp, 24
	mov [rbp-16], rax
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_lseek
	add rsp, 24
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_File_method_map:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _File_method_size
	add rsp, 8
	mov [rbp-8], rax
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, 2
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	call func_mmap
	add rsp, 48
	mov [rbp-16], rax
	mov rax, -1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_57
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gs_27
	push rax
	mov rax, qword gs_28
	push rax
	call func_die2
	add rsp, 24
.if_end_57:
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	cmp rax, 0
	je .if_end_58
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
.if_end_58:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_File_method_slurp:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _File_method_size
	add rsp, 8
	mov [rbp-8], rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	call func_malloc
	add rsp, 8
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _File_method_read
	add rsp, 24
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], al
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	cmp rax, 0
	je .if_end_59
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
.if_end_59:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_token_type_to_string:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	cmp rax, 0
	je .case_60_0
	cmp rax, 1
	je .case_60_1
	cmp rax, 2
	je .case_60_2
	cmp rax, 3
	je .case_60_3
	cmp rax, 4
	je .case_60_4
	cmp rax, 5
	je .case_60_5
	cmp rax, 6
	je .case_60_6
	cmp rax, 7
	je .case_60_7
	cmp rax, 8
	je .case_60_8
	cmp rax, 9
	je .case_60_9
	cmp rax, 10
	je .case_60_10
	cmp rax, 11
	je .case_60_11
	cmp rax, 12
	je .case_60_12
	cmp rax, 13
	je .case_60_13
	cmp rax, 14
	je .case_60_14
	cmp rax, 15
	je .case_60_15
	cmp rax, 17
	je .case_60_16
	cmp rax, 18
	je .case_60_17
	cmp rax, 19
	je .case_60_18
	cmp rax, 16
	je .case_60_19
	cmp rax, 20
	je .case_60_20
	cmp rax, 21
	je .case_60_21
	cmp rax, 22
	je .case_60_22
	cmp rax, 23
	je .case_60_23
	cmp rax, 24
	je .case_60_24
	cmp rax, 25
	je .case_60_25
	cmp rax, 26
	je .case_60_26
	cmp rax, 27
	je .case_60_27
	cmp rax, 28
	je .case_60_28
	cmp rax, 29
	je .case_60_29
	cmp rax, 30
	je .case_60_30
	cmp rax, 31
	je .case_60_31
	cmp rax, 32
	je .case_60_32
	cmp rax, 33
	je .case_60_33
	cmp rax, 34
	je .case_60_34
	cmp rax, 35
	je .case_60_35
	cmp rax, 36
	je .case_60_36
	cmp rax, 37
	je .case_60_37
	cmp rax, 38
	je .case_60_38
	cmp rax, 39
	je .case_60_39
	cmp rax, 40
	je .case_60_40
	cmp rax, 41
	je .case_60_41
	cmp rax, 42
	je .case_60_42
	cmp rax, 43
	je .case_60_43
	cmp rax, 45
	je .case_60_44
	cmp rax, 46
	je .case_60_45
	cmp rax, 47
	je .case_60_46
	cmp rax, 48
	je .case_60_47
	cmp rax, 49
	je .case_60_48
	cmp rax, 50
	je .case_60_49
	cmp rax, 51
	je .case_60_50
	cmp rax, 52
	je .case_60_51
	cmp rax, 53
	je .case_60_52
	cmp rax, 54
	je .case_60_53
	cmp rax, 55
	je .case_60_54
	cmp rax, 56
	je .case_60_55
	cmp rax, 57
	je .case_60_56
	cmp rax, 58
	je .case_60_57
	cmp rax, 59
	je .case_60_58
	cmp rax, 60
	je .case_60_59
	cmp rax, 61
	je .case_60_60
	cmp rax, 62
	je .case_60_61
	cmp rax, 63
	je .case_60_62
	cmp rax, 64
	je .case_60_63
	cmp rax, 65
	je .case_60_64
	cmp rax, 66
	je .case_60_65
	cmp rax, 67
	je .case_60_66
	cmp rax, 68
	je .case_60_67
	cmp rax, 69
	je .case_60_68
	cmp rax, 70
	je .case_60_69
	cmp rax, 71
	je .case_60_70
	jmp .default_60
.case_60_0:
	mov rax, qword gs_29
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_1:
	mov rax, qword gs_30
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_2:
	mov rax, qword gs_31
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_3:
	mov rax, qword gs_32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_4:
	mov rax, qword gs_33
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_5:
	mov rax, qword gs_34
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_6:
	mov rax, qword gs_35
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_7:
	mov rax, qword gs_36
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_8:
	mov rax, qword gs_37
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_9:
	mov rax, qword gs_38
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_10:
	mov rax, qword gs_39
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_11:
	mov rax, qword gs_40
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_12:
	mov rax, qword gs_41
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_13:
	mov rax, qword gs_42
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_14:
	mov rax, qword gs_43
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_15:
	mov rax, qword gs_44
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_16:
	mov rax, qword gs_45
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_17:
	mov rax, qword gs_46
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_18:
	mov rax, qword gs_47
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_19:
	mov rax, qword gs_48
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_20:
	mov rax, qword gs_49
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_21:
	mov rax, qword gs_50
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_22:
	mov rax, qword gs_51
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_23:
	mov rax, qword gs_52
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_24:
	mov rax, qword gs_53
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_25:
	mov rax, qword gs_54
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_26:
	mov rax, qword gs_55
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_27:
	mov rax, qword gs_56
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_28:
	mov rax, qword gs_57
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_29:
	mov rax, qword gs_58
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_30:
	mov rax, qword gs_59
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_31:
	mov rax, qword gs_60
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_32:
	mov rax, qword gs_61
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_33:
	mov rax, qword gs_62
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_34:
	mov rax, qword gs_63
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_35:
	mov rax, qword gs_64
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_36:
	mov rax, qword gs_65
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_37:
	mov rax, qword gs_66
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_38:
	mov rax, qword gs_67
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_39:
	mov rax, qword gs_68
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_40:
	mov rax, qword gs_69
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_41:
	mov rax, qword gs_70
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_42:
	mov rax, qword gs_71
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_43:
	mov rax, qword gs_72
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_44:
	mov rax, qword gs_73
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_45:
	mov rax, qword gs_74
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_46:
	mov rax, qword gs_75
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_47:
	mov rax, qword gs_76
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_48:
	mov rax, qword gs_77
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_49:
	mov rax, qword gs_78
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_50:
	mov rax, qword gs_79
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_51:
	mov rax, qword gs_80
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_52:
	mov rax, qword gs_81
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_53:
	mov rax, qword gs_82
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_54:
	mov rax, qword gs_83
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_55:
	mov rax, qword gs_84
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_56:
	mov rax, qword gs_85
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_57:
	mov rax, qword gs_86
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_58:
	mov rax, qword gs_87
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_59:
	mov rax, qword gs_88
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_60:
	mov rax, qword gs_89
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_61:
	mov rax, qword gs_90
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_62:
	mov rax, qword gs_91
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_63:
	mov rax, qword gs_92
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_64:
	mov rax, qword gs_93
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_65:
	mov rax, qword gs_94
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_66:
	mov rax, qword gs_95
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_67:
	mov rax, qword gs_96
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_68:
	mov rax, qword gs_97
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_69:
	mov rax, qword gs_98
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_60_70:
	mov rax, qword gs_99
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.default_60:
	.break_60:
	mov rax, qword gs_100
	push rax
	call func_putsln
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_print
	add rsp, 8
	mov rax, 1
	push rax
	call func_exit
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_keyword_to_string:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	cmp rax, 45
	je .case_61_0
	cmp rax, 46
	je .case_61_1
	cmp rax, 47
	je .case_61_2
	cmp rax, 48
	je .case_61_3
	cmp rax, 49
	je .case_61_4
	cmp rax, 50
	je .case_61_5
	cmp rax, 51
	je .case_61_6
	cmp rax, 52
	je .case_61_7
	cmp rax, 53
	je .case_61_8
	cmp rax, 54
	je .case_61_9
	cmp rax, 55
	je .case_61_10
	cmp rax, 56
	je .case_61_11
	cmp rax, 57
	je .case_61_12
	cmp rax, 58
	je .case_61_13
	cmp rax, 59
	je .case_61_14
	cmp rax, 60
	je .case_61_15
	cmp rax, 61
	je .case_61_16
	cmp rax, 62
	je .case_61_17
	cmp rax, 63
	je .case_61_18
	cmp rax, 64
	je .case_61_19
	cmp rax, 65
	je .case_61_20
	cmp rax, 66
	je .case_61_21
	cmp rax, 67
	je .case_61_22
	cmp rax, 68
	je .case_61_23
	cmp rax, 69
	je .case_61_24
	cmp rax, 70
	je .case_61_25
	cmp rax, 71
	je .case_61_26
	jmp .default_61
.case_61_0:
	mov rax, qword gs_101
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_1:
	mov rax, qword gs_102
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_2:
	mov rax, qword gs_103
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_3:
	mov rax, qword gs_104
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_4:
	mov rax, qword gs_105
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_5:
	mov rax, qword gs_106
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_6:
	mov rax, qword gs_107
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_7:
	mov rax, qword gs_108
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_8:
	mov rax, qword gs_109
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_9:
	mov rax, qword gs_110
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_10:
	mov rax, qword gs_111
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_11:
	mov rax, qword gs_112
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_12:
	mov rax, qword gs_113
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_13:
	mov rax, qword gs_114
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_14:
	mov rax, qword gs_115
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_15:
	mov rax, qword gs_116
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_16:
	mov rax, qword gs_117
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_17:
	mov rax, qword gs_118
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_18:
	mov rax, qword gs_119
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_19:
	mov rax, qword gs_120
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_20:
	mov rax, qword gs_121
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_21:
	mov rax, qword gs_122
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_22:
	mov rax, qword gs_123
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_23:
	mov rax, qword gs_124
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_24:
	mov rax, qword gs_125
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_25:
	mov rax, qword gs_126
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_61_26:
	mov rax, qword gs_127
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.default_61:
	.break_61:
	mov rax, qword gs_128
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_token_type_to_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 1
	push rax
	call func_exit
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_location_init:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -40
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_location_print:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_puts
	add rsp, 8
	mov rax, 58
	push rax
	call func_putc
	add rsp, 8
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	call func_putu
	add rsp, 8
	mov rax, 58
	push rax
	call func_putc
	add rsp, 8
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	call func_putu
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_die_loc2:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_location_print
	add rsp, 8
	mov rax, qword gs_129
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -40
	mov rax, [rax]
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_130
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 1
	push rax
	call func_exit
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_die_loc:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, qword gs_131
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_die_loc2
	add rsp, 32
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_token_from_type:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_token_from_int:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, 20
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 32
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_token_from_string:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, 41
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 32
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_token_from_char:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, 5
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 32
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -24
	movsx rax, byte [rax]
	pop rcx
	mov [rcx], al
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_token_from_identifier:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, 19
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 32
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_is_literal_token:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	cmp rax, 20
	je .case_62_0
	cmp rax, 5
	je .case_62_1
	cmp rax, 41
	je .case_62_2
	cmp rax, 16
	je .case_62_3
	jmp .default_62
.case_62_0:
.case_62_1:
.case_62_2:
.case_62_3:
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.default_62:
	mov rax, 0
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	.break_62:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_vector_new_sized:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 24
	push rax
	call func_malloc
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	call func_malloc
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_vector_new:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_vector_new_sized
	add rsp, 8
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_Vector_method_empty:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_Vector_method_at:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .or_right_64
	mov rax, 1
	jmp .or_end_64
.or_right_64:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setge al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_64:
	cmp rax, 0
	je .if_end_63
	mov rax, qword gs_132
	push rax
	mov rax, qword gs_133
	push rax
	call func_die
	add rsp, 16
.if_end_63:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_Vector_method_push:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_65
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	mov [rbp-8], rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	call func_malloc
	add rsp, 8
	mov [rbp-16], rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_memcpy
	add rsp, 24
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
.if_end_65:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_Vector_method_pop:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_66
	mov rax, qword gs_134
	push rax
	mov rax, qword gs_135
	push rax
	call func_die
	add rsp, 16
.if_end_66:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_Vector_method_top:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_67
	mov rax, qword gs_136
	push rax
	mov rax, qword gs_137
	push rax
	call func_die
	add rsp, 16
.if_end_67:
	mov rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_size_for_base_type:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	cmp rax, 0
	je .case_68_0
	cmp rax, 10
	je .case_68_1
	cmp rax, 5
	je .case_68_2
	cmp rax, 6
	je .case_68_3
	cmp rax, 8
	je .case_68_4
	cmp rax, 1
	je .case_68_5
	cmp rax, 2
	je .case_68_6
	cmp rax, 4
	je .case_68_7
	cmp rax, 3
	je .case_68_8
	jmp .default_68
.case_68_0:
.case_68_1:
.case_68_2:
.case_68_3:
.case_68_4:
	mov rax, 8
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_68_5:
.case_68_6:
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_68_7:
	mov rax, 4
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_68_8:
	mov rax, 2
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.default_68:
	.break_68:
	mov rax, 0
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_size_for_type:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .if_end_69
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 24
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_69:
	mov rax, 11
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_70
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 40
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_70:
	mov rax, 12
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_71
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 24
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_71:
	mov rax, 13
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_72
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 24
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_72:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_73
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 24
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_73:
	mov rax, qword gs_138
	push rax
	mov rax, qword gs_139
	push rax
	call func_die
	add rsp, 16
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_create_new_base_type:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 64
	push rax
	call func_malloc
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 24
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_size_for_base_type
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_type_new:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741840
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_74
	mov rax, qword gvars
	add rax, 1073741840
	push rax
	mov rax, 0
	push rax
	call func_create_new_base_type
	add rsp, 8
	pop rcx
	mov [rcx], rax
.if_end_74:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741848
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_75
	mov rax, qword gvars
	add rax, 1073741848
	push rax
	mov rax, 2
	push rax
	call func_create_new_base_type
	add rsp, 8
	pop rcx
	mov [rcx], rax
.if_end_75:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741856
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_76
	mov rax, qword gvars
	add rax, 1073741856
	push rax
	mov rax, 3
	push rax
	call func_create_new_base_type
	add rsp, 8
	pop rcx
	mov [rcx], rax
.if_end_76:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741864
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_77
	mov rax, qword gvars
	add rax, 1073741864
	push rax
	mov rax, 4
	push rax
	call func_create_new_base_type
	add rsp, 8
	pop rcx
	mov [rcx], rax
.if_end_77:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741872
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_78
	mov rax, qword gvars
	add rax, 1073741872
	push rax
	mov rax, 5
	push rax
	call func_create_new_base_type
	add rsp, 8
	pop rcx
	mov [rcx], rax
.if_end_78:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741880
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_79
	mov rax, qword gvars
	add rax, 1073741880
	push rax
	mov rax, 6
	push rax
	call func_create_new_base_type
	add rsp, 8
	pop rcx
	mov [rcx], rax
.if_end_79:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741888
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_80
	mov rax, qword gvars
	add rax, 1073741888
	push rax
	mov rax, 1
	push rax
	call func_create_new_base_type
	add rsp, 8
	pop rcx
	mov [rcx], rax
.if_end_80:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741896
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_81
	mov rax, qword gvars
	add rax, 1073741896
	push rax
	mov rax, 7
	push rax
	call func_create_new_base_type
	add rsp, 8
	pop rcx
	mov [rcx], rax
.if_end_81:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741904
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_82
	mov rax, qword gvars
	add rax, 1073741904
	push rax
	mov rax, 8
	push rax
	call func_create_new_base_type
	add rsp, 8
	pop rcx
	mov [rcx], rax
.if_end_82:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	cmp rax, 0
	je .case_83_0
	cmp rax, 2
	je .case_83_1
	cmp rax, 3
	je .case_83_2
	cmp rax, 4
	je .case_83_3
	cmp rax, 5
	je .case_83_4
	cmp rax, 6
	je .case_83_5
	cmp rax, 1
	je .case_83_6
	cmp rax, 7
	je .case_83_7
	cmp rax, 8
	je .case_83_8
	jmp .default_83
.case_83_0:
	mov rax, qword gvars
	add rax, 1073741840
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_83_1:
	mov rax, qword gvars
	add rax, 1073741848
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_83_2:
	mov rax, qword gvars
	add rax, 1073741856
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_83_3:
	mov rax, qword gvars
	add rax, 1073741864
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_83_4:
	mov rax, qword gvars
	add rax, 1073741872
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_83_5:
	mov rax, qword gvars
	add rax, 1073741880
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_83_6:
	mov rax, qword gvars
	add rax, 1073741888
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_83_7:
	mov rax, qword gvars
	add rax, 1073741896
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_83_8:
	mov rax, qword gvars
	add rax, 1073741904
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.default_83:
	.break_83:
	mov rax, 64
	push rax
	call func_malloc
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 24
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_size_for_base_type
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_type_new_ptr:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 10
	push rax
	call func_type_new
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_create_type_string:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 32
	push rax
	call func_malloc
	add rsp, 8
	mov [rbp-8], rax
.loop_start_84:
.loop_continue_84:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_85
	mov rax, 1
	jmp .or_end_85
.or_right_85:
	mov rax, 11
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_85:
	cmp rax, 0
	je .loop_end_84
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .cond_else_86
	mov rax, qword gs_140
	jmp .cond_end_86
.cond_else_86:
	mov rax, qword gs_141
.cond_end_86:
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_strcat
	add rsp, 16
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .loop_start_84
.break_84:
.loop_end_84:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	cmp rax, 0
	je .case_87_0
	cmp rax, 2
	je .case_87_1
	cmp rax, 3
	je .case_87_2
	cmp rax, 4
	je .case_87_3
	cmp rax, 5
	je .case_87_4
	cmp rax, 6
	je .case_87_5
	cmp rax, 1
	je .case_87_6
	cmp rax, 7
	je .case_87_7
	cmp rax, 8
	je .case_87_8
	cmp rax, 12
	je .case_87_9
	cmp rax, 13
	je .case_87_10
	jmp .default_87
.case_87_0:
	mov rax, qword gs_142
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_strcat
	add rsp, 16
	jmp .break_87
.case_87_1:
	mov rax, qword gs_143
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_strcat
	add rsp, 16
	jmp .break_87
.case_87_2:
	mov rax, qword gs_144
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_strcat
	add rsp, 16
	jmp .break_87
.case_87_3:
	mov rax, qword gs_145
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_strcat
	add rsp, 16
	jmp .break_87
.case_87_4:
	mov rax, qword gs_146
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_strcat
	add rsp, 16
	jmp .break_87
.case_87_5:
	mov rax, qword gs_147
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_strcat
	add rsp, 16
	jmp .break_87
.case_87_6:
	mov rax, qword gs_148
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_strcat
	add rsp, 16
	jmp .break_87
.case_87_7:
	mov rax, qword gs_149
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_strcat
	add rsp, 16
	jmp .break_87
.case_87_8:
	mov rax, qword gs_150
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_strcat
	add rsp, 16
	jmp .break_87
.case_87_9:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_strcat
	add rsp, 16
	jmp .break_87
.case_87_10:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_strcat
	add rsp, 16
	jmp .break_87
.default_87:
	mov rax, qword gs_151
	push rax
	mov rax, qword gs_152
	push rax
	call func_die
	add rsp, 16
	.break_87:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_is_int_type:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	cmp rax, 0
	je .case_88_0
	cmp rax, 2
	je .case_88_1
	cmp rax, 3
	je .case_88_2
	cmp rax, 4
	je .case_88_3
	cmp rax, 5
	je .case_88_4
	cmp rax, 1
	je .case_88_5
	jmp .default_88
.case_88_0:
.case_88_1:
.case_88_2:
.case_88_3:
.case_88_4:
.case_88_5:
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.default_88:
	.break_88:
	mov rax, 0
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_is_float_type:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_types_equal:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	jne .and_right_90
	mov rax, 0
	jmp .and_end_90
.and_right_90:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_90:
	cmp rax, 0
	je .if_end_89
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_89:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_92
	mov rax, 1
	jmp .or_end_92
.or_right_92:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_92:
	cmp rax, 0
	je .if_end_91
	mov rax, 0
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_91:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_94
	mov rax, 1
	jmp .or_end_94
.or_right_94:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_94:
	cmp rax, 0
	je .if_end_93
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_93:
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_95
	mov rax, 12
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_97
	mov rax, 1
	jmp .or_end_97
.or_right_97:
	mov rax, 13
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_97:
	cmp rax, 0
	je .if_end_96
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_96:
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_types_equal
	add rsp, 16
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_95:
	mov rax, 0
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_is_struct_or_structptr:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 12
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_99
	mov rax, 1
	jmp .or_end_99
.or_right_99:
	mov rax, 13
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_99:
	cmp rax, 0
	je .if_end_98
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_98:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_100
	mov rax, 12
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_102
	mov rax, 1
	jmp .or_end_102
.or_right_102:
	mov rax, 13
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_102:
	cmp rax, 0
	je .if_end_101
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_101:
.if_end_100:
	mov rax, 0
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_node_new:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 72
	push rax
	call func_malloc
	add rsp, 8
	mov [rbp-8], rax
	mov rax, qword gvars
	add rax, 1073741912
	push rax
	mov rax, 1
	push rax
	mov rax, qword gvars
	add rax, 1073741912
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_node_from_int_literal:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 25
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 0
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_node_new_binop:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_type_check_binary
	add rsp, 16
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_convert_to_float:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	je .if_end_103
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_103:
	mov rax, 27
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 6
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_convert_to_int:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	je .if_end_104
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_104:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_105
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_create_type_string
	add rsp, 8
	push rax
	mov rax, qword gs_153
	push rax
	mov rax, qword gs_154
	push rax
	call func_die2
	add rsp, 24
.if_end_105:
	mov rax, 27
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 0
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_variable_new:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 24
	push rax
	call func_malloc
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_block_add_child:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_106
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	call func_vector_new
	add rsp, 0
	pop rcx
	mov [rcx], rax
.if_end_106:
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_node_type_to_string:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_107
	mov rax, qword gs_155
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_107:
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_108
	mov rax, qword gs_156
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_108:
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_109
	mov rax, qword gs_157
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_109:
	mov rax, 3
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_110
	mov rax, qword gs_158
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_110:
	mov rax, 4
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_111
	mov rax, qword gs_159
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_111:
	mov rax, 5
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_112
	mov rax, qword gs_160
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_112:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_113
	mov rax, qword gs_161
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_113:
	mov rax, 7
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_114
	mov rax, qword gs_162
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_114:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_115
	mov rax, qword gs_163
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_115:
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_116
	mov rax, qword gs_164
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_116:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_117
	mov rax, qword gs_165
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_117:
	mov rax, 11
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_118
	mov rax, qword gs_166
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_118:
	mov rax, 12
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_119
	mov rax, qword gs_167
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_119:
	mov rax, 13
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_120
	mov rax, qword gs_168
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_120:
	mov rax, 14
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_121
	mov rax, qword gs_169
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_121:
	mov rax, 15
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_122
	mov rax, qword gs_170
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_122:
	mov rax, 16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_123
	mov rax, qword gs_171
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_123:
	mov rax, 17
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_124
	mov rax, qword gs_172
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_124:
	mov rax, 18
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_125
	mov rax, qword gs_173
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_125:
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_126
	mov rax, qword gs_174
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_126:
	mov rax, 20
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_127
	mov rax, qword gs_175
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_127:
	mov rax, 21
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_128
	mov rax, qword gs_176
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_128:
	mov rax, 22
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_129
	mov rax, qword gs_177
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_129:
	mov rax, 23
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_130
	mov rax, qword gs_178
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_130:
	mov rax, 24
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_131
	mov rax, qword gs_179
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_131:
	mov rax, 25
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_132
	mov rax, qword gs_180
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_132:
	mov rax, 26
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_133
	mov rax, qword gs_181
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_133:
	mov rax, 27
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_134
	mov rax, qword gs_182
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_134:
	mov rax, 28
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_135
	mov rax, qword gs_183
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_135:
	mov rax, 29
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_136
	mov rax, qword gs_184
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_136:
	mov rax, 30
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_137
	mov rax, qword gs_185
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_137:
	mov rax, 31
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_138
	mov rax, qword gs_186
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_138:
	mov rax, 32
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_139
	mov rax, qword gs_187
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_139:
	mov rax, 33
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_140
	mov rax, qword gs_188
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_140:
	mov rax, 34
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_141
	mov rax, qword gs_189
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_141:
	mov rax, 35
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_142
	mov rax, qword gs_190
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_142:
	mov rax, 36
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_143
	mov rax, qword gs_191
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_143:
	mov rax, 37
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_144
	mov rax, qword gs_192
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_144:
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_145
	mov rax, qword gs_193
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_145:
	mov rax, 39
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_146
	mov rax, qword gs_194
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_146:
	mov rax, 41
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_147
	mov rax, qword gs_195
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_147:
	mov rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_148
	mov rax, qword gs_196
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_148:
	mov rax, 42
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_149
	mov rax, qword gs_197
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_149:
	mov rax, 43
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_150
	mov rax, qword gs_198
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_150:
	mov rax, 44
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_151
	mov rax, qword gs_199
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_151:
	mov rax, qword gs_200
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_putu
	add rsp, 8
	mov rax, 10
	push rax
	call func_putc
	add rsp, 8
	mov rax, 1
	push rax
	call func_exit
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_is_binary_op:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 5
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_152
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_152:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_153
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_153:
	mov rax, 7
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_154
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_154:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_155
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_155:
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_156
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_156:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_157
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_157:
	mov rax, 11
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_158
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_158:
	mov rax, 12
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_159
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_159:
	mov rax, 13
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_160
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_160:
	mov rax, 14
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_161
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_161:
	mov rax, 15
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_162
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_162:
	mov rax, 16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_163
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_163:
	mov rax, 17
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_164
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_164:
	mov rax, 18
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_165
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_165:
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_166
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_166:
	mov rax, 20
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_167
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_167:
	mov rax, 21
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_168
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_168:
	mov rax, 22
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_169
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_169:
	mov rax, 0
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_is_unary_op:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_170
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_170:
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_171
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_171:
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_172
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_172:
	mov rax, 3
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_173
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_173:
	mov rax, 4
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_174
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_174:
	mov rax, 0
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_is_lvalue:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 37
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_175
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_175:
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_176
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_176:
	mov rax, 24
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_177
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_177:
	mov rax, 4
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_178
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_178:
	mov rax, 0
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_binary_token_to_op:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 33
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_179
	mov rax, 5
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_179:
	mov rax, 24
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_180
	mov rax, 6
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_180:
	mov rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_181
	mov rax, 7
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_181:
	mov rax, 39
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_182
	mov rax, 8
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_182:
	mov rax, 32
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_183
	mov rax, 9
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_183:
	mov rax, 22
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_184
	mov rax, 10
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_184:
	mov rax, 37
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_185
	mov rax, 11
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_185:
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_186
	mov rax, 12
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_186:
	mov rax, 31
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_187
	mov rax, 14
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_187:
	mov rax, 43
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_188
	mov rax, 16
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_188:
	mov rax, 14
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_189
	mov rax, 17
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_189:
	mov rax, 27
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_190
	mov rax, 18
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_190:
	mov rax, 23
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_191
	mov rax, 19
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_191:
	mov rax, 21
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_192
	mov rax, 20
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_192:
	mov rax, 18
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_193
	mov rax, 21
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_193:
	mov rax, 17
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_194
	mov rax, 22
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_194:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_195
	mov rax, 13
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_195:
	mov rax, 3
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_196
	mov rax, 15
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_196:
	mov rax, 4
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_197
	mov rax, 16
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_197:
	mov rax, qword gs_201
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_token_type_to_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 1
	push rax
	call func_exit
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_dump_ast:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 0
	mov [rbp-8], rax
.loop_start_198:
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, 2
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_198
	mov rax, 32
	push rax
	call func_putc
	add rsp, 8
.loop_continue_198:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_198
.break_198:
.loop_end_198:
	mov rax, 43
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_200
	mov rax, 1
	jmp .or_end_200
.or_right_200:
	mov rax, 44
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_200:
	cmp rax, 0
	je .if_else_199
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_node_type_to_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 0
	mov [rbp-8], rax
.loop_start_201:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_201
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	call func_dump_ast
	add rsp, 16
.loop_continue_201:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_201
.break_201:
.loop_end_201:
	jmp .if_end_199
.if_else_199:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_is_binary_op
	add rsp, 8
	cmp rax, 0
	je .if_else_202
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_node_type_to_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_dump_ast
	add rsp, 16
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_dump_ast
	add rsp, 16
	jmp .if_end_202
.if_else_202:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_is_unary_op
	add rsp, 8
	cmp rax, 0
	je .or_right_204
	mov rax, 1
	jmp .or_end_204
.or_right_204:
	mov rax, 39
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_204:
	cmp rax, 0
	je .if_else_203
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_node_type_to_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	call func_dump_ast
	add rsp, 16
	jmp .if_end_203
.if_else_203:
	mov rax, 29
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_206
	mov rax, 1
	jmp .or_end_206
.or_right_206:
	mov rax, 30
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_206:
	cmp rax, 0
	je .if_else_205
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_node_type_to_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_dump_ast
	add rsp, 16
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_dump_ast
	add rsp, 16
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 16
	mov rax, [rax]
	cmp rax, 0
	je .if_end_207
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 16
	mov rax, [rax]
	push rax
	call func_dump_ast
	add rsp, 16
.if_end_207:
	jmp .if_end_205
.if_else_205:
	mov rax, 25
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_208
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_209
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_putu
	add rsp, 8
	mov rax, 10
	push rax
	call func_putc
	add rsp, 8
	jmp .if_end_209
.if_else_209:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_210
	mov rax, 34
	push rax
	call func_putc
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_puts
	add rsp, 8
	mov rax, 34
	push rax
	call func_putc
	add rsp, 8
	mov rax, 10
	push rax
	call func_putc
	add rsp, 8
	jmp .if_end_210
.if_else_210:
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_211
	mov rax, 39
	push rax
	call func_putc
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	movsx rax, byte [rax]
	push rax
	call func_putc
	add rsp, 8
	mov rax, 39
	push rax
	call func_putc
	add rsp, 8
	mov rax, 10
	push rax
	call func_putc
	add rsp, 8
	jmp .if_end_211
.if_else_211:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_212
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_putsln
	add rsp, 8
	jmp .if_end_212
.if_else_212:
	mov rax, qword gs_202
	push rax
	mov rax, qword gs_203
	push rax
	call func_die
	add rsp, 16
.if_end_212:
.if_end_211:
.if_end_210:
.if_end_209:
	jmp .if_end_208
.if_else_208:
	mov rax, 41
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_213
	mov rax, qword gs_204
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_puts
	add rsp, 8
	mov rax, qword gs_205
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	cmp rax, 0
	je .if_end_214
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_dump_ast
	add rsp, 16
.if_end_214:
	jmp .if_end_213
.if_else_213:
	mov rax, 36
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_215
	mov rax, qword gs_206
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	add rax, 0
	mov rax, [rax]
	push rax
	call func_puts
	add rsp, 8
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	add rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_216
	mov rax, qword gs_207
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	add rax, 8
	mov rax, [rax]
	push rax
	call func_create_type_string
	add rsp, 8
	push rax
	call func_puts
	add rsp, 8
.if_end_216:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	cmp rax, 0
	je .if_else_217
	mov rax, qword gs_208
	push rax
	call func_puts
	add rsp, 8
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	push rax
	call func_dump_ast
	add rsp, 16
	jmp .if_end_217
.if_else_217:
	mov rax, 10
	push rax
	call func_putc
	add rsp, 8
.if_end_217:
	jmp .if_end_215
.if_else_215:
	mov rax, 23
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_218
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_node_type_to_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_dump_ast
	add rsp, 16
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_dump_ast
	add rsp, 16
	jmp .if_end_218
.if_else_218:
	mov rax, 37
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_220
	mov rax, 1
	jmp .or_end_220
.or_right_220:
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_220:
	cmp rax, 0
	je .if_else_219
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_putsln
	add rsp, 8
	jmp .if_end_219
.if_else_219:
	mov rax, 27
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_221
	mov rax, qword gs_209
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_create_type_string
	add rsp, 8
	push rax
	call func_puts
	add rsp, 8
	mov rax, qword gs_210
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	call func_dump_ast
	add rsp, 16
	jmp .if_end_221
.if_else_221:
	mov rax, 35
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_222
	mov rax, qword gs_211
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_putu
	add rsp, 8
	mov rax, qword gs_212
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 0
	mov [rbp-8], rax
.loop_start_223:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_223
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	call func_dump_ast
	add rsp, 16
.loop_continue_223:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_223
.break_223:
.loop_end_223:
	jmp .if_end_222
.if_else_222:
	mov rax, 34
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_224
	mov rax, qword gs_213
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_dump_ast
	add rsp, 16
	mov rax, 0
	mov [rbp-8], rax
.loop_start_225:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_225
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	call func_dump_ast
	add rsp, 16
.loop_continue_225:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_225
.break_225:
.loop_end_225:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 16
	mov rax, [rax]
	cmp rax, 0
	je .if_end_226
	mov rax, 0
	mov [rbp-8], rax
.loop_start_227:
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, 2
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_227
	mov rax, 32
	push rax
	call func_putc
	add rsp, 8
.loop_continue_227:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_227
.break_227:
.loop_end_227:
	mov rax, qword gs_214
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 0
	mov [rbp-8], rax
.loop_start_228:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_228
	mov rax, 3
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	call func_dump_ast
	add rsp, 16
.loop_continue_228:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_228
.break_228:
.loop_end_228:
.if_end_226:
	jmp .if_end_224
.if_else_224:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_node_type_to_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
.if_end_224:
.if_end_222:
.if_end_221:
.if_end_219:
.if_end_218:
.if_end_215:
.if_end_213:
.if_end_208:
.if_end_205:
.if_end_203:
.if_end_202:
.if_end_199:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_decay_array_to_pointer:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_is_lvalue
	add rsp, 8
	cmp rax, 0
	jne .and_right_230
	mov rax, 0
	jmp .and_end_230
.and_right_230:
	mov rax, 11
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_230:
	cmp rax, 0
	je .if_end_229
	mov rax, 3
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_type_check_unary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
.if_end_229:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_type_check_unary:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, 3
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	jne .and_right_232
	mov rax, 0
	jmp .and_end_232
.and_right_232:
	mov rax, 12
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_232:
	cmp rax, 0
	je .if_end_231
	mov rax, qword gs_215
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, qword gs_216
	push rax
	call func_die_loc
	add rsp, 24
.if_end_231:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	je .if_end_233
	mov rax, 3
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	jne .and_right_235
	mov rax, 0
	jmp .and_end_235
.and_right_235:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_235:
	cmp rax, 0
	je .if_end_234
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_node_type_to_string
	add rsp, 8
	push rax
	mov rax, qword gs_217
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, qword gs_218
	push rax
	call func_die_loc2
	add rsp, 32
.if_end_234:
.if_end_233:
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_236
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 0
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_236
.if_else_236:
	mov rax, 3
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_237
	mov rax, 10
	push rax
	call func_type_new
	add rsp, 8
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 11
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .cond_else_238
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	jmp .cond_end_238
.cond_else_238:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
.cond_end_238:
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .if_end_237
.if_else_237:
	mov rax, 4
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_239
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_240
	mov rax, qword gs_219
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, qword gs_220
	push rax
	call func_die_loc
	add rsp, 24
.if_end_240:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_decay_array_to_pointer
	add rsp, 16
	pop rcx
	mov [rcx], rax
	jmp .if_end_239
.if_else_239:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_241
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	jne .and_right_243
	mov rax, 0
	jmp .and_end_243
.and_right_243:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_243:
	cmp rax, 0
	je .if_end_242
	mov rax, qword gs_221
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, qword gs_222
	push rax
	call func_die_loc
	add rsp, 24
.if_end_242:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .if_end_241
.if_else_241:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
.if_end_241:
.if_end_239:
.if_end_237:
.if_end_236:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_type_check_binary:
	push rbp
	mov rbp, rsp
	sub rsp, 24
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	mov [rbp-16], rax
	mov rax, 12
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_245
	mov rax, 1
	jmp .or_end_245
.or_right_245:
	mov rax, 12
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_245:
	cmp rax, 0
	je .if_end_244
	mov rax, qword gs_223
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, qword gs_224
	push rax
	call func_die_loc
	add rsp, 24
.if_end_244:
	mov rax, 5
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_246
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	jne .and_right_248
	mov rax, 0
	jmp .and_end_248
.and_right_248:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	setne al
.and_end_248:
	cmp rax, 0
	je .if_else_247
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 0
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_247
.if_else_247:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_249
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_250
	mov rax, qword gs_225
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, qword gs_226
	push rax
	call func_die_loc
	add rsp, 24
.if_end_250:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_251
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	push rax
	call func_node_from_int_literal
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, 7
	push rax
	call func_node_new_binop
	add rsp, 24
	mov [rbp-24], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
.if_end_251:
	jmp .if_end_249
.if_else_249:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_252
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_253
	mov rax, qword gs_227
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, qword gs_228
	push rax
	call func_die_loc
	add rsp, 24
.if_end_253:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_254
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	push rax
	call func_node_from_int_literal
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, 7
	push rax
	call func_node_new_binop
	add rsp, 24
	mov [rbp-24], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
.if_end_254:
	jmp .if_end_252
.if_else_252:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	je .or_right_256
	mov rax, 1
	jmp .or_end_256
.or_right_256:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	setne al
.or_end_256:
	cmp rax, 0
	je .if_else_255
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 6
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_convert_to_float
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_convert_to_float
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_255
.if_else_255:
	mov rax, qword gs_229
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_create_type_string
	add rsp, 8
	push rax
	call func_puts
	add rsp, 8
	mov rax, 10
	push rax
	call func_putc
	add rsp, 8
	mov rax, qword gs_230
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_create_type_string
	add rsp, 8
	push rax
	call func_puts
	add rsp, 8
	mov rax, 10
	push rax
	call func_putc
	add rsp, 8
	mov rax, qword gs_231
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, qword gs_232
	push rax
	call func_die_loc
	add rsp, 24
.if_end_255:
.if_end_252:
.if_end_249:
.if_end_247:
	jmp .if_end_246
.if_else_246:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_257
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	jne .and_right_259
	mov rax, 0
	jmp .and_end_259
.and_right_259:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	setne al
.and_end_259:
	cmp rax, 0
	je .if_else_258
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 0
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_258
.if_else_258:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	jne .and_right_261
	mov rax, 0
	jmp .and_end_261
.and_right_261:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	setne al
.and_end_261:
	cmp rax, 0
	je .if_else_260
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_262
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	push rax
	call func_node_from_int_literal
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, 7
	push rax
	call func_node_new_binop
	add rsp, 24
	mov [rbp-24], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
.if_end_262:
	jmp .if_end_260
.if_else_260:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	jne .and_right_264
	mov rax, 0
	jmp .and_end_264
.and_right_264:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_264:
	cmp rax, 0
	je .if_else_263
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_265
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	push rax
	call func_node_from_int_literal
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, 7
	push rax
	call func_node_new_binop
	add rsp, 24
	mov [rbp-24], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
.if_end_265:
	jmp .if_end_263
.if_else_263:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	jne .and_right_267
	mov rax, 0
	jmp .and_end_267
.and_right_267:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_267:
	cmp rax, 0
	je .if_else_266
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 0
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_types_equal
	add rsp, 16
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_268
	mov rax, qword gs_233
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, qword gs_234
	push rax
	call func_die_loc
	add rsp, 24
.if_end_268:
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_269
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	push rax
	call func_node_from_int_literal
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, 7
	push rax
	call func_node_new_binop
	add rsp, 24
	mov [rbp-24], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
.if_end_269:
	jmp .if_end_266
.if_else_266:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	je .or_right_271
	mov rax, 1
	jmp .or_end_271
.or_right_271:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	setne al
.or_end_271:
	cmp rax, 0
	je .if_else_270
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 6
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_convert_to_float
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_convert_to_float
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_270
.if_else_270:
	mov rax, qword gs_235
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, qword gs_236
	push rax
	call func_die_loc
	add rsp, 24
.if_end_270:
.if_end_266:
.if_end_263:
.if_end_260:
.if_end_258:
	jmp .if_end_257
.if_else_257:
	mov rax, 7
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_274
	mov rax, 1
	jmp .or_end_274
.or_right_274:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_274:
	cmp rax, 0
	je .or_right_273
	mov rax, 1
	jmp .or_end_273
.or_right_273:
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_273:
	cmp rax, 0
	je .if_else_272
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	jne .and_right_276
	mov rax, 0
	jmp .and_end_276
.and_right_276:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	setne al
.and_end_276:
	cmp rax, 0
	je .if_else_275
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .if_end_275
.if_else_275:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	je .or_right_278
	mov rax, 1
	jmp .or_end_278
.or_right_278:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	setne al
.or_end_278:
	cmp rax, 0
	je .if_else_277
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_279
	mov rax, qword gs_237
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, qword gs_238
	push rax
	call func_die_loc
	add rsp, 24
.if_end_279:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 6
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_convert_to_float
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_convert_to_float
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_277
.if_else_277:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_node_type_to_string
	add rsp, 8
	push rax
	mov rax, qword gs_239
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, qword gs_240
	push rax
	call func_die_loc2
	add rsp, 32
.if_end_277:
.if_end_275:
	jmp .if_end_272
.if_else_272:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 0
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	je .or_right_281
	mov rax, 1
	jmp .or_end_281
.or_right_281:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	setne al
.or_end_281:
	cmp rax, 0
	je .if_end_280
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_convert_to_float
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_convert_to_float
	add rsp, 8
	pop rcx
	mov [rcx], rax
.if_end_280:
.if_end_272:
.if_end_257:
.if_end_246:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_dump_rectype:
	push rbp
	mov rbp, rsp
	sub rsp, 24
.loop_start_282:
.loop_continue_282:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_283
	mov rax, 1
	jmp .or_end_283
.or_right_283:
	mov rax, 11
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_283:
	cmp rax, 0
	je .loop_end_282
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_284
	mov rax, qword gs_241
	push rax
	call func_puts
	add rsp, 8
	jmp .if_end_284
.if_else_284:
	mov rax, 11
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_285
	mov rax, qword gs_242
	push rax
	call func_puts
	add rsp, 8
.if_end_285:
.if_end_284:
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .loop_start_282
.break_282:
.loop_end_282:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_286
	mov rax, qword gs_243
	push rax
	call func_putsln
	add rsp, 8
	xor rax, rax
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	jmp .if_end_286
.if_else_286:
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_287
	mov rax, qword gs_244
	push rax
	call func_putsln
	add rsp, 8
	xor rax, rax
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	jmp .if_end_287
.if_else_287:
	mov rax, 7
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_288
	mov rax, qword gs_245
	push rax
	call func_putsln
	add rsp, 8
	xor rax, rax
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	jmp .if_end_288
.if_else_288:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_289
	mov rax, qword gs_246
	push rax
	call func_putsln
	add rsp, 8
	xor rax, rax
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_289:
.if_end_288:
.if_end_287:
.if_end_286:
	mov rax, 12
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .cond_else_290
	mov rax, qword gs_247
	jmp .cond_end_290
.cond_else_290:
	mov rax, qword gs_248
.cond_end_290:
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	call func_puts
	add rsp, 8
	mov rax, qword gs_249
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 0
	mov [rbp-8], rax
.loop_start_291:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 48
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_291
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 48
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	mov [rbp-16], rax
	mov rax, 0
	mov [rbp-24], rax
.loop_start_292:
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_292
	mov rax, qword gs_250
	push rax
	call func_puts
	add rsp, 8
.loop_continue_292:
	mov rax, rbp
	sub rax, 24
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_292
.break_292:
.loop_end_292:
	mov rax, qword gs_251
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_puts
	add rsp, 8
	mov rax, qword gs_252
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	call func_putu
	add rsp, 8
	mov rax, qword gs_253
	push rax
	call func_puts
	add rsp, 8
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_dump_rectype
	add rsp, 16
	mov rax, qword gs_254
	push rax
	call func_puts
	add rsp, 8
.loop_continue_291:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_291
.break_291:
.loop_end_291:
	mov rax, 0
	mov [rbp-8], rax
.loop_start_293:
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_293
	mov rax, qword gs_255
	push rax
	call func_puts
	add rsp, 8
.loop_continue_293:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_293
.break_293:
.loop_end_293:
	mov rax, qword gs_256
	push rax
	call func_putsln
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_convert_type:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	jne .and_right_295
	mov rax, 0
	jmp .and_end_295
.and_right_295:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	setne al
.and_end_295:
	cmp rax, 0
	je .if_end_294
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_convert_to_int
	add rsp, 8
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_294:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	jne .and_right_297
	mov rax, 0
	jmp .and_end_297
.and_right_297:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	setne al
.and_end_297:
	cmp rax, 0
	je .if_end_296
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_convert_to_float
	add rsp, 8
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_296:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_299
	mov rax, 1
	jmp .or_end_299
.or_right_299:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_299:
	cmp rax, 0
	je .if_end_298
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_298:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	jne .and_right_301
	mov rax, 0
	jmp .and_end_301
.and_right_301:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_301:
	cmp rax, 0
	je .if_end_300
	mov rax, 7
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_303
	mov rax, 1
	jmp .or_end_303
.or_right_303:
	mov rax, 7
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_303:
	cmp rax, 0
	je .if_end_302
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_302:
.if_end_300:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	jne .and_right_305
	mov rax, 0
	jmp .and_end_305
.and_right_305:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	setne al
.and_end_305:
	cmp rax, 0
	je .if_end_304
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_304:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_types_equal
	add rsp, 16
	cmp rax, 0
	je .if_end_306
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_306:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_compound_push_field:
	push rbp
	mov rbp, rsp
	sub rsp, 32
	mov rax, 12
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	jne .and_right_308
	mov rax, 0
	jmp .and_end_308
.and_right_308:
	mov rax, 13
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_308:
	cmp rax, 0
	je .if_end_307
	mov rax, qword gs_257
	push rax
	mov rax, qword gs_258
	push rax
	call func_die
	add rsp, 16
.if_end_307:
	mov rax, 13
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	mov [rbp-16], rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_min
	add rsp, 16
	mov [rbp-24], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	cmp rax, 0
	je .cond_else_309
	mov rax, 0
	jmp .cond_end_309
.cond_else_309:
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 24
	mov rax, [rax]
	push rax
	call func_align_up
	add rsp, 16
.cond_end_309:
	mov [rbp-32], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 24
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	cmp rax, 0
	je .cond_else_310
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_max
	add rsp, 16
	jmp .cond_end_310
.cond_else_310:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	pop rcx
	add rax, rcx
.cond_end_310:
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -40
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_variable_new
	add rsp, 24
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 48
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_compound_find_field:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, 0
	mov [rbp-8], rax
.loop_start_311:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 48
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_311
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 48
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_end_312
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_312:
	mov rax, qword gs_259
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_end_313
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_compound_find_field
	add rsp, 16
	pop rcx
	mov [rcx], rax
	cmp rax, 0
	je .if_end_314
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_314:
.if_end_313:
.loop_continue_311:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_311
.break_311:
.loop_end_311:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_compound_find_method:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, 0
	mov [rbp-8], rax
.loop_start_315:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 56
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_315
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 56
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_end_316
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_316:
.loop_continue_315:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_315
.break_315:
.loop_end_315:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_builtin_create_syscall:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, 42
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 8
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 24
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	call func_vector_new_sized
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, 0
	push rax
	mov rax, 0
	push rax
	call func_type_new
	add rsp, 8
	push rax
	mov rax, qword gs_260
	push rax
	call func_variable_new
	add rsp, 24
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, 0
	mov [rbp-16], rax
.loop_start_317:
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_317
	mov rax, 0
	push rax
	mov rax, 8
	push rax
	call func_type_new
	add rsp, 8
	push rax
	mov rax, qword gs_261
	push rax
	call func_variable_new
	add rsp, 24
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
.loop_continue_317:
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_317
.break_317:
.loop_end_317:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741920
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_builtins_push_posix_constants:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 59
	push rax
	mov rax, qword gs_262
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 0
	push rax
	mov rax, qword gs_263
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 1
	push rax
	mov rax, qword gs_264
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 60
	push rax
	mov rax, qword gs_265
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 2
	push rax
	mov rax, qword gs_266
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 8
	push rax
	mov rax, qword gs_267
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 257
	push rax
	mov rax, qword gs_268
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 3
	push rax
	mov rax, qword gs_269
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 57
	push rax
	mov rax, qword gs_270
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 61
	push rax
	mov rax, qword gs_271
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 9
	push rax
	mov rax, qword gs_272
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 0
	push rax
	mov rax, qword gs_273
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 1
	push rax
	mov rax, qword gs_274
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 2
	push rax
	mov rax, qword gs_275
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 0
	push rax
	mov rax, qword gs_276
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 1
	push rax
	mov rax, qword gs_277
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 2
	push rax
	mov rax, qword gs_278
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 64
	push rax
	mov rax, qword gs_279
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 128
	push rax
	mov rax, qword gs_280
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 512
	push rax
	mov rax, qword gs_281
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, -100
	push rax
	mov rax, qword gs_282
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 1
	push rax
	mov rax, qword gs_283
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 2
	push rax
	mov rax, qword gs_284
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 4
	push rax
	mov rax, qword gs_285
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 0
	push rax
	mov rax, qword gs_286
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 1
	push rax
	mov rax, qword gs_287
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 2
	push rax
	mov rax, qword gs_288
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 32
	push rax
	mov rax, qword gs_289
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 16
	push rax
	mov rax, qword gs_290
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, -1
	push rax
	mov rax, qword gs_291
	push rax
	call func_constant_push
	add rsp, 16
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_initialize_builtins:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	call func_builtins_push_posix_constants
	add rsp, 0
	mov rax, 0
	push rax
	mov rax, qword gs_292
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 1
	push rax
	mov rax, qword gs_293
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 42
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 7
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, qword gs_294
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 24
	push rax
	mov rax, 1
	push rax
	call func_vector_new_sized
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, 0
	push rax
	mov rax, 8
	push rax
	call func_type_new
	add rsp, 8
	push rax
	mov rax, qword gs_295
	push rax
	call func_variable_new
	add rsp, 24
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741920
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 42
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 6
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, qword gs_296
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 24
	push rax
	mov rax, 1
	push rax
	call func_vector_new_sized
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, 0
	push rax
	mov rax, 6
	push rax
	call func_type_new
	add rsp, 8
	push rax
	mov rax, qword gs_297
	push rax
	call func_variable_new
	add rsp, 24
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741920
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 42
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 0
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, qword gs_298
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 24
	push rax
	mov rax, 0
	push rax
	call func_vector_new_sized
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741920
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, 0
	push rax
	mov rax, qword gs_299
	push rax
	call func_builtin_create_syscall
	add rsp, 16
	mov rax, 1
	push rax
	mov rax, qword gs_300
	push rax
	call func_builtin_create_syscall
	add rsp, 16
	mov rax, 2
	push rax
	mov rax, qword gs_301
	push rax
	call func_builtin_create_syscall
	add rsp, 16
	mov rax, 3
	push rax
	mov rax, qword gs_302
	push rax
	call func_builtin_create_syscall
	add rsp, 16
	mov rax, 4
	push rax
	mov rax, qword gs_303
	push rax
	call func_builtin_create_syscall
	add rsp, 16
	mov rax, 5
	push rax
	mov rax, qword gs_304
	push rax
	call func_builtin_create_syscall
	add rsp, 16
	mov rax, 6
	push rax
	mov rax, qword gs_305
	push rax
	call func_builtin_create_syscall
	add rsp, 16
	mov rax, 7
	push rax
	mov rax, qword gs_306
	push rax
	call func_builtin_create_syscall
	add rsp, 16
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_find_builtin_function:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, 0
	mov [rbp-8], rax
.loop_start_318:
	mov rax, qword gvars
	add rax, 1073741920
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_318
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, qword gvars
	add rax, 1073741920
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_end_319
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_319:
.loop_continue_318:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_318
.break_318:
.loop_end_318:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_generate_builtins:
	push rbp
	mov rbp, rsp
	sub rsp, 96
	mov rax, qword gs_307
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_308
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_309
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_310
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_311
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_312
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_313
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_314
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_315
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_316
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_317
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_318
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_319
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_320
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_321
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_322
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_323
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_324
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_325
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_326
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_327
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_328
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_329
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_330
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_331
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_332
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_333
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_334
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_335
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_336
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_337
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, 1
	push rax
	call func_generate_syscall
	add rsp, 8
	mov rax, qword gs_338
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_339
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, 8
	push rax
	mov rax, 0
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 80
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gs_340
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 1
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 80
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gs_341
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 2
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 80
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gs_342
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 3
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 80
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gs_343
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 4
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 80
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gs_344
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 5
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 80
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gs_345
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 6
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 80
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gs_346
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 7
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 80
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gs_347
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 8
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 80
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gs_348
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 9
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 80
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gs_349
	pop rcx
	mov [rcx], rax
	mov rax, 0
	mov [rbp-88], rax
.loop_start_320:
	mov rax, 7
	push rax
	mov rax, rbp
	sub rax, 88
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_320
	mov rax, qword gs_350
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 88
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_351
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, 0
	mov [rbp-96], rax
.loop_start_321:
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 88
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, 96
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_321
	mov rax, qword gs_352
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 96
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 80
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_353
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 96
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	imul rax, rcx
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_354
	push rax
	call func_emit_asm
	add rsp, 8
.loop_continue_321:
	mov rax, rbp
	sub rax, 96
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 96
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_321
.break_321:
.loop_end_321:
	mov rax, qword gs_355
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, 0
	cmp rax, 0
	je .if_end_322
	mov rax, qword gs_356
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_357
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_358
	push rax
	call func_emit_asm
	add rsp, 8
.if_end_322:
	mov rax, qword gs_359
	push rax
	call func_emit_asm
	add rsp, 8
.loop_continue_320:
	mov rax, rbp
	sub rax, 88
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 88
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_320
.break_320:
.loop_end_320:
	mov rax, qword gs_360
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_361
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_362
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, 57
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_363
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_364
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, 0
	cmp rax, 0
	je .if_end_323
	mov rax, qword gs_365
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_366
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_367
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_368
	push rax
	call func_emit_asm
	add rsp, 8
.if_end_323:
	mov rax, qword gs_369
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_370
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_371
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_372
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_373
	push rax
	call func_emit_asm
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_lexer_new:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 48
	push rax
	call func_malloc
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 24
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_lexer_new_open_file:
	push rbp
	mov rbp, rsp
	sub rsp, 24
	mov rax, 114
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_fopen
	add rsp, 16
	mov [rbp-8], rax
	mov rax, 0
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call _File_method_slurp
	add rsp, 16
	mov [rbp-24], rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_lexer_new
	add rsp, 24
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call _File_method_close
	add rsp, 8
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call _File_method_close
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_Lexer_method_loc:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 32
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 40
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_Lexer_method_skip_whitespace:
	push rbp
	mov rbp, rsp
	sub rsp, 0
.loop_start_324:
.loop_continue_324:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	jne .and_right_325
	mov rax, 0
	jmp .and_end_325
.and_right_325:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	push rax
	call func_is_space
	add rsp, 8
	cmp rax, 0
	setne al
.and_end_325:
	cmp rax, 0
	je .loop_end_324
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_326
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 32
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 40
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], rax
	jmp .if_end_326
.if_else_326:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 40
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 40
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
.if_end_326:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_324
.break_324:
.loop_end_324:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_Lexer_method_starts_with:
	push rbp
	mov rbp, rsp
	sub rsp, 24
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_strlen
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .if_end_327
	mov rax, 0
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_327:
	mov rax, 0
	mov [rbp-16], rax
.loop_start_328:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_328
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_329
	mov rax, 0
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_329:
.loop_continue_328:
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_328
.break_328:
.loop_end_328:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_330
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_330:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	mov [rbp-24], al
	mov rax, rbp
	sub rax, 24
	movsx rax, byte [rax]
	push rax
	call func_is_digit
	add rsp, 8
	cmp rax, 0
	je .or_right_331
	mov rax, 1
	jmp .or_end_331
.or_right_331:
	mov rax, rbp
	sub rax, 24
	movsx rax, byte [rax]
	push rax
	call func_is_alpha
	add rsp, 8
	cmp rax, 0
	setne al
.or_end_331:
	cmp rax, 0
	sete al
	movzx rax, al
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_Lexer_method_advance:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 40
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 40
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_Lexer_method_peek_char:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	cmp rax, rcx
	setge al
	movzx rax, al
	cmp rax, 0
	je .if_end_332
	mov rax, 0
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_332:
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_Lexer_method_make_token:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_loc
	add rsp, 16
	mov rax, rbp
	sub rax, -40
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_advance
	add rsp, 16
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_get_escaped_char:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	cmp rax, 110
	je .case_333_0
	cmp rax, 114
	je .case_333_1
	cmp rax, 116
	je .case_333_2
	cmp rax, 34
	je .case_333_3
	cmp rax, 92
	je .case_333_4
	cmp rax, 39
	je .case_333_5
	cmp rax, 48
	je .case_333_6
	jmp .default_333
.case_333_0:
	mov rax, 10
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_333_1:
	mov rax, 13
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_333_2:
	mov rax, 9
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_333_3:
	mov rax, 34
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_333_4:
	mov rax, 92
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_333_5:
	mov rax, 39
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_333_6:
	mov rax, 0
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.default_333:
	mov rax, qword gs_374
	push rax
	call func_puts
	add rsp, 8
	mov rax, qword gs_375
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	push rax
	call func_putc
	add rsp, 8
	mov rax, qword gs_376
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	movsx rax, byte [rax]
	push rax
	call func_putu
	add rsp, 8
	mov rax, qword gs_377
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 1
	push rax
	call func_exit
	add rsp, 8
	.break_333:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_Lexer_method_next:
	push rbp
	mov rbp, rsp
	sub rsp, 72
.loop_start_334:
.loop_continue_334:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_334
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	mov [rbp-8], al
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	cmp rax, 32
	je .case_335_0
	cmp rax, 9
	je .case_335_1
	cmp rax, 13
	je .case_335_2
	cmp rax, 10
	je .case_335_3
	cmp rax, 40
	je .case_335_4
	cmp rax, 41
	je .case_335_5
	cmp rax, 123
	je .case_335_6
	cmp rax, 125
	je .case_335_7
	cmp rax, 91
	je .case_335_8
	cmp rax, 93
	je .case_335_9
	cmp rax, 59
	je .case_335_10
	cmp rax, 126
	je .case_335_11
	cmp rax, 63
	je .case_335_12
	cmp rax, 94
	je .case_335_13
	cmp rax, 46
	je .case_335_14
	cmp rax, 44
	je .case_335_15
	cmp rax, 42
	je .case_335_16
	cmp rax, 37
	je .case_335_17
	cmp rax, 47
	je .case_335_18
	cmp rax, 58
	je .case_335_19
	cmp rax, 38
	je .case_335_20
	cmp rax, 33
	je .case_335_21
	cmp rax, 60
	je .case_335_22
	cmp rax, 62
	je .case_335_23
	cmp rax, 61
	je .case_335_24
	cmp rax, 124
	je .case_335_25
	cmp rax, 43
	je .case_335_26
	cmp rax, 45
	je .case_335_27
	jmp .default_335
.case_335_0:
.case_335_1:
.case_335_2:
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_advance
	add rsp, 16
	jmp .break_335
.case_335_3:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 32
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 32
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 40
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .break_335
.case_335_4:
	mov rax, 1
	push rax
	mov rax, 30
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_5:
	mov rax, 1
	push rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_6:
	mov rax, 1
	push rax
	mov rax, 28
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_7:
	mov rax, 1
	push rax
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_8:
	mov rax, 1
	push rax
	mov rax, 29
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_9:
	mov rax, 1
	push rax
	mov rax, 7
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_10:
	mov rax, 1
	push rax
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_11:
	mov rax, 1
	push rax
	mov rax, 42
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_12:
	mov rax, 1
	push rax
	mov rax, 36
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_13:
	mov rax, 1
	push rax
	mov rax, 4
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_14:
	mov rax, 1
	push rax
	mov rax, 12
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_15:
	mov rax, 1
	push rax
	mov rax, 11
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_16:
	mov rax, 1
	push rax
	mov rax, 40
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_17:
	mov rax, 1
	push rax
	mov rax, 32
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_18:
	mov rax, 47
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek_char
	add rsp, 16
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_336
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
.loop_start_337:
.loop_continue_337:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	jne .and_right_338
	mov rax, 0
	jmp .and_end_338
.and_right_338:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_338:
	cmp rax, 0
	je .loop_end_337
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_337
.break_337:
.loop_end_337:
	jmp .break_335
.if_end_336:
	mov rax, 1
	push rax
	mov rax, 39
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_19:
	mov rax, 58
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek_char
	add rsp, 16
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_339
	mov rax, 2
	push rax
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_339:
	mov rax, 1
	push rax
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_20:
	mov rax, 38
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek_char
	add rsp, 16
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_340
	mov rax, 2
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_340:
	mov rax, 1
	push rax
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_21:
	mov rax, 61
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek_char
	add rsp, 16
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_341
	mov rax, 2
	push rax
	mov rax, 27
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_341:
	mov rax, 1
	push rax
	mov rax, 15
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_22:
	mov rax, 60
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek_char
	add rsp, 16
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_342
	mov rax, 2
	push rax
	mov rax, 22
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_342:
	mov rax, 61
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek_char
	add rsp, 16
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_343
	mov rax, 2
	push rax
	mov rax, 21
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_343:
	mov rax, 1
	push rax
	mov rax, 23
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_23:
	mov rax, 62
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek_char
	add rsp, 16
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_344
	mov rax, 2
	push rax
	mov rax, 37
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_344:
	mov rax, 61
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek_char
	add rsp, 16
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_345
	mov rax, 2
	push rax
	mov rax, 17
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_345:
	mov rax, 1
	push rax
	mov rax, 18
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_24:
	mov rax, 61
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek_char
	add rsp, 16
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_346
	mov rax, 2
	push rax
	mov rax, 14
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_346:
	mov rax, 1
	push rax
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_25:
	mov rax, 124
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek_char
	add rsp, 16
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_347
	mov rax, 2
	push rax
	mov rax, 31
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_347:
	mov rax, 1
	push rax
	mov rax, 3
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_26:
	mov rax, 43
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek_char
	add rsp, 16
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_348
	mov rax, 2
	push rax
	mov rax, 35
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_348:
	mov rax, 61
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek_char
	add rsp, 16
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_349
	mov rax, 2
	push rax
	mov rax, 34
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_349:
	mov rax, 1
	push rax
	mov rax, 33
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_335_27:
	mov rax, 45
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek_char
	add rsp, 16
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_350
	mov rax, 2
	push rax
	mov rax, 26
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_350:
	mov rax, 61
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek_char
	add rsp, 16
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_351
	mov rax, 2
	push rax
	mov rax, 25
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_351:
	mov rax, 1
	push rax
	mov rax, 24
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.default_335:
	mov rax, qword gs_378
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_starts_with
	add rsp, 16
	cmp rax, 0
	je .if_end_352
	mov rax, 128
	push rax
	mov rax, 1
	pop rcx
	imul rax, rcx
	push rax
	call func_malloc
	add rsp, 8
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_strcpy
	add rsp, 16
	mov rax, qword gs_379
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_strcat
	add rsp, 16
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 32
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	call func_putu_buffer
	add rsp, 16
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_strcat
	add rsp, 16
	mov rax, qword gs_380
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_strcat
	add rsp, 16
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 40
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	call func_putu_buffer
	add rsp, 16
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_strcat
	add rsp, 16
	mov rax, rbp
	sub rax, 72
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_loc
	add rsp, 16
	mov rax, 4
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_advance
	add rsp, 16
	mov rax, rbp
	sub rax, 72
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_token_from_string
	add rsp, 24
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_352:
	mov rax, 1
	push rax
	mov rax, 44
	pop rcx
	add rax, rcx
	mov [rbp-16], rax
.loop_start_353:
	mov rax, 72
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_353
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_keyword_to_string
	add rsp, 8
	mov [rbp-24], rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_starts_with
	add rsp, 16
	cmp rax, 0
	je .if_end_354
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	call func_strlen
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_354:
.loop_continue_353:
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_353
.break_353:
.loop_end_353:
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	push rax
	call func_is_digit
	add rsp, 8
	cmp rax, 0
	je .if_end_355
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	mov [rbp-16], rax
	mov rax, 0
	mov [rbp-24], rax
	mov rax, 0
	mov [rbp-32], rax
	mov rax, 48
	push rax
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	jne .and_right_357
	mov rax, 0
	jmp .and_end_357
.and_right_357:
	mov rax, 120
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek_char
	add rsp, 16
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_357:
	cmp rax, 0
	je .if_else_356
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	mov [rcx], al
.loop_start_358:
.loop_continue_358:
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	push rax
	call func_is_hex
	add rsp, 8
	cmp rax, 0
	je .loop_end_358
	mov rax, 97
	push rax
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setge al
	movzx rax, al
	cmp rax, 0
	jne .and_right_360
	mov rax, 0
	jmp .and_end_360
.and_right_360:
	mov rax, 102
	push rax
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setle al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_360:
	cmp rax, 0
	je .if_else_359
	mov rax, rbp
	sub rax, 24
	push rax
	mov rax, 10
	push rax
	mov rax, 97
	push rax
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	pop rcx
	sub rax, rcx
	pop rcx
	add rax, rcx
	push rax
	mov rax, 16
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .if_end_359
.if_else_359:
	mov rax, 65
	push rax
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setge al
	movzx rax, al
	cmp rax, 0
	jne .and_right_362
	mov rax, 0
	jmp .and_end_362
.and_right_362:
	mov rax, 70
	push rax
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setle al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_362:
	cmp rax, 0
	je .if_else_361
	mov rax, rbp
	sub rax, 24
	push rax
	mov rax, 10
	push rax
	mov rax, 65
	push rax
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	pop rcx
	sub rax, rcx
	pop rcx
	add rax, rcx
	push rax
	mov rax, 16
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .if_end_361
.if_else_361:
	mov rax, rbp
	sub rax, 24
	push rax
	mov rax, 48
	push rax
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	pop rcx
	sub rax, rcx
	push rax
	mov rax, 16
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
.if_end_361:
.if_end_359:
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	mov [rcx], al
	jmp .loop_start_358
.break_358:
.loop_end_358:
	jmp .if_end_356
.if_else_356:
	mov rax, 48
	push rax
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	jne .and_right_364
	mov rax, 0
	jmp .and_end_364
.and_right_364:
	mov rax, 98
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek_char
	add rsp, 16
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_364:
	cmp rax, 0
	je .if_else_363
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	mov [rcx], al
.loop_start_365:
.loop_continue_365:
	mov rax, 48
	push rax
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_366
	mov rax, 1
	jmp .or_end_366
.or_right_366:
	mov rax, 49
	push rax
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_366:
	cmp rax, 0
	je .loop_end_365
	mov rax, rbp
	sub rax, 24
	push rax
	mov rax, 48
	push rax
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	pop rcx
	sub rax, rcx
	push rax
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	mov [rcx], al
	jmp .loop_start_365
.break_365:
.loop_end_365:
	jmp .if_end_363
.if_else_363:
.loop_start_367:
.loop_continue_367:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	jne .and_right_368
	mov rax, 0
	jmp .and_end_368
.and_right_368:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	push rax
	call func_is_digit
	add rsp, 8
	cmp rax, 0
	setne al
.and_end_368:
	cmp rax, 0
	je .loop_end_367
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_367
.break_367:
.loop_end_367:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	jne .and_right_370
	mov rax, 0
	jmp .and_end_370
.and_right_370:
	mov rax, 46
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_370:
	cmp rax, 0
	je .if_else_369
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
.loop_start_371:
.loop_continue_371:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	jne .and_right_372
	mov rax, 0
	jmp .and_end_372
.and_right_372:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	push rax
	call func_is_digit
	add rsp, 8
	cmp rax, 0
	setne al
.and_end_372:
	cmp rax, 0
	je .loop_end_371
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_371
.break_371:
.loop_end_371:
	mov rax, rbp
	sub rax, 32
	push rax
	mov rax, 1
	pop rcx
	mov [rcx], rax
	jmp .if_end_369
.if_else_369:
	mov rax, rbp
	sub rax, 24
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	call func_atoi
	add rsp, 8
	pop rcx
	mov [rcx], rax
.if_end_369:
.if_end_363:
.if_end_356:
	mov rax, rbp
	sub rax, 56
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_loc
	add rsp, 16
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_373
	mov rax, rbp
	sub rax, 56
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_token_from_int
	add rsp, 24
	jmp .if_end_373
.if_else_373:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	mov [rbp-64], rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	call func_malloc
	add rsp, 8
	mov [rbp-72], rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	push rax
	call func_memcpy
	add rsp, 24
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], al
	mov rax, rbp
	sub rax, 56
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_token_from_string
	add rsp, 24
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, 16
	pop rcx
	mov [rcx], rax
.if_end_373:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_advance
	add rsp, 16
	xor rax, rax
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_355:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	push rax
	call func_is_alpha
	add rsp, 8
	cmp rax, 0
	je .if_end_374
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	mov [rbp-16], rax
.loop_start_375:
.loop_continue_375:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	jne .and_right_376
	mov rax, 0
	jmp .and_end_376
.and_right_376:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	push rax
	call func_is_alnum
	add rsp, 8
	cmp rax, 0
	setne al
.and_end_376:
	cmp rax, 0
	je .loop_end_375
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_375
.break_375:
.loop_end_375:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	mov [rbp-24], rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	call func_malloc
	add rsp, 8
	mov [rbp-32], rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	push rax
	call func_memcpy
	add rsp, 24
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], al
	mov rax, rbp
	sub rax, 56
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_loc
	add rsp, 16
	mov rax, rbp
	sub rax, 56
	push rax
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_token_from_identifier
	add rsp, 24
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_advance
	add rsp, 16
	xor rax, rax
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_374:
	mov rax, 34
	push rax
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_377
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov [rbp-16], rax
.loop_start_378:
.loop_continue_378:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_378
	mov rax, 34
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	jne .and_right_380
	mov rax, 0
	jmp .and_end_380
.and_right_380:
	mov rax, 92
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_380:
	cmp rax, 0
	je .if_end_379
	jmp .break_378
.if_end_379:
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_378
.break_378:
.loop_end_378:
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_loc
	add rsp, 16
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_381
	mov rax, qword gs_381
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, qword gs_382
	push rax
	call func_die_loc
	add rsp, 24
.if_end_381:
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	pop rcx
	sub rax, rcx
	mov [rbp-48], rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	call func_malloc
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call func_memcpy
	add rsp, 24
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], al
	mov rax, 0
	mov [rbp-64], rax
	mov rax, 0
	mov [rbp-72], rax
.loop_start_382:
.loop_continue_382:
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_382
	mov rax, 92
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_383
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, 64
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	push rax
	call func_get_escaped_char
	add rsp, 8
	pop rcx
	mov [rcx], al
	jmp .if_end_383
.if_else_383:
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	mov [rcx], al
.if_end_383:
	mov rax, rbp
	sub rax, 64
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 72
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_382
.break_382:
.loop_end_382:
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_token_from_string
	add rsp, 24
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_advance
	add rsp, 16
	xor rax, rax
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_377:
	mov rax, 39
	push rax
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_384
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	mov [rcx], al
	mov rax, 92
	push rax
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_385
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	push rax
	call func_get_escaped_char
	add rsp, 8
	pop rcx
	mov [rcx], al
.if_end_385:
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_loc
	add rsp, 16
	mov rax, 39
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	add rax, rcx
	movsx rax, byte [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_386
	mov rax, qword gs_383
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, qword gs_384
	push rax
	call func_die_loc
	add rsp, 24
.if_end_386:
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_token_from_char
	add rsp, 24
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_advance
	add rsp, 16
	xor rax, rax
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_384:
	mov rax, qword gs_385
	push rax
	call func_puts
	add rsp, 8
	mov rax, qword gs_386
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	movsx rax, byte [rax]
	push rax
	call func_putc
	add rsp, 8
	mov rax, qword gs_387
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 1
	push rax
	call func_exit
	add rsp, 8
	.break_335:
	jmp .loop_start_334
.break_334:
.loop_end_334:
	mov rax, 0
	push rax
	mov rax, 13
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_make_token
	add rsp, 32
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_Lexer_method_next_assert:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_387
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	call func_location_print
	add rsp, 8
	mov rax, qword gs_388
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	call func_token_type_to_string
	add rsp, 8
	push rax
	call func_puts
	add rsp, 8
	mov rax, qword gs_389
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_token_type_to_string
	add rsp, 8
	push rax
	call func_puts
	add rsp, 8
	mov rax, 10
	push rax
	call func_putc
	add rsp, 8
	mov rax, 1
	push rax
	call func_exit
	add rsp, 8
.if_end_387:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
_Lexer_method_peek:
	push rbp
	mov rbp, rsp
	sub rsp, 24
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 40
	mov rax, [rax]
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 32
	mov rax, [rax]
	mov [rbp-24], rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 40
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 32
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_block_stack_push:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741944
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_block_stack_pop:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, qword gvars
	add rax, 1073741944
	mov rax, [rax]
	push rax
	call _Vector_method_pop
	add rsp, 8
	mov [rbp-8], rax
	mov rax, qword gvars
	add rax, 1073741952
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741952
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	pop rcx
	mov [rcx], rax
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_constant_push:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 26
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_node_from_int_literal
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741984
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_find_local_variable:
	push rbp
	mov rbp, rsp
	sub rsp, 32
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741936
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_388
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_388:
	mov rax, 1
	push rax
	mov rax, qword gvars
	add rax, 1073741944
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	mov [rbp-8], rax
.loop_start_389:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setge al
	movzx rax, al
	cmp rax, 0
	je .loop_end_389
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741944
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	mov [rbp-16], rax
	mov rax, 0
	mov [rbp-24], rax
.loop_start_390:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_390
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	mov [rbp-32], rax
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_end_391
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_391:
.loop_continue_390:
	mov rax, rbp
	sub rax, 24
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_390
.break_390:
.loop_end_390:
.loop_continue_389:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_389
.break_389:
.loop_end_389:
	mov rax, qword gvars
	add rax, 1073741936
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, 0
	mov [rbp-16], rax
.loop_start_392:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_392
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	mov [rbp-24], rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_end_393
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_393:
.loop_continue_392:
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_392
.break_392:
.loop_end_392:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_find_compound_type:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, 1
	push rax
	mov rax, qword gvars
	add rax, 1073741992
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	mov [rbp-8], rax
.loop_start_394:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setge al
	movzx rax, al
	cmp rax, 0
	je .loop_end_394
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741992
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_end_395
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_395:
.loop_continue_394:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_394
.break_394:
.loop_end_394:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_find_global_variable:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, 0
	mov [rbp-8], rax
.loop_start_396:
	mov rax, qword gvars
	add rax, 1073741960
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_396
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741960
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_end_397
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_397:
.loop_continue_396:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_396
.break_396:
.loop_end_396:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_find_function_definition:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, 0
	mov [rbp-8], rax
.loop_start_398:
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_398
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_end_399
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_399:
.loop_continue_398:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_398
.break_398:
.loop_end_398:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_find_constant:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, 0
	mov [rbp-8], rax
.loop_start_400:
	mov rax, qword gvars
	add rax, 1073741984
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_400
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741984
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_end_401
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_401:
.loop_continue_400:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_400
.break_400:
.loop_end_400:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_identifier_exists:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_find_local_variable
	add rsp, 8
	cmp rax, 0
	je .if_end_402
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_402:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_find_global_variable
	add rsp, 8
	cmp rax, 0
	je .if_end_403
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_403:
	mov rax, qword gvars
	add rax, 1073741928
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_find_function_definition
	add rsp, 16
	cmp rax, 0
	je .if_end_404
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_404:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_find_builtin_function
	add rsp, 8
	cmp rax, 0
	je .if_end_405
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_405:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_find_compound_type
	add rsp, 8
	cmp rax, 0
	je .if_end_406
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_406:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_find_constant
	add rsp, 8
	cmp rax, 0
	je .if_end_407
	mov rax, 1
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_407:
	mov rax, 0
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_eval_constexp:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, 25
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_408
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	cmp rax, 0
	je .case_409_0
	cmp rax, 1
	je .case_409_1
	jmp .default_409
.case_409_0:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_409_1:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	movsx rax, byte [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.default_409:
	.break_409:
	mov rax, qword gs_390
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, qword gs_391
	push rax
	call func_die_loc
	add rsp, 24
	jmp .if_end_408
.if_else_408:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_is_binary_op
	add rsp, 8
	cmp rax, 0
	je .if_end_410
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_eval_constexp
	add rsp, 16
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_eval_constexp
	add rsp, 16
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	cmp rax, 5
	je .case_411_0
	cmp rax, 6
	je .case_411_1
	cmp rax, 15
	je .case_411_2
	cmp rax, 13
	je .case_411_3
	cmp rax, 16
	je .case_411_4
	cmp rax, 7
	je .case_411_5
	cmp rax, 8
	je .case_411_6
	cmp rax, 9
	je .case_411_7
	cmp rax, 7
	je .case_411_8
	cmp rax, 7
	je .case_411_9
	jmp .default_411
.case_411_0:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_411_1:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_411_2:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	or rax, rcx
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_411_3:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	and rax, rcx
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_411_4:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	xor rax, rcx
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_411_5:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_411_6:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cqo
	idiv rcx
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_411_7:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cqo
	idiv rcx
	mov rax, rdx
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_411_8:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.case_411_9:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.default_411:
	.break_411:
	mov rax, qword gs_392
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, qword gs_393
	push rax
	call func_die_loc
	add rsp, 24
.if_end_410:
.if_end_408:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_412
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	call func_eval_constexp
	add rsp, 16
	neg rax
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_412:
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_413
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	call func_eval_constexp
	add rsp, 16
	not rax
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_413:
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_414
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	call func_eval_constexp
	add rsp, 16
	cmp rax, 0
	sete al
	movzx rax, al
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_414:
	mov rax, qword gs_394
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, qword gs_395
	push rax
	call func_die_loc
	add rsp, 24
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_constant_expression:
	push rbp
	mov rbp, rsp
	sub rsp, 48
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_expression
	add rsp, 8
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	call func_eval_constexp
	add rsp, 16
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_constant_declaration:
	push rbp
	mov rbp, rsp
	sub rsp, 48
	mov rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	push rax
	call func_identifier_exists
	add rsp, 8
	cmp rax, 0
	je .if_end_415
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gs_396
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_397
	push rax
	call func_die_loc2
	add rsp, 32
.if_end_415:
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_416
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, 57
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_417
	mov rax, qword gs_398
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_399
	push rax
	call func_die_loc
	add rsp, 24
.if_end_417:
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.if_end_416:
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_constant_expression
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_literal:
	push rbp
	mov rbp, rsp
	sub rsp, 48
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, 25
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	cmp rax, 20
	je .case_418_0
	cmp rax, 41
	je .case_418_1
	cmp rax, 5
	je .case_418_2
	cmp rax, 16
	je .case_418_3
	jmp .default_418
.case_418_0:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 0
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .break_418
.case_418_1:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 1
	push rax
	call func_type_new_ptr
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .break_418
.case_418_2:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	movsx rax, byte [rax]
	pop rcx
	mov [rcx], al
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 1
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .break_418
.case_418_3:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 6
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .break_418
.default_418:
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	push rax
	call func_token_type_to_string
	add rsp, 8
	push rax
	mov rax, qword gs_400
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_401
	push rax
	call func_die_loc2
	add rsp, 32
	.break_418:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_type:
	push rbp
	mov rbp, rsp
	sub rsp, 64
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	cmp rax, 57
	je .case_419_0
	cmp rax, 58
	je .case_419_1
	cmp rax, 59
	je .case_419_2
	cmp rax, 60
	je .case_419_3
	cmp rax, 61
	je .case_419_4
	cmp rax, 53
	je .case_419_5
	cmp rax, 47
	je .case_419_6
	cmp rax, 69
	je .case_419_7
	jmp .default_419
.case_419_0:
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 0
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .break_419
.case_419_1:
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 2
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .break_419
.case_419_2:
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 3
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .break_419
.case_419_3:
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 4
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .break_419
.case_419_4:
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 5
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .break_419
.case_419_5:
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 6
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .break_419
.case_419_6:
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 1
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .break_419
.case_419_7:
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 7
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .break_419
.default_419:
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_420
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	push rax
	call func_token_type_to_string
	add rsp, 8
	push rax
	mov rax, qword gs_402
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_403
	push rax
	call func_die_loc2
	add rsp, 32
.if_end_420:
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	push rax
	call func_find_compound_type
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_421
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gs_404
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_405
	push rax
	call func_die_loc2
	add rsp, 32
.if_end_421:
	.break_419:
	mov rax, 1
	mov [rbp-56], rax
.loop_start_422:
.loop_continue_422:
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	cmp rax, 0
	je .loop_end_422
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 40
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_423
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, 10
	push rax
	call func_type_new
	add rsp, 8
	mov [rbp-64], rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .if_end_423
.if_else_423:
	mov rax, 29
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_424
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, 11
	push rax
	call func_type_new
	add rsp, 8
	mov [rbp-64], rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_constant_expression
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, 7
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .if_end_424
.if_else_424:
	mov rax, rbp
	sub rax, 56
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], rax
.if_end_424:
.if_end_423:
	jmp .loop_start_422
.break_422:
.loop_end_422:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_function_call_args:
	push rbp
	mov rbp, rsp
	sub rsp, 88
	mov rax, 28
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	call func_vector_new
	add rsp, 0
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, 30
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	cmp rax, 0
	je .if_end_425
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
.if_end_425:
.loop_start_426:
.loop_continue_426:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .loop_end_426
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_expression
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 11
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_427
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.if_end_427:
	jmp .loop_start_426
.break_426:
.loop_end_426:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_428
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gs_406
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_407
	push rax
	call func_die_loc2
	add rsp, 32
.if_end_428:
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	mov [rbp-56], rax
	mov rax, 0
	mov [rbp-64], rax
.loop_start_429:
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_429
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	mov [rbp-72], rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	mov [rbp-80], rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 80
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_convert_type
	add rsp, 16
	mov [rbp-88], rax
	mov rax, rbp
	sub rax, 88
	mov rax, [rax]
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_430
	mov rax, rbp
	sub rax, 80
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gs_408
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_409
	push rax
	call func_die_loc2
	add rsp, 32
.if_end_430:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, 88
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
.loop_continue_429:
	mov rax, rbp
	sub rax, 64
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_429
.break_429:
.loop_end_429:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_identifier:
	push rbp
	mov rbp, rsp
	sub rsp, 80
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	call func_find_local_variable
	add rsp, 8
	mov [rbp-64], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_431
	mov rax, rbp
	sub rax, 56
	push rax
	mov rax, 37
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call func_decay_array_to_pointer
	add rsp, 16
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_431:
	mov rax, rbp
	sub rax, 64
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	call func_find_global_variable
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_432
	mov rax, rbp
	sub rax, 56
	push rax
	mov rax, 38
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call func_decay_array_to_pointer
	add rsp, 16
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_432:
	mov rax, qword gvars
	add rax, 1073741928
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	call func_find_function_definition
	add rsp, 16
	mov [rbp-72], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_433
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_function_call_args
	add rsp, 24
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_433:
	mov rax, rbp
	sub rax, 72
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	call func_find_builtin_function
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_434
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_function_call_args
	add rsp, 24
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_434:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	call func_find_constant
	add rsp, 8
	mov [rbp-80], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 80
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_435
	mov rax, rbp
	sub rax, 80
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_435:
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gs_410
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_411
	push rax
	call func_die_loc2
	add rsp, 32
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_factor:
	push rbp
	mov rbp, rsp
	sub rsp, 96
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 24
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_436
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 0
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_factor
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	call func_type_check_unary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	jmp .if_end_436
.if_else_436:
	mov rax, 42
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_437
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 2
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_factor
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	call func_type_check_unary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	jmp .if_end_437
.if_else_437:
	mov rax, 35
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_438
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 23
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_factor
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_is_lvalue
	add rsp, 8
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_439
	mov rax, qword gs_412
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_413
	push rax
	call func_die_loc
	add rsp, 24
.if_end_439:
	mov rax, 5
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, 1
	push rax
	call func_node_from_int_literal
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call func_type_check_binary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .if_end_438
.if_else_438:
	mov rax, 26
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_440
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 23
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_factor
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_is_lvalue
	add rsp, 8
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_441
	mov rax, qword gs_414
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_415
	push rax
	call func_die_loc
	add rsp, 24
.if_end_441:
	mov rax, 6
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, 1
	push rax
	call func_node_from_int_literal
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call func_type_check_binary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .if_end_440
.if_else_440:
	mov rax, 65
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_442
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, 30
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_type
	add rsp, 8
	mov [rbp-56], rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	push rax
	call func_node_from_int_literal
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_442
.if_else_442:
	mov rax, 15
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_443
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 1
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_factor
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	call func_type_check_unary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	jmp .if_end_443
.if_else_443:
	mov rax, 30
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_444
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_expression
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	jmp .if_end_444
.if_else_444:
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	push rax
	call func_is_literal_token
	add rsp, 8
	cmp rax, 0
	je .if_else_445
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_literal
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_445
.if_else_445:
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_446
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_identifier
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_446
.if_else_446:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_447
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 3
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_factor
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_is_lvalue
	add rsp, 8
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_448
	mov rax, qword gs_416
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_417
	push rax
	call func_die_loc
	add rsp, 24
.if_end_448:
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	call func_type_check_unary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	jmp .if_end_447
.if_else_447:
	mov rax, 40
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_449
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_factor
	add rsp, 8
	mov [rbp-56], rax
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_450
	mov rax, qword gs_418
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_419
	push rax
	call func_die_loc
	add rsp, 24
.if_end_450:
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 4
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	call func_type_check_unary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	jmp .if_end_449
.if_else_449:
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	push rax
	call func_token_type_to_string
	add rsp, 8
	push rax
	mov rax, qword gs_420
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_421
	push rax
	call func_die_loc2
	add rsp, 32
.if_end_449:
.if_end_447:
.if_end_446:
.if_end_445:
.if_end_444:
.if_end_443:
.if_end_442:
.if_end_440:
.if_end_438:
.if_end_437:
.if_end_436:
	mov rax, 1
	mov [rbp-56], rax
.loop_start_451:
.loop_continue_451:
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	cmp rax, 0
	je .loop_end_451
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 29
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_452
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_453
	mov rax, qword gs_422
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_423
	push rax
	call func_die_loc
	add rsp, 24
.if_end_453:
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_expression
	add rsp, 8
	mov [rbp-64], rax
	mov rax, 5
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-72], rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 72
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	push rax
	call func_type_check_binary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 4
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	call func_type_check_unary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	mov rax, 7
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	jmp .if_end_452
.if_else_452:
	mov rax, 12
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_454
	mov rax, 12
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_is_struct_or_structptr
	add rsp, 8
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_455
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_create_type_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_424
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_425
	push rax
	call func_die_loc
	add rsp, 24
.if_end_455:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	mov [rbp-64], rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	cmp rax, 0
	je .cond_else_456
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	jmp .cond_end_456
.cond_else_456:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
.cond_end_456:
	mov [rbp-72], rax
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	mov [rbp-80], rax
	mov rax, rbp
	sub rax, 80
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	push rax
	call func_compound_find_field
	add rsp, 16
	mov [rbp-88], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 88
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_457
	mov rax, qword gs_426
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	push rax
	call func_create_type_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_427
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, 80
	mov rax, [rax]
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_428
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_429
	push rax
	call func_die_loc
	add rsp, 24
.if_end_457:
	mov rax, 24
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-96], rax
	mov rax, rbp
	sub rax, 96
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 88
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 96
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 96
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 88
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 96
	mov rax, [rax]
	add rax, 16
	add rax, 16
	push rax
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 96
	mov rax, [rax]
	push rax
	call func_decay_array_to_pointer
	add rsp, 16
	pop rcx
	mov [rcx], rax
	jmp .if_end_454
.if_else_454:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_458
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_is_struct_or_structptr
	add rsp, 8
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_459
	mov rax, qword gs_430
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_431
	push rax
	call func_die_loc
	add rsp, 24
.if_end_459:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_460
	mov rax, rbp
	sub rax, 64
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 72
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .if_end_460
.if_else_460:
	mov rax, rbp
	sub rax, 64
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 72
	push rax
	mov rax, 3
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 72
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	push rax
	call func_type_check_unary
	add rsp, 16
	pop rcx
	mov [rcx], rax
.if_end_460:
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	mov [rbp-80], rax
	mov rax, rbp
	sub rax, 80
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	push rax
	call func_compound_find_method
	add rsp, 16
	mov [rbp-88], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 88
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_461
	mov rax, qword gs_432
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_433
	push rax
	call func_die_loc
	add rsp, 24
.if_end_461:
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 88
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_function_call_args
	add rsp, 24
	pop rcx
	mov [rcx], rax
	jmp .if_end_458
.if_else_458:
	mov rax, rbp
	sub rax, 56
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], rax
.if_end_458:
.if_end_454:
.if_end_452:
	jmp .loop_start_451
.break_451:
.loop_end_451:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_term:
	push rbp
	mov rbp, rsp
	sub rsp, 64
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_factor
	add rsp, 8
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.loop_start_462:
.loop_continue_462:
	mov rax, 40
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_464
	mov rax, 1
	jmp .or_end_464
.or_right_464:
	mov rax, 39
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_464:
	cmp rax, 0
	je .or_right_463
	mov rax, 1
	jmp .or_end_463
.or_right_463:
	mov rax, 32
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_463:
	cmp rax, 0
	je .loop_end_462
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	push rax
	call func_binary_token_to_op
	add rsp, 8
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_factor
	add rsp, 8
	mov [rbp-64], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call func_type_check_binary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	jmp .loop_start_462
.break_462:
.loop_end_462:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_additive:
	push rbp
	mov rbp, rsp
	sub rsp, 64
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_term
	add rsp, 8
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.loop_start_465:
.loop_continue_465:
	mov rax, 33
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_468
	mov rax, 1
	jmp .or_end_468
.or_right_468:
	mov rax, 24
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_468:
	cmp rax, 0
	je .or_right_467
	mov rax, 1
	jmp .or_end_467
.or_right_467:
	mov rax, 22
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_467:
	cmp rax, 0
	je .or_right_466
	mov rax, 1
	jmp .or_end_466
.or_right_466:
	mov rax, 37
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_466:
	cmp rax, 0
	je .loop_end_465
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	push rax
	call func_binary_token_to_op
	add rsp, 8
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_term
	add rsp, 8
	mov [rbp-64], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call func_type_check_binary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	jmp .loop_start_465
.break_465:
.loop_end_465:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_relational:
	push rbp
	mov rbp, rsp
	sub rsp, 64
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_additive
	add rsp, 8
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.loop_start_469:
.loop_continue_469:
	mov rax, 23
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_472
	mov rax, 1
	jmp .or_end_472
.or_right_472:
	mov rax, 21
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_472:
	cmp rax, 0
	je .or_right_471
	mov rax, 1
	jmp .or_end_471
.or_right_471:
	mov rax, 18
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_471:
	cmp rax, 0
	je .or_right_470
	mov rax, 1
	jmp .or_end_470
.or_right_470:
	mov rax, 17
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_470:
	cmp rax, 0
	je .loop_end_469
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	push rax
	call func_binary_token_to_op
	add rsp, 8
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_additive
	add rsp, 8
	mov [rbp-64], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call func_type_check_binary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	jmp .loop_start_469
.break_469:
.loop_end_469:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_equality:
	push rbp
	mov rbp, rsp
	sub rsp, 64
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_relational
	add rsp, 8
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.loop_start_473:
.loop_continue_473:
	mov rax, 14
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_474
	mov rax, 1
	jmp .or_end_474
.or_right_474:
	mov rax, 27
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_474:
	cmp rax, 0
	je .loop_end_473
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	push rax
	call func_binary_token_to_op
	add rsp, 8
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_relational
	add rsp, 8
	mov [rbp-64], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call func_type_check_binary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	jmp .loop_start_473
.break_473:
.loop_end_473:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_and:
	push rbp
	mov rbp, rsp
	sub rsp, 64
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_equality
	add rsp, 8
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.loop_start_475:
.loop_continue_475:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .loop_end_475
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	push rax
	call func_binary_token_to_op
	add rsp, 8
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_equality
	add rsp, 8
	mov [rbp-64], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call func_type_check_binary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	jmp .loop_start_475
.break_475:
.loop_end_475:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_exclusive_or:
	push rbp
	mov rbp, rsp
	sub rsp, 64
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_and
	add rsp, 8
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.loop_start_476:
.loop_continue_476:
	mov rax, 4
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .loop_end_476
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	push rax
	call func_binary_token_to_op
	add rsp, 8
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_and
	add rsp, 8
	mov [rbp-64], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call func_type_check_binary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	jmp .loop_start_476
.break_476:
.loop_end_476:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_inclusive_or:
	push rbp
	mov rbp, rsp
	sub rsp, 64
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_exclusive_or
	add rsp, 8
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.loop_start_477:
.loop_continue_477:
	mov rax, 3
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .loop_end_477
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	push rax
	call func_binary_token_to_op
	add rsp, 8
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_exclusive_or
	add rsp, 8
	mov [rbp-64], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call func_type_check_binary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	jmp .loop_start_477
.break_477:
.loop_end_477:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_logical_and:
	push rbp
	mov rbp, rsp
	sub rsp, 64
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_inclusive_or
	add rsp, 8
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.loop_start_478:
.loop_continue_478:
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .loop_end_478
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	push rax
	call func_binary_token_to_op
	add rsp, 8
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_inclusive_or
	add rsp, 8
	mov [rbp-64], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call func_type_check_binary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	jmp .loop_start_478
.break_478:
.loop_end_478:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_logical_or:
	push rbp
	mov rbp, rsp
	sub rsp, 64
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_logical_and
	add rsp, 8
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.loop_start_479:
.loop_continue_479:
	mov rax, 31
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .loop_end_479
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	push rax
	call func_binary_token_to_op
	add rsp, 8
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_logical_and
	add rsp, 8
	mov [rbp-64], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call func_type_check_binary
	add rsp, 16
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	jmp .loop_start_479
.break_479:
.loop_end_479:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_conditional_exp:
	push rbp
	mov rbp, rsp
	sub rsp, 72
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_logical_or
	add rsp, 8
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 36
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_480
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_expression
	add rsp, 8
	mov [rbp-56], rax
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_expression
	add rsp, 8
	mov [rbp-64], rax
	mov rax, 29
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-72], rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	add rax, 16
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_types_equal
	add rsp, 16
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_481
	mov rax, qword gs_434
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_435
	push rax
	call func_die_loc
	add rsp, 24
.if_end_481:
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
.if_end_480:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_expression:
	push rbp
	mov rbp, rsp
	sub rsp, 72
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_conditional_exp
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_is_lvalue
	add rsp, 8
	cmp rax, 0
	je .if_end_482
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_483
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, 23
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_expression
	add rsp, 8
	mov [rbp-64], rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_convert_type
	add rsp, 16
	mov [rbp-72], rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_484
	mov rax, qword gs_436
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_create_type_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_437
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_create_type_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_438
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 8
	push rax
	mov rax, qword gs_439
	push rax
	call func_die_loc
	add rsp, 24
.if_end_484:
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
.if_end_483:
.if_end_482:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_add_variable_to_current_block:
	push rbp
	mov rbp, rsp
	sub rsp, 24
	mov rax, qword gvars
	add rax, 1073741944
	mov rax, [rax]
	push rax
	call _Vector_method_top
	add rsp, 8
	mov [rbp-8], rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	push rax
	call func_align_up
	add rsp, 16
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741936
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	push rax
	mov rax, qword gs_440
	push rax
	call func_assert
	add rsp, 16
	mov rax, qword gvars
	add rax, 1073741952
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741952
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, qword gvars
	add rax, 1073741952
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 1073741952
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741936
	mov rax, [rax]
	add rax, 16
	add rax, 16
	mov rax, [rax]
	push rax
	call func_max
	add rsp, 16
	mov [rbp-24], rax
	mov rax, qword gvars
	add rax, 1073741936
	mov rax, [rax]
	add rax, 16
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_add_global_variable:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, qword gvars
	add rax, 1073741968
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	push rax
	call func_align_up
	add rsp, 16
	mov [rbp-8], rax
	mov rax, qword gvars
	add rax, 1073741968
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741968
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741960
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_var_declaration:
	push rbp
	mov rbp, rsp
	sub rsp, 80
	mov rax, 62
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	push rax
	call func_identifier_exists
	add rsp, 8
	cmp rax, 0
	je .if_end_485
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gs_441
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_442
	push rax
	call func_die_loc2
	add rsp, 32
.if_end_485:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741936
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	mov [rbp-48], rax
	mov rax, 36
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	mov [rbp-64], rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 0
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 1
	mov [rbp-72], rax
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_486
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 0
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_type
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 72
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.if_end_486:
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_487
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 24
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_expression
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	cmp rax, 0
	je .if_else_488
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 0
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 24
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .if_end_488
.if_else_488:
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 0
	add rax, 8
	mov rax, [rax]
	push rax
	call func_convert_type
	add rsp, 16
	mov [rbp-80], rax
	mov rax, rbp
	sub rax, 80
	mov rax, [rax]
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_489
	mov rax, qword gs_443
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 0
	add rax, 8
	mov rax, [rax]
	push rax
	call func_create_type_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_444
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 24
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_create_type_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 0
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gs_445
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_446
	push rax
	call func_die_loc2
	add rsp, 32
.if_end_489:
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 24
	push rax
	mov rax, rbp
	sub rax, 80
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
.if_end_488:
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 24
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .if_end_487
.if_else_487:
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	cmp rax, 0
	je .if_end_490
	mov rax, qword gs_447
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_448
	push rax
	call func_die_loc
	add rsp, 24
.if_end_490:
.if_end_487:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	cmp rax, 0
	je .if_else_491
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 0
	push rax
	call func_add_global_variable
	add rsp, 8
	jmp .if_end_491
.if_else_491:
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 0
	push rax
	call func_add_variable_to_current_block
	add rsp, 8
.if_end_491:
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_function_params:
	push rbp
	mov rbp, rsp
	sub rsp, 80
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_492
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 16
	add rax, 24
	push rax
	call func_vector_new
	add rsp, 0
	pop rcx
	mov [rcx], rax
.if_end_492:
.loop_start_493:
.loop_continue_493:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .loop_end_493
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	push rax
	call func_identifier_exists
	add rsp, 8
	cmp rax, 0
	je .if_end_494
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	mov rax, qword gs_449
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_450
	push rax
	call func_die_loc2
	add rsp, 32
.if_end_494:
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_type
	add rsp, 8
	mov [rbp-56], rax
	mov rax, 24
	push rax
	call func_malloc
	add rsp, 8
	mov [rbp-64], rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 11
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_495
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.if_end_495:
	jmp .loop_start_493
.break_493:
.loop_end_493:
	mov rax, 16
	neg rax
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	mov [rbp-56], rax
	mov rax, 0
	mov [rbp-64], rax
.loop_start_496:
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_496
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	mov [rbp-72], rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	push rax
	call func_align_up
	add rsp, 16
	mov [rbp-80], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, 80
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	pop rcx
	mov [rcx], rax
.loop_continue_496:
	mov rax, rbp
	sub rax, 64
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_496
.break_496:
.loop_end_496:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_switch_statement:
	push rbp
	mov rbp, rsp
	sub rsp, 64
	mov rax, 67
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, 34
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-48], rax
	mov rax, 30
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_expression
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_497
	mov rax, qword gs_451
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_452
	push rax
	call func_die_loc
	add rsp, 24
.if_end_497:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	call func_vector_new
	add rsp, 0
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742000
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, 28
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.loop_start_498:
.loop_continue_498:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .loop_end_498
	mov rax, 46
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_499
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, 35
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_constant_expression
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	call func_vector_new
	add rsp, 0
	pop rcx
	mov [rcx], rax
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.loop_start_500:
.loop_continue_500:
	mov rax, 46
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	jne .and_right_502
	mov rax, 0
	jmp .and_end_502
.and_right_502:
	mov rax, 49
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_502:
	cmp rax, 0
	jne .and_right_501
	mov rax, 0
	jmp .and_end_501
.and_right_501:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_501:
	cmp rax, 0
	je .loop_end_500
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_statement
	add rsp, 8
	mov [rbp-64], rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	jmp .loop_start_500
.break_500:
.loop_end_500:
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	jmp .if_end_499
.if_else_499:
	mov rax, 49
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_503
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 16
	push rax
	call func_vector_new
	add rsp, 0
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.loop_start_504:
.loop_continue_504:
	mov rax, 46
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	jne .and_right_506
	mov rax, 0
	jmp .and_end_506
.and_right_506:
	mov rax, 49
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_506:
	cmp rax, 0
	jne .and_right_505
	mov rax, 0
	jmp .and_end_505
.and_right_505:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_505:
	cmp rax, 0
	je .loop_end_504
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_statement
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 16
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	jmp .loop_start_504
.break_504:
.loop_end_504:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_507
	mov rax, qword gs_453
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_454
	push rax
	call func_die_loc
	add rsp, 24
.if_end_507:
	jmp .if_end_503
.if_else_503:
	mov rax, qword gs_455
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_456
	push rax
	call func_die_loc
	add rsp, 24
.if_end_503:
.if_end_499:
	jmp .loop_start_498
.break_498:
.loop_end_498:
	mov rax, qword gvars
	add rax, 1073742000
	mov rax, [rax]
	push rax
	call _Vector_method_pop
	add rsp, 8
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_for_loop:
	push rbp
	mov rbp, rsp
	sub rsp, 56
	mov rax, 55
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, 33
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-48], rax
	mov rax, 30
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, 44
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, 1
	push rax
	call func_vector_new_sized
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, 1
	push rax
	call func_vector_new_sized
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call func_block_add_child
	add rsp, 16
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call func_block_stack_push
	add rsp, 8
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 62
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_508
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_var_declaration
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_508
.if_else_508:
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_509
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_expression
	add rsp, 8
	pop rcx
	mov [rcx], rax
.if_end_509:
.if_end_508:
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_510
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_expression
	add rsp, 8
	pop rcx
	mov [rcx], rax
.if_end_510:
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_511
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 24
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_expression
	add rsp, 8
	pop rcx
	mov [rcx], rax
.if_end_511:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742000
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_statement
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 1073742000
	mov rax, [rax]
	push rax
	call _Vector_method_pop
	add rsp, 8
	call func_block_stack_pop
	add rsp, 0
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_statement:
	push rbp
	mov rbp, rsp
	sub rsp, 56
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 28
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_512
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_block
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_513
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
.if_end_513:
	jmp .if_end_512
.if_else_512:
	mov rax, 64
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_514
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 39
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_else_515
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_expression
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741936
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_convert_type
	add rsp, 16
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_516
	mov rax, qword gs_457
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 8
	push rax
	mov rax, qword gs_458
	push rax
	call func_die_loc
	add rsp, 24
.if_end_516:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .if_end_515
.if_else_515:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, 7
	push rax
	mov rax, qword gvars
	add rax, 1073741936
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_517
	mov rax, qword gs_459
	push rax
	call func_puts
	add rsp, 8
	mov rax, qword gvars
	add rax, 1073741936
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_create_type_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_460
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 8
	push rax
	mov rax, qword gs_461
	push rax
	call func_die_loc
	add rsp, 24
.if_end_517:
.if_end_515:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, qword gvars
	add rax, 1073741936
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	jmp .if_end_514
.if_else_514:
	mov rax, 56
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_518
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 30
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, 30
	push rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_expression
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_statement
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 51
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_519
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_statement
	add rsp, 8
	pop rcx
	mov [rcx], rax
.if_end_519:
	jmp .if_end_518
.if_else_518:
	mov rax, 70
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_520
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 31
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, 30
	push rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_expression
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742000
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_statement
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 1073742000
	mov rax, [rax]
	push rax
	call _Vector_method_pop
	add rsp, 8
	jmp .if_end_520
.if_else_520:
	mov rax, 55
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_521
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_for_loop
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_521
.if_else_521:
	mov rax, 67
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_522
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_switch_statement
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_522
.if_else_522:
	mov rax, 45
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_523
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, qword gvars
	add rax, 1073742000
	mov rax, [rax]
	push rax
	call _Vector_method_empty
	add rsp, 8
	cmp rax, 0
	je .if_end_524
	mov rax, qword gs_462
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 8
	push rax
	mov rax, qword gs_463
	push rax
	call func_die_loc
	add rsp, 24
.if_end_524:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 40
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	jmp .if_end_523
.if_else_523:
	mov rax, 52
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_525
	mov rax, 52
	push rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 32
	push rax
	call func_node_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_statement
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_525
.if_else_525:
	mov rax, 62
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_526
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_var_declaration
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	jmp .if_end_526
.if_else_526:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_expression
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
.if_end_526:
.if_end_525:
.if_end_523:
.if_end_522:
.if_end_521:
.if_end_520:
.if_end_518:
.if_end_514:
.if_end_512:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_block:
	push rbp
	mov rbp, rsp
	sub rsp, 48
	mov rax, 28
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, 44
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	call func_vector_new
	add rsp, 0
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	call func_vector_new
	add rsp, 0
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	call func_block_stack_push
	add rsp, 8
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.loop_start_527:
.loop_continue_527:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .loop_end_527
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_statement
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	call func_block_add_child
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	jmp .loop_start_527
.break_527:
.loop_end_527:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	call func_block_stack_pop
	add rsp, 0
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_enum_declaration:
	push rbp
	mov rbp, rsp
	sub rsp, 48
	mov rax, 50
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, 28
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, 0
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.loop_start_528:
.loop_continue_528:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .loop_end_528
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	push rax
	call func_identifier_exists
	add rsp, 8
	cmp rax, 0
	je .if_end_529
	mov rax, qword gs_464
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_465
	push rax
	call func_die_loc
	add rsp, 24
.if_end_529:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	push rax
	call func_constant_push
	add rsp, 16
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 11
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_530
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	jmp .if_end_530
.if_else_530:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_end_531
	mov rax, qword gs_466
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_467
	push rax
	call func_die_loc
	add rsp, 24
.if_end_531:
.if_end_530:
	jmp .loop_start_528
.break_528:
.loop_end_528:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_struct_union_declaration:
	push rbp
	mov rbp, rsp
	sub rsp, 80
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, 66
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	jne .and_right_533
	mov rax, 0
	jmp .and_end_533
.and_right_533:
	mov rax, 68
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_533:
	cmp rax, 0
	je .if_end_532
	mov rax, qword gs_468
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_469
	push rax
	call func_die_loc
	add rsp, 24
.if_end_532:
	mov rax, 66
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .cond_else_534
	mov rax, 12
	jmp .cond_end_534
.cond_else_534:
	mov rax, 13
.cond_end_534:
	push rax
	call func_type_new
	add rsp, 8
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 48
	push rax
	call func_vector_new
	add rsp, 0
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 56
	push rax
	call func_vector_new
	add rsp, 0
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	jne .and_right_536
	mov rax, 0
	jmp .and_end_536
.and_right_536:
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	cmp rax, 0
	setne al
.and_end_536:
	cmp rax, 0
	je .if_end_535
	mov rax, qword gs_470
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_471
	push rax
	call func_die_loc
	add rsp, 24
.if_end_535:
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_537
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741992
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	jmp .if_end_537
.if_else_537:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	push rax
	mov rax, qword gs_472
	pop rcx
	mov [rcx], rax
.if_end_537:
	mov rax, 28
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.loop_start_538:
.loop_continue_538:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .loop_end_538
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	mov [rbp-56], rax
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_539
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 56
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.if_end_539:
	mov rax, 66
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_541
	mov rax, 1
	jmp .or_end_541
.or_right_541:
	mov rax, 68
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_541:
	cmp rax, 0
	je .if_else_540
	mov rax, 0
	mov [rbp-72], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_542
	mov rax, rbp
	sub rax, 72
	push rax
	mov rax, 13
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .cond_else_543
	mov rax, 0
	jmp .cond_end_543
.cond_else_543:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 24
	mov rax, [rax]
.cond_end_543:
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
.if_end_542:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_544
	mov rax, rbp
	sub rax, 56
	push rax
	mov rax, qword gs_473
	pop rcx
	mov [rcx], rax
.if_end_544:
	mov rax, qword gvars
	add rax, 1073741992
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	mov [rbp-80], rax
	mov rax, rbp
	sub rax, 64
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	push rax
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_struct_union_declaration
	add rsp, 24
	pop rcx
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 1073741992
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 80
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .if_end_540
.if_else_540:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_else_545
	mov rax, rbp
	sub rax, 64
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_type
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_545
.if_else_545:
	mov rax, qword gs_474
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_475
	push rax
	call func_die_loc
	add rsp, 24
.if_end_545:
.if_end_540:
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	call func_compound_push_field
	add rsp, 32
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	jmp .loop_start_538
.break_538:
.loop_end_538:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_method:
	push rbp
	mov rbp, rsp
	sub rsp, 80
	mov rax, 63
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	push rax
	call func_find_compound_type
	add rsp, 8
	mov [rbp-48], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_546
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gs_476
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_477
	push rax
	call func_die_loc2
	add rsp, 32
.if_end_546:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, 41
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 40
	push rax
	mov rax, 1
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 48
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 24
	push rax
	call func_vector_new
	add rsp, 0
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 56
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	push rax
	call func_find_function_definition
	add rsp, 16
	mov [rbp-64], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .if_else_547
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	add rax, 16
	add rax, 32
	mov rax, [rax]
	cmp rax, 0
	je .if_end_548
	mov rax, qword gs_478
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_479
	push rax
	call func_die_loc
	add rsp, 24
.if_end_548:
	mov rax, qword gvars
	add rax, 1073741936
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .if_end_547
.if_else_547:
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 56
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, qword gvars
	add rax, 1073741936
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
.if_end_547:
	mov rax, 10
	push rax
	call func_type_new
	add rsp, 8
	mov [rbp-72], rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 72
	mov rax, [rax]
	push rax
	mov rax, qword gs_480
	push rax
	call func_variable_new
	add rsp, 24
	mov [rbp-80], rax
	mov rax, rbp
	sub rax, 80
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, 30
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_function_params
	add rsp, 16
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_549
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_type
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_549
.if_else_549:
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 7
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
.if_end_549:
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 28
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_550
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_block
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 32
	push rax
	mov rax, 1
	pop rcx
	mov [rcx], rax
	jmp .if_end_550
.if_else_550:
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 32
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], rax
.if_end_550:
	mov rax, qword gvars
	add rax, 1073741936
	push rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_function:
	push rbp
	mov rbp, rsp
	sub rsp, 56
	mov rax, 54
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, 41
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-48], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	mov [rbp-56], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	push rax
	call func_identifier_exists
	add rsp, 8
	cmp rax, 0
	je .if_else_551
	mov rax, rbp
	sub rax, 56
	push rax
	mov rax, qword gvars
	add rax, 1073741928
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 32
	add rax, 0
	mov rax, [rax]
	push rax
	call func_find_function_definition
	add rsp, 16
	pop rcx
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_552
	mov rax, qword gs_481
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_482
	push rax
	call func_die_loc
	add rsp, 24
.if_end_552:
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 16
	add rax, 32
	mov rax, [rax]
	cmp rax, 0
	je .if_end_553
	mov rax, qword gs_483
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 8
	push rax
	mov rax, qword gs_484
	push rax
	call func_die_loc
	add rsp, 24
.if_end_553:
	mov rax, qword gvars
	add rax, 1073741936
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .if_end_551
.if_else_551:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741928
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, qword gvars
	add rax, 1073741936
	push rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
.if_end_551:
	mov rax, 30
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_function_params
	add rsp, 16
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_554
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_type
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_554
.if_else_554:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 8
	push rax
	mov rax, 7
	push rax
	call func_type_new
	add rsp, 8
	pop rcx
	mov [rcx], rax
.if_end_554:
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, 28
	push rax
	mov rax, rbp
	sub rax, 40
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_555
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_block
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 32
	push rax
	mov rax, 1
	pop rcx
	mov [rcx], rax
	jmp .if_end_555
.if_else_555:
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	add rax, 16
	add rax, 32
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], rax
.if_end_555:
	mov rax, qword gvars
	add rax, 1073741936
	push rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parser_open_new_file:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, 0
	mov [rbp-8], rax
.loop_start_556:
	mov rax, qword gvars
	add rax, 1073741976
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_556
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741976
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	add rax, 24
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_end_557
	mov rax, qword gs_485
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_puts
	add rsp, 8
	mov rax, qword gs_486
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 1
	push rax
	call func_exit
	add rsp, 8
.if_end_557:
.loop_continue_556:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_556
.break_556:
.loop_end_556:
	mov rax, 0
	mov [rbp-8], rax
.loop_start_558:
	mov rax, qword gvars
	add rax, 1073742008
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_558
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742008
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_end_559
	xor rax, rax
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_559:
.loop_continue_558:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_558
.break_558:
.loop_end_558:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742008
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_lexer_new_open_file
	add rsp, 8
	push rax
	mov rax, qword gvars
	add rax, 1073741976
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_program:
	push rbp
	mov rbp, rsp
	sub rsp, 64
	call func_initialize_builtins
	add rsp, 0
	mov rax, 43
	push rax
	call func_node_new
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	add rax, 0
	push rax
	call func_vector_new
	add rsp, 0
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073741976
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
.loop_start_560:
.loop_continue_560:
	mov rax, 13
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setne al
	movzx rax, al
	cmp rax, 0
	je .loop_end_560
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	mov [rbp-56], rax
	mov rax, 54
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_561
	mov rax, rbp
	sub rax, 56
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_function
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_561
.if_else_561:
	mov rax, 63
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_562
	mov rax, rbp
	sub rax, 56
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_method
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_562
.if_else_562:
	mov rax, 62
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_563
	mov rax, rbp
	sub rax, 56
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_var_declaration
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_563
.if_else_563:
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_564
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	jmp .if_end_564
.if_else_564:
	mov rax, 48
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_565
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_constant_declaration
	add rsp, 8
	jmp .if_end_565
.if_else_565:
	mov rax, 71
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_566
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next
	add rsp, 16
	mov rax, 41
	push rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_next_assert
	add rsp, 24
	mov rax, rbp
	sub rax, 48
	add rax, 32
	add rax, 0
	mov rax, [rax]
	mov [rbp-64], rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	push rax
	call func_parser_open_new_file
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, qword gvars
	add rax, 1073741976
	mov rax, [rax]
	push rax
	call _Vector_method_top
	add rsp, 8
	pop rcx
	mov [rcx], rax
	jmp .if_end_566
.if_else_566:
	mov rax, 66
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_568
	mov rax, 1
	jmp .or_end_568
.or_right_568:
	mov rax, 68
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_568:
	cmp rax, 0
	je .if_else_567
	mov rax, 0
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_struct_union_declaration
	add rsp, 24
	jmp .if_end_567
.if_else_567:
	mov rax, 50
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_569
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_enum_declaration
	add rsp, 8
	jmp .if_end_569
.if_else_569:
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	push rax
	call func_token_type_to_string
	add rsp, 8
	push rax
	mov rax, qword gs_487
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 8
	push rax
	mov rax, qword gs_488
	push rax
	call func_die_loc2
	add rsp, 32
.if_end_569:
.if_end_567:
.if_end_566:
.if_end_565:
.if_end_564:
.if_end_563:
.if_end_562:
.if_end_561:
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	cmp rax, 0
	je .if_end_570
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_block_add_child
	add rsp, 16
.if_end_570:
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
.loop_start_571:
.loop_continue_571:
	mov rax, 13
	push rax
	mov rax, rbp
	sub rax, 48
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	jne .and_right_572
	mov rax, 0
	jmp .and_end_572
.and_right_572:
	mov rax, 1
	push rax
	mov rax, qword gvars
	add rax, 1073741976
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setg al
	movzx rax, al
	cmp rax, 0
	setne al
.and_end_572:
	cmp rax, 0
	je .loop_end_571
	mov rax, qword gvars
	add rax, 1073741976
	mov rax, [rax]
	push rax
	call _Vector_method_pop
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, qword gvars
	add rax, 1073741976
	mov rax, [rax]
	push rax
	call _Vector_method_top
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 48
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call _Lexer_method_peek
	add rsp, 16
	jmp .loop_start_571
.break_571:
.loop_end_571:
	jmp .loop_start_560
.break_560:
.loop_end_560:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_emit_asm4:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_strlen
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742016
	mov rax, [rax]
	push rax
	call _File_method_write
	add rsp, 24
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_strlen
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742016
	mov rax, [rax]
	push rax
	call _File_method_write
	add rsp, 24
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	call func_strlen
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742016
	mov rax, [rax]
	push rax
	call _File_method_write
	add rsp, 24
	mov rax, rbp
	sub rax, -40
	mov rax, [rax]
	push rax
	call func_strlen
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -40
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742016
	mov rax, [rax]
	push rax
	call _File_method_write
	add rsp, 24
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_emit_asm3:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_strlen
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742016
	mov rax, [rax]
	push rax
	call _File_method_write
	add rsp, 24
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_strlen
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742016
	mov rax, [rax]
	push rax
	call _File_method_write
	add rsp, 24
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	call func_strlen
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742016
	mov rax, [rax]
	push rax
	call _File_method_write
	add rsp, 24
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_emit_asm2:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_strlen
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742016
	mov rax, [rax]
	push rax
	call _File_method_write
	add rsp, 24
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_strlen
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742016
	mov rax, [rax]
	push rax
	call _File_method_write
	add rsp, 24
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_emit_asm:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_strlen
	add rsp, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742016
	mov rax, [rax]
	push rax
	call _File_method_write
	add rsp, 24
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_emit_num:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .if_end_573
	mov rax, qword gs_489
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	neg rax
	pop rcx
	mov [rcx], rax
.if_end_573:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742016
	mov rax, [rax]
	push rax
	call _File_method_putu
	add rsp, 16
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_generate_syscall:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, qword gs_490
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_491
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_492
	push rax
	call func_emit_asm
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_subregister_for_type:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	mov [rbp-8], rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_574
	mov rax, qword gs_493
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_574:
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_575
	mov rax, qword gs_494
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_575:
	mov rax, 4
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_576
	mov rax, qword gs_495
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_576:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_577
	mov rax, qword gs_496
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_577:
	mov rax, qword gs_497
	push rax
	mov rax, qword gs_498
	push rax
	call func_die
	add rsp, 16
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_specifier_for_type:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	mov [rbp-8], rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_578
	mov rax, qword gs_499
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_578:
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_579
	mov rax, qword gs_500
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_579:
	mov rax, 4
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_580
	mov rax, qword gs_501
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_580:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_581
	mov rax, qword gs_502
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_581:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_create_type_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_503
	push rax
	mov rax, qword gs_504
	push rax
	call func_die
	add rsp, 16
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_get_func_name:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 0
	push rax
	mov rax, qword gvars
	add rax, 1073742064
	pop rcx
	add rax, rcx
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], al
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 40
	mov rax, [rax]
	cmp rax, 0
	je .if_else_582
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 48
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, qword gs_505
	push rax
	mov rax, qword gvars
	add rax, 1073742064
	push rax
	call func_strcat
	add rsp, 16
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742064
	push rax
	call func_strcat
	add rsp, 16
	mov rax, qword gs_506
	push rax
	mov rax, qword gvars
	add rax, 1073742064
	push rax
	call func_strcat
	add rsp, 16
	jmp .if_end_582
.if_else_582:
	mov rax, qword gs_507
	push rax
	mov rax, qword gvars
	add rax, 1073742064
	push rax
	call func_strcat
	add rsp, 16
.if_end_582:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742064
	push rax
	call func_strcat
	add rsp, 16
	mov rax, qword gvars
	add rax, 1073742064
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_generate_binop_int_arith:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_508
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_509
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, 5
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_583
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_510
	pop rcx
	mov [rcx], rax
	jmp .if_end_583
.if_else_583:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_584
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_511
	pop rcx
	mov [rcx], rax
	jmp .if_end_584
.if_else_584:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_585
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_512
	pop rcx
	mov [rcx], rax
	jmp .if_end_585
.if_else_585:
	mov rax, 11
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_586
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_513
	pop rcx
	mov [rcx], rax
	jmp .if_end_586
.if_else_586:
	mov rax, 13
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_587
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_514
	pop rcx
	mov [rcx], rax
	jmp .if_end_587
.if_else_587:
	mov rax, 15
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_588
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_515
	pop rcx
	mov [rcx], rax
	jmp .if_end_588
.if_else_588:
	mov rax, 16
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_589
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_516
	pop rcx
	mov [rcx], rax
	jmp .if_end_589
.if_else_589:
	mov rax, 7
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_590
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_517
	pop rcx
	mov [rcx], rax
	jmp .if_end_590
.if_else_590:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_591
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_518
	pop rcx
	mov [rcx], rax
	jmp .if_end_591
.if_else_591:
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_592
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_519
	pop rcx
	mov [rcx], rax
	jmp .if_end_592
.if_else_592:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_node_type_to_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_520
	push rax
	mov rax, qword gs_521
	push rax
	call func_die
	add rsp, 16
.if_end_592:
.if_end_591:
.if_end_590:
.if_end_589:
.if_end_588:
.if_end_587:
.if_end_586:
.if_end_585:
.if_end_584:
.if_end_583:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_594
	mov rax, 1
	jmp .or_end_594
.or_right_594:
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_594:
	cmp rax, 0
	je .if_else_593
	mov rax, qword gs_522
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_523
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, 9
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_595
	mov rax, qword gs_524
	push rax
	call func_emit_asm
	add rsp, 8
.if_end_595:
	jmp .if_end_593
.if_else_593:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .or_right_597
	mov rax, 1
	jmp .or_end_597
.or_right_597:
	mov rax, 11
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	setne al
.or_end_597:
	cmp rax, 0
	je .if_else_596
	mov rax, qword gs_525
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gs_526
	push rax
	call func_emit_asm3
	add rsp, 24
	jmp .if_end_596
.if_else_596:
	mov rax, qword gs_527
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gs_528
	push rax
	call func_emit_asm3
	add rsp, 24
.if_end_596:
.if_end_593:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_generate_binop_float_arith:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_529
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_530
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_531
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_532
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, 5
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_598
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_533
	pop rcx
	mov [rcx], rax
	jmp .if_end_598
.if_else_598:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_599
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_534
	pop rcx
	mov [rcx], rax
	jmp .if_end_599
.if_else_599:
	mov rax, 7
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_600
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_535
	pop rcx
	mov [rcx], rax
	jmp .if_end_600
.if_else_600:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_601
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_536
	pop rcx
	mov [rcx], rax
	jmp .if_end_601
.if_else_601:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_node_type_to_string
	add rsp, 8
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_537
	push rax
	mov rax, qword gs_538
	push rax
	call func_die
	add rsp, 16
.if_end_601:
.if_end_600:
.if_end_599:
.if_end_598:
	mov rax, qword gs_539
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gs_540
	push rax
	call func_emit_asm3
	add rsp, 24
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_generate_cmp_int:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_541
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_542
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_543
	push rax
	call func_emit_asm
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_generate_cmp_float:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_544
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_545
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_546
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_547
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_548
	push rax
	call func_emit_asm
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_generate_binop:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, 17
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_602
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_549
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, qword gs_550
	pop rcx
	mov [rcx], rax
	jmp .if_end_602
.if_else_602:
	mov rax, 19
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_603
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_551
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, qword gs_552
	pop rcx
	mov [rcx], rax
	jmp .if_end_603
.if_else_603:
	mov rax, 21
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_604
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_553
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, qword gs_554
	pop rcx
	mov [rcx], rax
	jmp .if_end_604
.if_else_604:
	mov rax, 18
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_605
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_555
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, qword gs_556
	pop rcx
	mov [rcx], rax
	jmp .if_end_605
.if_else_605:
	mov rax, 20
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_606
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_557
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, qword gs_558
	pop rcx
	mov [rcx], rax
	jmp .if_end_606
.if_else_606:
	mov rax, 22
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_607
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, qword gs_559
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, qword gs_560
	pop rcx
	mov [rcx], rax
	jmp .if_end_607
.if_else_607:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	je .if_end_608
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_generate_binop_float_arith
	add rsp, 8
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_608:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_generate_binop_int_arith
	add rsp, 8
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_607:
.if_end_606:
.if_end_605:
.if_end_604:
.if_end_603:
.if_end_602:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	je .if_else_609
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_generate_cmp_float
	add rsp, 8
	mov rax, qword gs_561
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, qword gs_562
	push rax
	call func_emit_asm3
	add rsp, 24
	jmp .if_end_609
.if_else_609:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_generate_cmp_int
	add rsp, 8
	mov rax, qword gs_563
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gs_564
	push rax
	call func_emit_asm3
	add rsp, 24
.if_end_609:
	mov rax, qword gs_565
	push rax
	call func_emit_asm
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_generate_lvalue_into_rax:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, 37
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_610
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, qword gs_566
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_567
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_568
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_610
.if_else_610:
	mov rax, 38
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_611
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, qword gs_569
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_570
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_571
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_611
.if_else_611:
	mov rax, 24
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_612
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 16
	mov rax, [rax]
	cmp rax, 0
	je .if_else_613
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	jmp .if_end_613
.if_else_613:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_generate_lvalue_into_rax
	add rsp, 8
.if_end_613:
	mov rax, qword gs_572
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_573
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_612
.if_else_612:
	mov rax, 4
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_614
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	jmp .if_end_614
.if_else_614:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_node_type_to_string
	add rsp, 8
	push rax
	mov rax, qword gs_574
	push rax
	mov rax, qword gs_575
	push rax
	call func_die2
	add rsp, 24
.if_end_614:
.if_end_612:
.if_end_611:
.if_end_610:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_generate_function_call:
	push rbp
	mov rbp, rsp
	sub rsp, 32
	mov rax, 0
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	mov [rbp-16], rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	mov [rbp-24], rax
.loop_start_615:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setge al
	movzx rax, al
	cmp rax, 0
	je .loop_end_615
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	mov [rbp-32], rax
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	je .if_else_616
	mov rax, qword gs_576
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_577
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_616
.if_else_616:
	mov rax, qword gs_578
	push rax
	call func_emit_asm
	add rsp, 8
.if_end_616:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
.loop_continue_615:
	mov rax, rbp
	sub rax, 24
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_615
.break_615:
.loop_end_615:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_get_func_name
	add rsp, 8
	mov [rbp-24], rax
	mov rax, qword gs_579
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	mov rax, qword gs_580
	push rax
	call func_emit_asm3
	add rsp, 24
	mov rax, qword gs_581
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_582
	push rax
	call func_emit_asm
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_generate_expression:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, 25
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_617
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_618
	mov rax, qword gs_583
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_584
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_618
.if_else_618:
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_619
	mov rax, qword gs_585
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	movsx rax, byte [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_586
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_619
.if_else_619:
	mov rax, 10
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_620
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, qword gvars
	add rax, 1073742032
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742032
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, qword gs_587
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_588
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_620
.if_else_620:
	mov rax, 6
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_621
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, qword gvars
	add rax, 1073742040
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742040
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	mov rax, qword gs_589
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_590
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_591
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_592
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_621
.if_else_621:
	mov rax, qword gs_593
	push rax
	mov rax, qword gs_594
	push rax
	call func_die
	add rsp, 16
.if_end_621:
.if_end_620:
.if_end_619:
.if_end_618:
	jmp .if_end_617
.if_else_617:
	mov rax, 3
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_622
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	call func_generate_lvalue_into_rax
	add rsp, 8
	jmp .if_end_622
.if_else_622:
	mov rax, 29
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_623
	mov rax, qword gvars
	add rax, 1073742024
	push rax
	mov rax, 1
	push rax
	mov rax, qword gvars
	add rax, 1073742024
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_595
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_596
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_597
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_598
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_599
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_600
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_601
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 16
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_602
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_603
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_623
.if_else_623:
	mov rax, 14
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_624
	mov rax, qword gvars
	add rax, 1073742024
	push rax
	mov rax, 1
	push rax
	mov rax, qword gvars
	add rax, 1073742024
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_604
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_605
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_606
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_607
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_608
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_609
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_610
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_611
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_612
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_613
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_614
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_615
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_624
.if_else_624:
	mov rax, 12
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_625
	mov rax, qword gvars
	add rax, 1073742024
	push rax
	mov rax, 1
	push rax
	mov rax, qword gvars
	add rax, 1073742024
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_616
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_617
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_618
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_619
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_620
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_621
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_622
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_623
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_624
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_625
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_626
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_627
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_625
.if_else_625:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_is_lvalue
	add rsp, 8
	cmp rax, 0
	je .if_else_626
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_size_for_type
	add rsp, 8
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_generate_lvalue_into_rax
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	je .if_else_627
	mov rax, qword gs_628
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_627
.if_else_627:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_628
	mov rax, qword gs_629
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_628
.if_else_628:
	mov rax, 4
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_629
	mov rax, qword gs_630
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_629
.if_else_629:
	mov rax, qword gs_631
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_specifier_for_type
	add rsp, 8
	push rax
	mov rax, qword gs_632
	push rax
	call func_emit_asm3
	add rsp, 24
.if_end_629:
.if_end_628:
.if_end_627:
	jmp .if_end_626
.if_else_626:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_is_binary_op
	add rsp, 8
	cmp rax, 0
	je .if_else_630
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_generate_binop
	add rsp, 8
	jmp .if_end_630
.if_else_630:
	mov rax, 2
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_631
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_633
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_631
.if_else_631:
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_632
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	je .if_else_633
	mov rax, qword gs_634
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_635
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_636
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_633
.if_else_633:
	mov rax, qword gs_637
	push rax
	call func_emit_asm
	add rsp, 8
.if_end_633:
	jmp .if_end_632
.if_else_632:
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_634
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_638
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_639
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_640
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_634
.if_else_634:
	mov rax, 23
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_635
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_generate_lvalue_into_rax
	add rsp, 8
	mov rax, qword gs_641
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_642
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	je .if_else_636
	mov rax, qword gs_643
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_636
.if_else_636:
	mov rax, qword gs_644
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_subregister_for_type
	add rsp, 8
	push rax
	mov rax, qword gs_645
	push rax
	call func_emit_asm3
	add rsp, 24
.if_end_636:
	jmp .if_end_635
.if_else_635:
	mov rax, 28
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_637
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_generate_function_call
	add rsp, 8
	jmp .if_end_637
.if_else_637:
	mov rax, 27
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_638
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	jne .and_right_640
	mov rax, 0
	jmp .and_end_640
.and_right_640:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	setne al
.and_end_640:
	cmp rax, 0
	je .if_else_639
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_646
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_639
.if_else_639:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	jne .and_right_642
	mov rax, 0
	jmp .and_end_642
.and_right_642:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_is_int_type
	add rsp, 8
	cmp rax, 0
	setne al
.and_end_642:
	cmp rax, 0
	je .if_else_641
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_647
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_641
.if_else_641:
	mov rax, qword gs_648
	push rax
	mov rax, qword gs_649
	push rax
	call func_die
	add rsp, 16
.if_end_641:
.if_end_639:
	jmp .if_end_638
.if_else_638:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	call func_node_type_to_string
	add rsp, 8
	push rax
	mov rax, qword gs_650
	push rax
	mov rax, qword gs_651
	push rax
	call func_die2
	add rsp, 24
.if_end_638:
.if_end_637:
.if_end_635:
.if_end_634:
.if_end_632:
.if_end_631:
.if_end_630:
.if_end_626:
.if_end_625:
.if_end_624:
.if_end_623:
.if_end_622:
.if_end_617:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_generate_switch_statement:
	push rbp
	mov rbp, rsp
	sub rsp, 64
	mov rax, qword gvars
	add rax, 1073742024
	push rax
	mov rax, 1
	push rax
	mov rax, qword gvars
	add rax, 1073742024
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov [rbp-8], rax
	mov rax, qword gvars
	add rax, 1073742056
	mov rax, [rax]
	mov [rbp-16], rax
	mov rax, qword gvars
	add rax, 1073742056
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	mov [rbp-24], rax
	mov rax, 0
	mov [rbp-32], rax
.loop_start_643:
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_643
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	mov [rbp-40], rax
	mov rax, rbp
	sub rax, 40
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	mov [rbp-48], rax
	mov rax, qword gs_652
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 48
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_653
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_654
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_655
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_656
	push rax
	call func_emit_asm
	add rsp, 8
.loop_continue_643:
	mov rax, rbp
	sub rax, 32
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_643
.break_643:
.loop_end_643:
	mov rax, qword gs_657
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_658
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, 0
	mov [rbp-32], rax
.loop_start_644:
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_644
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	mov [rbp-40], rax
	mov rax, rbp
	sub rax, 40
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	mov [rbp-48], rax
	mov rax, qword gs_659
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_660
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_661
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 40
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	mov [rbp-56], rax
	mov rax, 0
	mov [rbp-64], rax
.loop_start_645:
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_645
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 56
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	push rax
	call func_generate_statement
	add rsp, 8
.loop_continue_645:
	mov rax, rbp
	sub rax, 64
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 64
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_645
.break_645:
.loop_end_645:
.loop_continue_644:
	mov rax, rbp
	sub rax, 32
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_644
.break_644:
.loop_end_644:
	mov rax, qword gs_662
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_663
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 16
	mov rax, [rax]
	mov [rbp-32], rax
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	cmp rax, 0
	je .if_end_646
	mov rax, 0
	mov [rbp-40], rax
.loop_start_647:
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 40
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_647
	mov rax, rbp
	sub rax, 40
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	push rax
	call func_generate_statement
	add rsp, 8
.loop_continue_647:
	mov rax, rbp
	sub rax, 40
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 40
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_647
.break_647:
.loop_end_647:
.if_end_646:
	mov rax, qword gs_664
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_665
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gvars
	add rax, 1073742056
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_generate_statement:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, 39
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_648
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	cmp rax, 0
	je .if_else_649
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	jmp .if_end_649
.if_else_649:
	mov rax, qword gs_666
	push rax
	call func_emit_asm
	add rsp, 8
.if_end_649:
	mov rax, qword gs_667
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gvars
	add rax, 1073742048
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	mov [rbp-8], rax
.loop_start_650:
.loop_continue_650:
	mov rax, 0
	push rax
	mov rax, qword gvars
	add rax, 1073742048
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setg al
	movzx rax, al
	cmp rax, 0
	je .loop_end_650
	mov rax, qword gvars
	add rax, 1073742048
	mov rax, [rax]
	push rax
	call _Vector_method_pop
	add rsp, 8
	push rax
	call func_generate_statement
	add rsp, 8
	jmp .loop_start_650
.break_650:
.loop_end_650:
	mov rax, qword gvars
	add rax, 1073742048
	mov rax, [rax]
	add rax, 0
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, qword gs_668
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_669
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_670
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_671
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_648
.if_else_648:
	mov rax, 36
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_651
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	cmp rax, 0
	je .if_end_652
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	add rax, 16
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_is_float_type
	add rsp, 8
	cmp rax, 0
	je .if_else_653
	mov rax, qword gs_672
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_673
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_653
.if_else_653:
	mov rax, qword gs_674
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_675
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	add rax, 8
	mov rax, [rax]
	push rax
	call func_subregister_for_type
	add rsp, 8
	push rax
	mov rax, qword gs_676
	push rax
	call func_emit_asm3
	add rsp, 24
.if_end_653:
.if_end_652:
	jmp .if_end_651
.if_else_651:
	mov rax, 44
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_654
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_generate_block
	add rsp, 8
	jmp .if_end_654
.if_else_654:
	mov rax, 32
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_655
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742048
	mov rax, [rax]
	push rax
	call _Vector_method_push
	add rsp, 16
	jmp .if_end_655
.if_else_655:
	mov rax, 40
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_656
	mov rax, 0
	push rax
	mov rax, qword gvars
	add rax, 1073742056
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .if_end_657
	mov rax, qword gs_677
	push rax
	mov rax, qword gs_678
	push rax
	call func_die
	add rsp, 16
.if_end_657:
	mov rax, 0
	push rax
	mov rax, qword gvars
	add rax, 1073742048
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setg al
	movzx rax, al
	cmp rax, 0
	je .if_end_658
	mov rax, qword gs_679
	push rax
	call func_putsln
	add rsp, 8
.if_end_658:
	mov rax, qword gs_680
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gvars
	add rax, 1073742056
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_681
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_656
.if_else_656:
	mov rax, 30
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_659
	mov rax, qword gvars
	add rax, 1073742024
	push rax
	mov rax, 1
	push rax
	mov rax, qword gvars
	add rax, 1073742024
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_660
	mov rax, qword gs_682
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_683
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_684
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_generate_statement
	add rsp, 8
	mov rax, qword gs_685
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_686
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_660
.if_else_660:
	mov rax, qword gs_687
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_688
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_689
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_generate_statement
	add rsp, 8
	mov rax, qword gs_690
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_691
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_692
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_693
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 16
	mov rax, [rax]
	push rax
	call func_generate_statement
	add rsp, 8
	mov rax, qword gs_694
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_695
	push rax
	call func_emit_asm
	add rsp, 8
.if_end_660:
	jmp .if_end_659
.if_else_659:
	mov rax, 31
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_661
	mov rax, qword gvars
	add rax, 1073742024
	push rax
	mov rax, 1
	push rax
	mov rax, qword gvars
	add rax, 1073742024
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov [rbp-8], rax
	mov rax, qword gvars
	add rax, 1073742056
	mov rax, [rax]
	mov [rbp-16], rax
	mov rax, qword gvars
	add rax, 1073742056
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, qword gs_696
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_697
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_698
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_699
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_700
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_701
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_702
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_generate_statement
	add rsp, 8
	mov rax, qword gs_703
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_704
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_705
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_706
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_707
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_708
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gvars
	add rax, 1073742056
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .if_end_661
.if_else_661:
	mov rax, 34
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_662
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_generate_switch_statement
	add rsp, 8
	jmp .if_end_662
.if_else_662:
	mov rax, 33
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_663
	mov rax, qword gvars
	add rax, 1073742024
	push rax
	mov rax, 1
	push rax
	mov rax, qword gvars
	add rax, 1073742024
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov [rbp-8], rax
	mov rax, qword gvars
	add rax, 1073742056
	mov rax, [rax]
	mov [rbp-16], rax
	mov rax, qword gvars
	add rax, 1073742056
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 16
	mov rax, [rax]
	cmp rax, 0
	je .if_end_664
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 16
	mov rax, [rax]
	push rax
	call func_generate_statement
	add rsp, 8
.if_end_664:
	mov rax, qword gs_709
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_710
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	cmp rax, 0
	je .if_end_665
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, qword gs_711
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_712
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_713
	push rax
	call func_emit_asm
	add rsp, 8
.if_end_665:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_generate_statement
	add rsp, 8
	mov rax, qword gs_714
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_715
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	cmp rax, 0
	je .if_end_666
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	push rax
	call func_generate_statement
	add rsp, 8
.if_end_666:
	mov rax, qword gs_716
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_717
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_718
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_719
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_720
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_721
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gvars
	add rax, 1073742056
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .if_end_663
.if_else_663:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
.if_end_663:
.if_end_662:
.if_end_661:
.if_end_659:
.if_end_656:
.if_end_655:
.if_end_654:
.if_end_651:
.if_end_648:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_generate_block:
	push rbp
	mov rbp, rsp
	sub rsp, 24
	mov rax, qword gvars
	add rax, 1073742048
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	mov [rbp-16], rax
	mov rax, 0
	mov [rbp-24], rax
.loop_start_667:
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_667
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	push rax
	call func_generate_statement
	add rsp, 8
.loop_continue_667:
	mov rax, rbp
	sub rax, 24
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_667
.break_667:
.loop_end_667:
.loop_start_668:
.loop_continue_668:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742048
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setg al
	movzx rax, al
	cmp rax, 0
	je .loop_end_668
	mov rax, qword gvars
	add rax, 1073742048
	mov rax, [rax]
	push rax
	call _Vector_method_pop
	add rsp, 8
	push rax
	call func_generate_statement
	add rsp, 8
	jmp .loop_start_668
.break_668:
.loop_end_668:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_generate_function:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_669
	xor rax, rax
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_669:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_get_func_name
	add rsp, 8
	mov [rbp-8], rax
	mov rax, qword gs_722
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_emit_asm2
	add rsp, 16
	mov rax, qword gs_723
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_724
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_725
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 16
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_726
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 8
	mov rax, [rax]
	push rax
	call func_generate_block
	add rsp, 8
	mov rax, qword gs_727
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_728
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_729
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_730
	push rax
	call func_emit_asm
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_generate_program:
	push rbp
	mov rbp, rsp
	sub rsp, 40
	mov rax, qword gvars
	add rax, 1073742016
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	mov [rbp-8], rax
	mov rax, 0
	mov [rbp-16], rax
.loop_start_670:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_670
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	mov [rbp-24], rax
	mov rax, 41
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_671
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	call func_generate_function
	add rsp, 8
	jmp .if_end_671
.if_else_671:
	mov rax, 36
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_672
	jmp .if_end_672
.if_else_672:
	mov rax, qword gs_731
	push rax
	mov rax, qword gs_732
	push rax
	call func_die
	add rsp, 16
.if_end_672:
.if_end_671:
.loop_continue_670:
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_670
.break_670:
.loop_end_670:
	mov rax, 0
	cmp rax, 0
	je .if_else_673
	mov rax, qword gs_733
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_734
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_735
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_736
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_737
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_738
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_739
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_740
	push rax
	call func_emit_asm
	add rsp, 8
	jmp .if_end_673
.if_else_673:
	mov rax, qword gs_741
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_742
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_743
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_744
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_745
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_746
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_747
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_748
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_749
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_750
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_751
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_752
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_753
	push rax
	call func_emit_asm
	add rsp, 8
.if_end_673:
	mov rax, 0
	mov [rbp-16], rax
.loop_start_674:
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_674
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	add rax, 16
	add rax, 0
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	mov [rbp-24], rax
	mov rax, 36
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	jne .and_right_676
	mov rax, 0
	jmp .and_end_676
.and_right_676:
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	cmp rax, 0
	setne al
.and_end_676:
	cmp rax, 0
	je .if_end_675
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	mov [rbp-32], rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	add rax, 16
	add rax, 24
	mov rax, [rax]
	push rax
	call func_generate_expression
	add rsp, 8
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	add rax, 16
	add rax, 0
	add rax, 16
	mov rax, [rax]
	mov [rbp-40], rax
	mov rax, qword gs_754
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_755
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 40
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_756
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_757
	push rax
	mov rax, rbp
	sub rax, 32
	mov rax, [rax]
	add rax, 8
	mov rax, [rax]
	push rax
	call func_subregister_for_type
	add rsp, 8
	push rax
	mov rax, qword gs_758
	push rax
	call func_emit_asm3
	add rsp, 24
.if_end_675:
.loop_continue_674:
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_674
.break_674:
.loop_end_674:
	mov rax, qword gs_759
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_760
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, 60
	push rax
	call func_generate_syscall
	add rsp, 8
	call func_generate_builtins
	add rsp, 0
	mov rax, qword gs_761
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_762
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gvars
	add rax, 1073741968
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_763
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, qword gs_764
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, 0
	mov [rbp-16], rax
.loop_start_677:
	mov rax, qword gvars
	add rax, 1073742032
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_677
	mov rax, qword gs_765
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_766
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742032
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	mov [rbp-24], rax
.loop_start_678:
.loop_continue_678:
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	movsx rax, byte [rax]
	cmp rax, 0
	je .loop_end_678
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	movsx rax, byte [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_767
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 24
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_678
.break_678:
.loop_end_678:
	mov rax, qword gs_768
	push rax
	call func_emit_asm
	add rsp, 8
.loop_continue_677:
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_677
.break_677:
.loop_end_677:
	mov rax, 0
	mov [rbp-16], rax
.loop_start_679:
	mov rax, qword gvars
	add rax, 1073742040
	mov rax, [rax]
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_679
	mov rax, qword gs_769
	push rax
	call func_emit_asm
	add rsp, 8
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_emit_num
	add rsp, 8
	mov rax, qword gs_770
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742040
	mov rax, [rax]
	push rax
	call _Vector_method_at
	add rsp, 16
	push rax
	mov rax, qword gs_771
	push rax
	call func_emit_asm3
	add rsp, 24
.loop_continue_679:
	mov rax, rbp
	sub rax, 16
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_679
.break_679:
.loop_end_679:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_print_usage_and_exit:
	push rbp
	mov rbp, rsp
	sub rsp, 0
	mov rax, qword gs_772
	push rax
	call func_puts
	add rsp, 8
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_puts
	add rsp, 8
	mov rax, qword gs_773
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_774
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_775
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_776
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_777
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_778
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_779
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_780
	push rax
	call func_putsln
	add rsp, 8
	mov rax, qword gs_781
	push rax
	call func_puts
	add rsp, 8
	mov rax, qword gvars
	add rax, 1073742328
	mov rax, [rax]
	push rax
	call func_puts
	add rsp, 8
	mov rax, qword gs_782
	push rax
	call func_putsln
	add rsp, 8
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	call func_exit
	add rsp, 8
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_parse_cli_args:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov rax, 1
	mov [rbp-8], rax
.loop_start_680:
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	setl al
	movzx rax, al
	cmp rax, 0
	je .loop_end_680
	mov rax, qword gs_783
	push rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_else_681
	mov rax, qword gvars
	add rax, 1073742344
	push rax
	mov rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	call func_strlen
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 1073742336
	push rax
	mov rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 1073742320
	push rax
	mov rax, qword gs_784
	pop rcx
	mov [rcx], rax
	jmp .if_end_681
.if_else_681:
	mov rax, qword gs_785
	push rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_else_682
	mov rax, qword gvars
	add rax, 1073742368
	push rax
	mov rax, 1
	pop rcx
	mov [rcx], rax
	jmp .if_end_682
.if_else_682:
	mov rax, qword gs_786
	push rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_else_683
	mov rax, qword gvars
	add rax, 1073742360
	push rax
	mov rax, 1
	pop rcx
	mov [rcx], rax
	jmp .if_end_683
.if_else_683:
	mov rax, qword gs_787
	push rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_else_684
	mov rax, 0
	push rax
	mov rax, 8
	push rax
	mov rax, 0
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	call func_print_usage_and_exit
	add rsp, 16
	jmp .if_end_684
.if_else_684:
	mov rax, qword gs_788
	push rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_else_685
	mov rax, qword gvars
	add rax, 1073742352
	push rax
	mov rax, 1
	pop rcx
	mov [rcx], rax
	jmp .if_end_685
.if_else_685:
	mov rax, qword gs_789
	push rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_else_686
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 1073742328
	push rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	jmp .if_end_686
.if_else_686:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742320
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_687
	mov rax, qword gs_790
	push rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	call func_streq
	add rsp, 16
	cmp rax, 0
	je .if_else_688
	mov rax, qword gvars
	add rax, 1073742320
	push rax
	mov rax, qword gs_791
	pop rcx
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 1073742336
	push rax
	mov rax, 4096
	push rax
	call func_malloc
	add rsp, 8
	pop rcx
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 1073742344
	push rax
	mov rax, 4096
	push rax
	mov rax, qword gvars
	add rax, 1073742336
	mov rax, [rax]
	push rax
	mov rax, 0
	push rax
	call func_read
	add rsp, 24
	pop rcx
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 1073742344
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742336
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, 0
	pop rcx
	mov [rcx], al
	mov rax, 4096
	push rax
	mov rax, qword gvars
	add rax, 1073742344
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_689
	mov rax, qword gs_792
	push rax
	call func_putsln
	add rsp, 8
	mov rax, 1
	push rax
	call func_exit
	add rsp, 8
.if_end_689:
	jmp .if_end_688
.if_else_688:
	mov rax, qword gvars
	add rax, 1073742320
	push rax
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, 114
	push rax
	mov rax, qword gvars
	add rax, 1073742320
	mov rax, [rax]
	push rax
	call func_fopen
	add rsp, 16
	mov [rbp-16], rax
	mov rax, qword gvars
	add rax, 1073742336
	push rax
	mov rax, qword gvars
	add rax, 1073742344
	push rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call _File_method_slurp
	add rsp, 16
	pop rcx
	mov [rcx], rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call _File_method_close
	add rsp, 8
.if_end_688:
	jmp .if_end_687
.if_else_687:
	mov rax, qword gvars
	add rax, 1073742360
	mov rax, [rax]
	cmp rax, 0
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_else_690
	mov rax, 1
	push rax
	mov rax, 8
	push rax
	mov rax, 0
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	call func_print_usage_and_exit
	add rsp, 16
	jmp .if_end_690
.if_else_690:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
.if_end_690:
.if_end_687:
.if_end_686:
.if_end_685:
.if_end_684:
.if_end_683:
.if_end_682:
.if_end_681:
.loop_continue_680:
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 1
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	pop rcx
	mov [rcx], rax
	jmp .loop_start_680
.break_680:
.loop_end_680:
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742320
	mov rax, [rax]
	pop rcx
	cmp rax, rcx
	sete al
	movzx rax, al
	cmp rax, 0
	je .if_end_691
	mov rax, 1
	push rax
	mov rax, 8
	push rax
	mov rax, 0
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	mov rax, [rax]
	push rax
	call func_print_usage_and_exit
	add rsp, 16
.if_end_691:
	mov rax, 8
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	pop rax
	mov rsp, rbp
	pop rbp
	ret
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
func_main:
	push rbp
	mov rbp, rsp
	sub rsp, 624
	mov rax, rbp
	sub rax, -24
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, -16
	mov rax, [rax]
	push rax
	call func_parse_cli_args
	add rsp, 16
	mov [rbp-8], rax
	mov rax, qword gvars
	add rax, 1073742344
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742336
	mov rax, [rax]
	push rax
	mov rax, qword gvars
	add rax, 1073742320
	mov rax, [rax]
	push rax
	call func_lexer_new
	add rsp, 24
	mov [rbp-16], rax
	mov rax, rbp
	sub rax, 16
	mov rax, [rax]
	push rax
	call func_parse_program
	add rsp, 8
	mov [rbp-24], rax
	mov rax, qword gvars
	add rax, 1073742352
	mov rax, [rax]
	cmp rax, 0
	je .if_end_692
	mov rax, 0
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	call func_dump_ast
	add rsp, 16
.if_end_692:
	mov rax, qword gvars
	add rax, 1073742328
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 280
	push rax
	call func_strcpy
	add rsp, 16
	mov rax, qword gs_793
	push rax
	mov rax, rbp
	sub rax, 280
	push rax
	call func_replace_extension
	add rsp, 16
	mov rax, 119
	push rax
	mov rax, rbp
	sub rax, 280
	push rax
	call func_fopen
	add rsp, 16
	mov [rbp-288], rax
	mov rax, rbp
	sub rax, 288
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 24
	mov rax, [rax]
	push rax
	call func_generate_program
	add rsp, 16
	mov rax, rbp
	sub rax, 288
	mov rax, [rax]
	push rax
	call _File_method_close
	add rsp, 8
	mov rax, qword gvars
	add rax, 1073742328
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 544
	push rax
	call func_strcpy
	add rsp, 16
	mov rax, qword gs_794
	push rax
	mov rax, rbp
	sub rax, 544
	push rax
	call func_replace_extension
	add rsp, 16
	mov rax, 8
	push rax
	mov rax, 0
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 624
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gs_795
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 1
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 624
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gs_796
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 2
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 624
	pop rcx
	add rax, rcx
	push rax
	mov rax, 0
	cmp rax, 0
	je .cond_else_693
	mov rax, qword gs_797
	jmp .cond_end_693
.cond_else_693:
	mov rax, qword gs_798
.cond_end_693:
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 3
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 624
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gs_799
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 4
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 624
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, 544
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 5
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 624
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, 280
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 6
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 624
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 1073742368
	mov rax, [rax]
	cmp rax, 0
	sete al
	movzx rax, al
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 624
	push rax
	call func_run_command_env
	add rsp, 24
	mov rax, 8
	push rax
	mov rax, 1
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 624
	pop rcx
	add rax, rcx
	push rax
	mov rax, 0
	cmp rax, 0
	je .cond_else_694
	mov rax, qword gs_800
	jmp .cond_end_694
.cond_else_694:
	mov rax, qword gs_801
.cond_end_694:
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 2
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 624
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gs_802
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 3
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 624
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gvars
	add rax, 1073742328
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 4
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 624
	pop rcx
	add rax, rcx
	push rax
	mov rax, rbp
	sub rax, 544
	pop rcx
	mov [rcx], rax
	mov rax, 0
	cmp rax, 0
	je .if_else_695
	mov rax, 8
	push rax
	mov rax, 5
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 624
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gs_803
	pop rcx
	mov [rcx], rax
	jmp .if_end_695
.if_else_695:
	mov rax, 8
	push rax
	mov rax, 5
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 624
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
.if_end_695:
	mov rax, 8
	push rax
	mov rax, 6
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 624
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 1073742368
	mov rax, [rax]
	cmp rax, 0
	sete al
	movzx rax, al
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 624
	push rax
	call func_run_command_env
	add rsp, 24
	mov rax, qword gvars
	add rax, 1073742360
	mov rax, [rax]
	cmp rax, 0
	je .if_end_696
	mov rax, rbp
	sub rax, 8
	push rax
	mov rax, 8
	push rax
	mov rax, 1
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	sub rax, rcx
	pop rcx
	mov [rcx], rax
	mov rax, 8
	push rax
	mov rax, 0
	pop rcx
	imul rax, rcx
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	pop rcx
	add rax, rcx
	push rax
	mov rax, qword gvars
	add rax, 1073742328
	mov rax, [rax]
	pop rcx
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 1073742368
	mov rax, [rax]
	cmp rax, 0
	sete al
	movzx rax, al
	push rax
	mov rax, rbp
	sub rax, -32
	mov rax, [rax]
	push rax
	mov rax, rbp
	sub rax, 8
	mov rax, [rax]
	push rax
	call func_run_command_env
	add rsp, 24
.if_end_696:
	mov rsp, rbp
	pop rbp
	mov qword rax, 0
	ret
global _start
_start:
	mov rbp, rsp
	mov rax, [rbp]
	add rax, 2
	shl rax, 3
	add rax, rbp
	push rax
	mov rax, rbp
	add rax, 8
	push rax
	mov rax, [rbp]
	push rax
	mov rax, 0
	mov rcx, qword gvars
	add rcx, 1073741832
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	mov rcx, qword gvars
	add rcx, 1073741840
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	mov rcx, qword gvars
	add rcx, 1073741848
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	mov rcx, qword gvars
	add rcx, 1073741856
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	mov rcx, qword gvars
	add rcx, 1073741864
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	mov rcx, qword gvars
	add rcx, 1073741872
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	mov rcx, qword gvars
	add rcx, 1073741880
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	mov rcx, qword gvars
	add rcx, 1073741888
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	mov rcx, qword gvars
	add rcx, 1073741896
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	mov rcx, qword gvars
	add rcx, 1073741904
	mov [rcx], rax
	mov rax, 0
	mov rcx, qword gvars
	add rcx, 1073741912
	mov [rcx], rax
	call func_vector_new
	add rsp, 0
	mov rcx, qword gvars
	add rcx, 1073741920
	mov [rcx], rax
	call func_vector_new
	add rsp, 0
	mov rcx, qword gvars
	add rcx, 1073741928
	mov [rcx], rax
	mov rax, qword gvars
	add rax, 0
	mov rax, [rax]
	mov rcx, qword gvars
	add rcx, 1073741936
	mov [rcx], rax
	call func_vector_new
	add rsp, 0
	mov rcx, qword gvars
	add rcx, 1073741944
	mov [rcx], rax
	mov rax, 0
	mov rcx, qword gvars
	add rcx, 1073741952
	mov [rcx], rax
	call func_vector_new
	add rsp, 0
	mov rcx, qword gvars
	add rcx, 1073741960
	mov [rcx], rax
	mov rax, 0
	mov rcx, qword gvars
	add rcx, 1073741968
	mov [rcx], rax
	call func_vector_new
	add rsp, 0
	mov rcx, qword gvars
	add rcx, 1073741976
	mov [rcx], rax
	call func_vector_new
	add rsp, 0
	mov rcx, qword gvars
	add rcx, 1073741984
	mov [rcx], rax
	call func_vector_new
	add rsp, 0
	mov rcx, qword gvars
	add rcx, 1073741992
	mov [rcx], rax
	call func_vector_new
	add rsp, 0
	mov rcx, qword gvars
	add rcx, 1073742000
	mov [rcx], rax
	call func_vector_new
	add rsp, 0
	mov rcx, qword gvars
	add rcx, 1073742008
	mov [rcx], rax
	mov rax, 1
	neg rax
	mov rcx, qword gvars
	add rcx, 1073742024
	mov [rcx], rax
	call func_vector_new
	add rsp, 0
	mov rcx, qword gvars
	add rcx, 1073742032
	mov [rcx], rax
	call func_vector_new
	add rsp, 0
	mov rcx, qword gvars
	add rcx, 1073742040
	mov [rcx], rax
	call func_vector_new
	add rsp, 0
	mov rcx, qword gvars
	add rcx, 1073742048
	mov [rcx], rax
	mov rax, 2
	neg rax
	mov rcx, qword gvars
	add rcx, 1073742056
	mov [rcx], rax
	mov rax, qword gs_804
	mov rcx, qword gvars
	add rcx, 1073742328
	mov [rcx], rax
	mov rax, 0
	mov rcx, qword gvars
	add rcx, 1073742344
	mov [rcx], rax
	mov rax, 0
	mov rcx, qword gvars
	add rcx, 1073742352
	mov [rcx], rax
	mov rax, 0
	mov rcx, qword gvars
	add rcx, 1073742360
	mov [rcx], rax
	mov rax, 0
	mov rcx, qword gvars
	add rcx, 1073742368
	mov [rcx], rax
	call func_main
	mov rdi, rax
	mov rax, 60
	syscall
func_print:
	mov rdi, [rsp+8]
	mov r9, -3689348814741910323
	sub rsp, 40
	mov byte [rsp+31], 10
	lea rcx, [rsp+30]
	mov qword rbx, 0
.L2:
	mov rax, rdi
	lea r8, [rsp+32]
	mul r9
	mov rax, rdi
	sub r8, rcx
	shr rdx, 3
	lea rsi, [rdx+rdx*4]
	add rsi, rsi
	sub rax, rsi
	add eax, 48
	mov byte [rcx], al
	mov rax, rdi
	mov rdi, rdx
	mov rdx, rcx
	sub rcx, 1
	cmp rax, 9
	ja .L2
	lea rax, [rsp+32]
	mov edi, 1
	sub rdx, rax
	xor eax, eax
	lea rsi, [rsp+32+rdx]
	mov rdx, r8
	mov rax, 1
	syscall
	add rsp, 40
	ret
func_syscall0:
	mov rax, [rsp+8]
	syscall
	ret
func_syscall1:
	mov rax, [rsp+8]
	mov rdi, [rsp+16]
	syscall
	ret
func_syscall2:
	mov rax, [rsp+8]
	mov rdi, [rsp+16]
	mov rsi, [rsp+24]
	syscall
	ret
func_syscall3:
	mov rax, [rsp+8]
	mov rdi, [rsp+16]
	mov rsi, [rsp+24]
	mov rdx, [rsp+32]
	syscall
	ret
func_syscall4:
	mov rax, [rsp+8]
	mov rdi, [rsp+16]
	mov rsi, [rsp+24]
	mov rdx, [rsp+32]
	mov rcx, [rsp+40]
	syscall
	ret
func_syscall5:
	mov rax, [rsp+8]
	mov rdi, [rsp+16]
	mov rsi, [rsp+24]
	mov rdx, [rsp+32]
	mov rcx, [rsp+40]
	mov r8, [rsp+48]
	syscall
	ret
func_syscall6:
	mov rax, [rsp+8]
	mov rdi, [rsp+16]
	mov rsi, [rsp+24]
	mov rdx, [rsp+32]
	mov rcx, [rsp+40]
	mov r8, [rsp+48]
	mov r9, [rsp+56]
	syscall
	ret
func_fork:
	mov rdi, [rsp+8]
	mov rax, 57
	syscall
	ret
func_sqrt:
	movsd xmm0, [rsp+8]
	sqrtsd xmm0, xmm0
	ret
section .bss
	gvars: resb 1073742376
section .data
	gs_0: db 58,32,0
	gs_1: db 58,32,0
	gs_2: db 97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,0
	gs_3: db 109,97,108,108,111,99,58,32,111,117,116,32,111,102,32,109,101,109,111,114,121,46,32,111,110,108,121,32,49,103,98,32,97,118,97,105,108,97,98,108,101,0
	gs_4: db 115,116,100,47,99,111,109,109,111,110,46,99,117,112,58,51,48,55,58,49,51,0
	gs_5: db 91,43,93,0
	gs_6: db 32,0
	gs_7: db 10,0
	gs_8: db 69,114,114,111,114,32,105,110,32,101,120,101,99,118,101,40,41,0
	gs_9: db 115,116,100,47,99,111,109,109,111,110,46,99,117,112,58,51,51,56,58,49,51,0
	gs_10: db 69,114,114,111,114,32,105,110,32,119,97,105,116,40,41,0
	gs_11: db 115,116,100,47,99,111,109,109,111,110,46,99,117,112,58,51,52,51,58,49,51,0
	gs_12: db 67,104,105,108,100,32,100,105,100,32,110,111,116,32,101,120,105,116,32,110,111,114,109,97,108,108,121,0
	gs_13: db 115,116,100,47,99,111,109,109,111,110,46,99,117,112,58,51,52,54,58,49,51,0
	gs_14: db 115,116,100,47,99,111,109,109,111,110,46,99,117,112,58,51,53,48,58,49,52,0
	gs_15: db 58,32,67,104,105,108,100,32,101,120,105,116,101,100,32,119,105,116,104,32,110,111,110,45,122,101,114,111,32,115,116,97,116,117,115,58,32,40,0
	gs_16: db 41,0
	gs_17: db 85,110,107,110,111,119,110,32,102,105,108,101,32,111,112,101,110,32,109,111,100,101,0
	gs_18: db 115,116,100,47,102,105,108,101,46,99,117,112,58,49,55,58,51,49,0
	gs_19: db 67,111,117,108,100,32,110,111,116,32,111,112,101,110,32,102,105,108,101,58,32,0
	gs_20: db 115,116,100,47,102,105,108,101,46,99,117,112,58,50,51,58,49,52,0
	gs_21: db 67,111,117,108,100,32,110,111,116,32,119,114,105,116,101,32,116,111,32,102,105,108,101,58,32,0
	gs_22: db 115,116,100,47,102,105,108,101,46,99,117,112,58,51,50,58,49,56,0
	gs_23: db 67,111,117,108,100,32,110,111,116,32,114,101,97,100,32,102,114,111,109,32,102,105,108,101,58,32,0
	gs_24: db 115,116,100,47,102,105,108,101,46,99,117,112,58,53,49,58,49,52,0
	gs_25: db 67,111,117,108,100,32,110,111,116,32,115,101,101,107,32,105,110,32,102,105,108,101,58,32,0
	gs_26: db 115,116,100,47,102,105,108,101,46,99,117,112,58,55,56,58,49,52,0
	gs_27: db 67,111,117,108,100,32,110,111,116,32,109,97,112,32,102,105,108,101,58,32,0
	gs_28: db 115,116,100,47,102,105,108,101,46,99,117,112,58,57,52,58,49,52,0
	gs_29: db 84,79,75,69,78,95,65,77,80,69,82,83,65,78,68,0
	gs_30: db 84,79,75,69,78,95,65,78,68,0
	gs_31: db 84,79,75,69,78,95,65,83,83,73,71,78,0
	gs_32: db 84,79,75,69,78,95,66,65,82,0
	gs_33: db 84,79,75,69,78,95,67,65,82,69,84,0
	gs_34: db 84,79,75,69,78,95,67,72,65,82,76,73,84,0
	gs_35: db 84,79,75,69,78,95,67,76,79,83,69,95,66,82,65,67,69,0
	gs_36: db 84,79,75,69,78,95,67,76,79,83,69,95,66,82,65,67,75,69,84,0
	gs_37: db 84,79,75,69,78,95,67,76,79,83,69,95,80,65,82,69,78,0
	gs_38: db 84,79,75,69,78,95,67,79,76,79,78,0
	gs_39: db 84,79,75,69,78,95,67,79,76,79,78,67,79,76,79,78,0
	gs_40: db 84,79,75,69,78,95,67,79,77,77,65,0
	gs_41: db 84,79,75,69,78,95,68,79,84,0
	gs_42: db 84,79,75,69,78,95,69,79,70,0
	gs_43: db 84,79,75,69,78,95,69,81,0
	gs_44: db 84,79,75,69,78,95,69,88,67,76,65,77,65,84,73,79,78,0
	gs_45: db 84,79,75,69,78,95,71,69,81,0
	gs_46: db 84,79,75,69,78,95,71,84,0
	gs_47: db 84,79,75,69,78,95,73,68,69,78,84,73,70,73,69,82,0
	gs_48: db 84,79,75,69,78,95,70,76,79,65,84,76,73,84,0
	gs_49: db 84,79,75,69,78,95,73,78,84,76,73,84,0
	gs_50: db 84,79,75,69,78,95,76,69,81,0
	gs_51: db 84,79,75,69,78,95,76,83,72,73,70,84,0
	gs_52: db 84,79,75,69,78,95,76,84,0
	gs_53: db 84,79,75,69,78,95,77,73,78,85,83,0
	gs_54: db 84,79,75,69,78,95,77,73,78,85,83,69,81,85,65,76,83,0
	gs_55: db 84,79,75,69,78,95,77,73,78,85,83,77,73,78,85,83,0
	gs_56: db 84,79,75,69,78,95,78,69,81,0
	gs_57: db 84,79,75,69,78,95,79,80,69,78,95,66,82,65,67,69,0
	gs_58: db 84,79,75,69,78,95,79,80,69,78,95,66,82,65,67,75,69,84,0
	gs_59: db 84,79,75,69,78,95,79,80,69,78,95,80,65,82,69,78,0
	gs_60: db 84,79,75,69,78,95,79,82,0
	gs_61: db 84,79,75,69,78,95,80,69,82,67,69,78,84,0
	gs_62: db 84,79,75,69,78,95,80,76,85,83,0
	gs_63: db 84,79,75,69,78,95,80,76,85,83,69,81,85,65,76,83,0
	gs_64: db 84,79,75,69,78,95,80,76,85,83,80,76,85,83,0
	gs_65: db 84,79,75,69,78,95,81,85,69,83,84,73,79,78,0
	gs_66: db 84,79,75,69,78,95,82,83,72,73,70,84,0
	gs_67: db 84,79,75,69,78,95,83,69,77,73,67,79,76,79,78,0
	gs_68: db 84,79,75,69,78,95,83,76,65,83,72,0
	gs_69: db 84,79,75,69,78,95,83,84,65,82,0
	gs_70: db 84,79,75,69,78,95,83,84,82,73,78,71,76,73,84,0
	gs_71: db 84,79,75,69,78,95,84,73,76,68,69,0
	gs_72: db 84,79,75,69,78,95,88,79,82,0
	gs_73: db 84,79,75,69,78,95,66,82,69,65,75,0
	gs_74: db 84,79,75,69,78,95,67,65,83,69,0
	gs_75: db 84,79,75,69,78,95,67,72,65,82,0
	gs_76: db 84,79,75,69,78,95,67,79,78,83,84,0
	gs_77: db 84,79,75,69,78,95,68,69,70,65,85,76,84,0
	gs_78: db 84,79,75,69,78,95,69,78,85,77,0
	gs_79: db 84,79,75,69,78,95,69,76,83,69,0
	gs_80: db 84,79,75,69,78,95,68,69,70,69,82,0
	gs_81: db 84,79,75,69,78,95,70,54,52,0
	gs_82: db 84,79,75,69,78,95,70,78,0
	gs_83: db 84,79,75,69,78,95,70,79,82,0
	gs_84: db 84,79,75,69,78,95,73,70,0
	gs_85: db 84,79,75,69,78,95,73,78,84,0
	gs_86: db 84,79,75,69,78,95,73,56,0
	gs_87: db 84,79,75,69,78,95,73,49,54,0
	gs_88: db 84,79,75,69,78,95,73,51,50,0
	gs_89: db 84,79,75,69,78,95,73,54,52,0
	gs_90: db 84,79,75,69,78,95,76,69,84,0
	gs_91: db 84,79,75,69,78,95,77,69,84,72,79,68,0
	gs_92: db 84,79,75,69,78,95,82,69,84,85,82,78,0
	gs_93: db 84,79,75,69,78,95,83,73,90,69,79,70,0
	gs_94: db 84,79,75,69,78,95,83,84,82,85,67,84,0
	gs_95: db 84,79,75,69,78,95,83,87,73,84,67,72,0
	gs_96: db 84,79,75,69,78,95,85,78,73,79,78,0
	gs_97: db 84,79,75,69,78,95,86,79,73,68,0
	gs_98: db 84,79,75,69,78,95,87,72,73,76,69,0
	gs_99: db 84,79,75,69,78,95,73,77,80,79,82,84,0
	gs_100: db 10,85,110,107,110,111,119,110,32,116,111,107,101,110,32,116,121,112,101,32,105,110,32,116,111,107,101,110,95,116,121,112,101,95,116,111,95,115,116,114,105,110,103,58,32,0
	gs_101: db 98,114,101,97,107,0
	gs_102: db 99,97,115,101,0
	gs_103: db 99,104,97,114,0
	gs_104: db 99,111,110,115,116,0
	gs_105: db 100,101,102,97,117,108,116,0
	gs_106: db 101,110,117,109,0
	gs_107: db 101,108,115,101,0
	gs_108: db 100,101,102,101,114,0
	gs_109: db 102,54,52,0
	gs_110: db 102,110,0
	gs_111: db 102,111,114,0
	gs_112: db 105,102,0
	gs_113: db 105,110,116,0
	gs_114: db 105,56,0
	gs_115: db 105,49,54,0
	gs_116: db 105,51,50,0
	gs_117: db 105,54,52,0
	gs_118: db 108,101,116,0
	gs_119: db 109,101,116,104,111,100,0
	gs_120: db 114,101,116,117,114,110,0
	gs_121: db 115,105,122,101,111,102,0
	gs_122: db 115,116,114,117,99,116,0
	gs_123: db 115,119,105,116,99,104,0
	gs_124: db 117,110,105,111,110,0
	gs_125: db 118,111,105,100,0
	gs_126: db 119,104,105,108,101,0
	gs_127: db 105,109,112,111,114,116,0
	gs_128: db 85,110,107,110,111,119,110,32,107,101,121,119,111,114,100,32,105,110,32,107,101,121,119,111,114,100,95,116,111,95,115,116,114,105,110,103,58,32,0
	gs_129: db 58,32,0
	gs_130: db 78,111,116,101,58,32,69,114,114,111,114,32,104,97,112,112,101,110,101,100,32,104,101,114,101,58,32,0
	gs_131: db 0
	gs_132: db 86,101,99,116,111,114,58,58,97,116,58,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,0
	gs_133: db 115,116,100,47,118,101,99,116,111,114,46,99,117,112,58,50,56,58,49,51,0
	gs_134: db 86,101,99,116,111,114,32,105,115,32,101,109,112,116,121,44,32,110,111,116,104,105,110,103,32,116,111,32,112,111,112,46,0
	gs_135: db 115,116,100,47,118,101,99,116,111,114,46,99,117,112,58,52,54,58,49,51,0
	gs_136: db 86,101,99,116,111,114,32,105,115,32,101,109,112,116,121,44,32,110,111,116,104,105,110,103,32,116,111,32,114,101,116,117,114,110,46,0
	gs_137: db 115,116,100,47,118,101,99,116,111,114,46,99,117,112,58,53,52,58,49,51,0
	gs_138: db 85,110,107,110,111,119,110,32,116,121,112,101,32,105,110,32,115,105,122,101,95,102,111,114,95,116,121,112,101,0
	gs_139: db 99,111,109,112,105,108,101,114,47,116,121,112,101,115,46,99,117,112,58,54,52,58,57,0
	gs_140: db 42,0
	gs_141: db 91,93,0
	gs_142: db 105,110,116,0
	gs_143: db 105,56,0
	gs_144: db 105,49,54,0
	gs_145: db 105,51,50,0
	gs_146: db 105,54,52,0
	gs_147: db 102,54,52,0
	gs_148: db 99,104,97,114,0
	gs_149: db 118,111,105,100,0
	gs_150: db 97,110,121,0
	gs_151: db 99,114,101,97,116,101,95,116,121,112,101,95,115,116,114,105,110,103,58,32,117,110,107,110,111,119,110,32,116,121,112,101,0
	gs_152: db 99,111,109,112,105,108,101,114,47,116,121,112,101,115,46,99,117,112,58,49,52,49,58,49,55,0
	gs_153: db 67,97,110,110,111,116,32,99,111,110,118,101,114,116,32,110,111,110,45,110,117,109,101,114,105,99,32,116,121,112,101,32,116,111,32,105,110,116,58,32,0
	gs_154: db 99,111,109,112,105,108,101,114,47,97,115,116,46,99,117,112,58,49,57,52,58,49,52,0
	gs_155: db 65,83,84,95,78,69,71,0
	gs_156: db 65,83,84,95,78,79,84,0
	gs_157: db 65,83,84,95,66,87,73,78,86,0
	gs_158: db 65,83,84,95,65,68,68,82,79,70,0
	gs_159: db 65,83,84,95,68,69,82,69,70,0
	gs_160: db 65,83,84,95,80,76,85,83,0
	gs_161: db 65,83,84,95,77,73,78,85,83,0
	gs_162: db 65,83,84,95,77,85,76,0
	gs_163: db 65,83,84,95,68,73,86,0
	gs_164: db 65,83,84,95,77,79,68,0
	gs_165: db 65,83,84,95,76,83,72,73,70,84,0
	gs_166: db 65,83,84,95,82,83,72,73,70,84,0
	gs_167: db 65,83,84,95,65,78,68,0
	gs_168: db 65,83,84,95,66,87,65,78,68,0
	gs_169: db 65,83,84,95,79,82,0
	gs_170: db 65,83,84,95,66,87,79,82,0
	gs_171: db 65,83,84,95,88,79,82,0
	gs_172: db 65,83,84,95,69,81,0
	gs_173: db 65,83,84,95,78,69,81,0
	gs_174: db 65,83,84,95,76,84,0
	gs_175: db 65,83,84,95,76,69,81,0
	gs_176: db 65,83,84,95,71,84,0
	gs_177: db 65,83,84,95,71,69,81,0
	gs_178: db 65,83,84,95,65,83,83,73,71,78,0
	gs_179: db 65,83,84,95,77,69,77,66,69,82,0
	gs_180: db 65,83,84,95,76,73,84,69,82,65,76,0
	gs_181: db 65,83,84,95,67,79,78,83,84,65,78,84,0
	gs_182: db 65,83,84,95,67,79,78,86,69,82,84,0
	gs_183: db 65,83,84,95,70,85,78,67,67,65,76,76,0
	gs_184: db 65,83,84,95,67,79,78,68,73,84,73,79,78,65,76,0
	gs_185: db 65,83,84,95,73,70,0
	gs_186: db 65,83,84,95,87,72,73,76,69,0
	gs_187: db 65,83,84,95,68,69,70,69,82,0
	gs_188: db 65,83,84,95,70,79,82,0
	gs_189: db 65,83,84,95,83,87,73,84,67,72,0
	gs_190: db 65,83,84,95,67,65,83,69,0
	gs_191: db 65,83,84,95,86,65,82,68,69,67,76,0
	gs_192: db 65,83,84,95,76,79,67,65,76,95,86,65,82,0
	gs_193: db 65,83,84,95,71,76,79,66,65,76,95,86,65,82,0
	gs_194: db 65,83,84,95,82,69,84,85,82,78,0
	gs_195: db 65,83,84,95,70,85,78,67,0
	gs_196: db 65,83,84,95,66,82,69,65,75,0
	gs_197: db 65,83,84,95,66,85,73,76,84,73,78,0
	gs_198: db 65,83,84,95,80,82,79,71,82,65,77,0
	gs_199: db 65,83,84,95,66,76,79,67,75,0
	gs_200: db 85,110,107,110,111,119,110,32,110,111,100,101,32,116,121,112,101,32,105,110,32,110,111,100,101,95,116,121,112,101,95,116,111,95,115,116,114,105,110,103,58,32,0
	gs_201: db 85,110,107,110,111,119,110,32,116,111,107,101,110,32,105,110,32,98,105,110,97,114,121,95,116,111,107,101,110,95,116,111,95,111,112,58,32,0
	gs_202: db 85,110,107,110,111,119,110,32,108,105,116,101,114,97,108,32,116,121,112,101,32,105,110,32,100,117,109,112,95,97,115,116,0
	gs_203: db 99,111,109,112,105,108,101,114,47,97,115,116,46,99,117,112,58,51,54,55,58,49,55,0
	gs_204: db 102,117,110,99,32,0
	gs_205: db 40,41,10,0
	gs_206: db 108,101,116,32,0
	gs_207: db 58,32,0
	gs_208: db 32,61,10,0
	gs_209: db 40,0
	gs_210: db 41,0
	gs_211: db 99,97,115,101,32,0
	gs_212: db 58,0
	gs_213: db 83,87,73,84,67,72,0
	gs_214: db 100,101,102,97,117,108,116,58,0
	gs_215: db 80,101,114,102,111,114,109,105,110,103,32,105,110,118,97,108,105,100,32,117,110,97,114,121,32,111,112,101,114,97,116,105,111,110,32,111,110,32,115,116,114,117,99,116,32,116,121,112,101,0
	gs_216: db 99,111,109,112,105,108,101,114,47,97,115,116,46,99,117,112,58,52,51,54,58,49,55,0
	gs_217: db 80,101,114,102,111,114,109,105,110,103,32,105,110,118,97,108,105,100,32,117,110,97,114,121,32,111,112,101,114,97,116,105,111,110,32,111,110,32,102,108,111,97,116,32,116,121,112,101,58,32,0
	gs_218: db 99,111,109,112,105,108,101,114,47,97,115,116,46,99,117,112,58,52,52,48,58,50,50,0
	gs_219: db 67,97,110,110,111,116,32,100,101,114,101,102,101,114,101,110,99,101,32,110,111,110,45,112,111,105,110,116,101,114,32,116,121,112,101,0
	gs_220: db 99,111,109,112,105,108,101,114,47,97,115,116,46,99,117,112,58,52,53,50,58,50,49,0
	gs_221: db 67,97,110,110,111,116,32,110,101,103,97,116,101,32,110,111,110,45,105,110,116,101,103,101,114,32,116,121,112,101,0
	gs_222: db 99,111,109,112,105,108,101,114,47,97,115,116,46,99,117,112,58,52,53,57,58,50,49,0
	gs_223: db 80,101,114,102,111,114,109,105,110,103,32,105,110,118,97,108,105,100,32,98,105,110,97,114,121,32,111,112,101,114,97,116,105,111,110,32,111,110,32,115,116,114,117,99,116,32,116,121,112,101,0
	gs_224: db 99,111,109,112,105,108,101,114,47,97,115,116,46,99,117,112,58,52,55,51,58,49,55,0
	gs_225: db 67,97,110,110,111,116,32,97,100,100,32,110,111,110,45,105,110,116,101,103,101,114,32,116,111,32,112,111,105,110,116,101,114,0
	gs_226: db 99,111,109,112,105,108,101,114,47,97,115,116,46,99,117,112,58,52,56,48,58,50,53,0
	gs_227: db 67,97,110,110,111,116,32,97,100,100,32,110,111,110,45,105,110,116,101,103,101,114,32,116,111,32,112,111,105,110,116,101,114,0
	gs_228: db 99,111,109,112,105,108,101,114,47,97,115,116,46,99,117,112,58,52,57,48,58,50,53,0
	gs_229: db 108,104,115,58,32,0
	gs_230: db 114,104,115,58,32,0
	gs_231: db 73,110,99,111,109,112,97,116,105,98,108,101,32,116,121,112,101,115,32,102,111,114,32,97,100,100,105,116,105,111,110,0
	gs_232: db 99,111,109,112,105,108,101,114,47,97,115,116,46,99,117,112,58,53,48,54,58,50,49,0
	gs_233: db 67,97,110,110,111,116,32,115,117,98,116,114,97,99,116,32,112,111,105,110,116,101,114,115,32,111,102,32,100,105,102,102,101,114,101,110,116,32,116,121,112,101,115,0
	gs_234: db 99,111,109,112,105,108,101,114,47,97,115,116,46,99,117,112,58,53,50,56,58,50,53,0
	gs_235: db 67,97,110,110,111,116,32,115,117,98,116,114,97,99,116,32,110,111,110,45,105,110,116,101,103,101,114,32,116,121,112,101,115,0
	gs_236: db 99,111,109,112,105,108,101,114,47,97,115,116,46,99,117,112,58,53,52,49,58,50,49,0
	gs_237: db 67,97,110,110,111,116,32,109,111,100,117,108,111,32,102,108,111,97,116,115,0
	gs_238: db 99,111,109,112,105,108,101,114,47,97,115,116,46,99,117,112,58,53,52,56,58,50,53,0
	gs_239: db 67,97,110,110,111,116,32,100,111,32,111,112,101,114,97,116,105,111,110,32,110,111,110,45,105,110,116,101,103,101,114,32,116,121,112,101,115,58,0
	gs_240: db 99,111,109,112,105,108,101,114,47,97,115,116,46,99,117,112,58,53,53,53,58,50,50,0
	gs_241: db 42,0
	gs_242: db 91,93,0
	gs_243: db 105,110,116,0
	gs_244: db 99,104,97,114,0
	gs_245: db 118,111,105,100,0
	gs_246: db 97,110,121,0
	gs_247: db 115,116,114,117,99,116,32,0
	gs_248: db 117,110,105,111,110,32,0
	gs_249: db 32,123,0
	gs_250: db 32,32,0
	gs_251: db 45,32,0
	gs_252: db 32,40,0
	gs_253: db 41,58,32,0
	gs_254: db 10,0
	gs_255: db 32,32,0
	gs_256: db 125,0
	gs_257: db 99,111,109,112,111,117,110,100,95,112,117,115,104,95,102,105,101,108,100,58,32,110,111,116,32,97,32,99,111,109,112,111,117,110,100,32,116,121,112,101,0
	gs_258: db 99,111,109,112,105,108,101,114,47,97,115,116,46,99,117,112,58,54,50,53,58,49,51,0
	gs_259: db 60,97,110,111,110,62,0
	gs_260: db 118,97,108,0
	gs_261: db 97,114,103,0
	gs_262: db 83,89,83,95,101,120,101,99,118,101,0
	gs_263: db 83,89,83,95,114,101,97,100,0
	gs_264: db 83,89,83,95,119,114,105,116,101,0
	gs_265: db 83,89,83,95,101,120,105,116,0
	gs_266: db 83,89,83,95,111,112,101,110,0
	gs_267: db 83,89,83,95,108,115,101,101,107,0
	gs_268: db 83,89,83,95,111,112,101,110,97,116,0
	gs_269: db 83,89,83,95,99,108,111,115,101,0
	gs_270: db 83,89,83,95,102,111,114,107,0
	gs_271: db 83,89,83,95,119,97,105,116,52,0
	gs_272: db 83,89,83,95,109,109,97,112,0
	gs_273: db 83,69,69,75,95,83,69,84,0
	gs_274: db 83,69,69,75,95,67,85,82,0
	gs_275: db 83,69,69,75,95,69,78,68,0
	gs_276: db 79,95,82,68,79,78,76,89,0
	gs_277: db 79,95,87,82,79,78,76,89,0
	gs_278: db 79,95,82,68,87,82,0
	gs_279: db 79,95,67,82,69,65,84,0
	gs_280: db 79,95,69,88,67,76,0
	gs_281: db 79,95,84,82,85,78,67,0
	gs_282: db 65,84,95,70,68,67,87,68,0
	gs_283: db 80,82,79,84,95,82,69,65,68,0
	gs_284: db 80,82,79,84,95,87,82,73,84,69,0
	gs_285: db 80,82,79,84,95,69,88,69,67,0
	gs_286: db 80,82,79,84,95,78,79,78,69,0
	gs_287: db 77,65,80,95,83,72,65,82,69,68,0
	gs_288: db 77,65,80,95,80,82,73,86,65,84,69,0
	gs_289: db 77,65,80,95,65,78,79,78,89,77,79,85,83,0
	gs_290: db 77,65,80,95,70,73,88,69,68,0
	gs_291: db 77,65,80,95,70,65,73,76,69,68,0
	gs_292: db 79,83,95,73,83,95,77,65,67,79,83,0
	gs_293: db 79,83,95,73,83,95,76,73,78,85,88,0
	gs_294: db 112,114,105,110,116,0
	gs_295: db 118,97,108,0
	gs_296: db 115,113,114,116,0
	gs_297: db 118,97,108,0
	gs_298: db 102,111,114,107,0
	gs_299: db 115,121,115,99,97,108,108,48,0
	gs_300: db 115,121,115,99,97,108,108,49,0
	gs_301: db 115,121,115,99,97,108,108,50,0
	gs_302: db 115,121,115,99,97,108,108,51,0
	gs_303: db 115,121,115,99,97,108,108,52,0
	gs_304: db 115,121,115,99,97,108,108,53,0
	gs_305: db 115,121,115,99,97,108,108,54,0
	gs_306: db 115,121,115,99,97,108,108,55,0
	gs_307: db 102,117,110,99,95,112,114,105,110,116,58,10,0
	gs_308: db 9,109,111,118,32,114,100,105,44,32,91,114,115,112,43,56,93,10,0
	gs_309: db 9,109,111,118,32,114,57,44,32,45,51,54,56,57,51,52,56,56,49,52,55,52,49,57,49,48,51,50,51,10,0
	gs_310: db 9,115,117,98,32,114,115,112,44,32,52,48,10,0
	gs_311: db 9,109,111,118,32,98,121,116,101,32,91,114,115,112,43,51,49,93,44,32,49,48,10,0
	gs_312: db 9,108,101,97,32,114,99,120,44,32,91,114,115,112,43,51,48,93,10,0
	gs_313: db 9,109,111,118,32,113,119,111,114,100,32,114,98,120,44,32,48,10,0
	gs_314: db 46,76,50,58,10,0
	gs_315: db 9,109,111,118,32,114,97,120,44,32,114,100,105,10,0
	gs_316: db 9,108,101,97,32,114,56,44,32,91,114,115,112,43,51,50,93,10,0
	gs_317: db 9,109,117,108,32,114,57,10,0
	gs_318: db 9,109,111,118,32,114,97,120,44,32,114,100,105,10,0
	gs_319: db 9,115,117,98,32,114,56,44,32,114,99,120,10,0
	gs_320: db 9,115,104,114,32,114,100,120,44,32,51,10,0
	gs_321: db 9,108,101,97,32,114,115,105,44,32,91,114,100,120,43,114,100,120,42,52,93,10,0
	gs_322: db 9,97,100,100,32,114,115,105,44,32,114,115,105,10,0
	gs_323: db 9,115,117,98,32,114,97,120,44,32,114,115,105,10,0
	gs_324: db 9,97,100,100,32,101,97,120,44,32,52,56,10,0
	gs_325: db 9,109,111,118,32,98,121,116,101,32,91,114,99,120,93,44,32,97,108,10,0
	gs_326: db 9,109,111,118,32,114,97,120,44,32,114,100,105,10,0
	gs_327: db 9,109,111,118,32,114,100,105,44,32,114,100,120,10,0
	gs_328: db 9,109,111,118,32,114,100,120,44,32,114,99,120,10,0
	gs_329: db 9,115,117,98,32,114,99,120,44,32,49,10,0
	gs_330: db 9,99,109,112,32,114,97,120,44,32,57,10,0
	gs_331: db 9,106,97,32,46,76,50,10,0
	gs_332: db 9,108,101,97,32,114,97,120,44,32,91,114,115,112,43,51,50,93,10,0
	gs_333: db 9,109,111,118,32,101,100,105,44,32,49,10,0
	gs_334: db 9,115,117,98,32,114,100,120,44,32,114,97,120,10,0
	gs_335: db 9,120,111,114,32,101,97,120,44,32,101,97,120,10,0
	gs_336: db 9,108,101,97,32,114,115,105,44,32,91,114,115,112,43,51,50,43,114,100,120,93,10,0
	gs_337: db 9,109,111,118,32,114,100,120,44,32,114,56,10,0
	gs_338: db 9,97,100,100,32,114,115,112,44,32,52,48,10,0
	gs_339: db 9,114,101,116,10,0
	gs_340: db 114,97,120,0
	gs_341: db 114,100,105,0
	gs_342: db 114,115,105,0
	gs_343: db 114,100,120,0
	gs_344: db 114,99,120,0
	gs_345: db 114,56,0
	gs_346: db 114,57,0
	gs_347: db 114,49,48,0
	gs_348: db 114,49,49,0
	gs_349: db 114,49,50,0
	gs_350: db 102,117,110,99,95,115,121,115,99,97,108,108,0
	gs_351: db 58,10,0
	gs_352: db 9,109,111,118,32,0
	gs_353: db 44,32,91,114,115,112,43,0
	gs_354: db 93,10,0
	gs_355: db 9,115,121,115,99,97,108,108,10,0
	gs_356: db 9,106,110,99,32,46,76,50,10,0
	gs_357: db 9,110,101,103,32,114,97,120,10,0
	gs_358: db 46,76,50,58,10,0
	gs_359: db 9,114,101,116,10,0
	gs_360: db 102,117,110,99,95,102,111,114,107,58,10,0
	gs_361: db 9,109,111,118,32,114,100,105,44,32,91,114,115,112,43,56,93,10,0
	gs_362: db 9,109,111,118,32,114,97,120,44,32,0
	gs_363: db 10,0
	gs_364: db 9,115,121,115,99,97,108,108,10,0
	gs_365: db 9,99,109,112,32,114,100,120,44,32,48,10,0
	gs_366: db 9,106,101,32,46,76,49,10,0
	gs_367: db 9,109,111,118,32,114,97,120,44,32,48,10,0
	gs_368: db 46,76,49,58,10,0
	gs_369: db 9,114,101,116,10,0
	gs_370: db 102,117,110,99,95,115,113,114,116,58,10,0
	gs_371: db 9,109,111,118,115,100,32,120,109,109,48,44,32,91,114,115,112,43,56,93,10,0
	gs_372: db 9,115,113,114,116,115,100,32,120,109,109,48,44,32,120,109,109,48,10,0
	gs_373: db 9,114,101,116,10,0
	gs_374: db 99,111,109,112,105,108,101,114,47,108,101,120,101,114,46,99,117,112,58,56,56,58,49,56,0
	gs_375: db 58,32,85,110,107,110,111,119,110,32,101,115,99,97,112,101,32,99,104,97,114,58,32,0
	gs_376: db 32,40,0
	gs_377: db 41,0
	gs_378: db 104,101,114,101,0
	gs_379: db 58,0
	gs_380: db 58,0
	gs_381: db 69,79,70,32,119,104,105,108,101,32,112,97,114,115,105,110,103,32,115,116,114,105,110,103,32,108,105,116,101,114,97,108,0
	gs_382: db 99,111,109,112,105,108,101,114,47,108,101,120,101,114,46,99,117,112,58,51,48,55,58,51,51,0
	gs_383: db 77,97,108,102,111,114,109,101,100,32,99,104,97,114,97,99,116,101,114,32,108,105,116,101,114,97,108,0
	gs_384: db 99,111,109,112,105,108,101,114,47,108,101,120,101,114,46,99,117,112,58,51,52,49,58,51,51,0
	gs_385: db 99,111,109,112,105,108,101,114,47,108,101,120,101,114,46,99,117,112,58,51,52,55,58,50,50,0
	gs_386: db 58,32,85,110,107,110,111,119,110,32,99,104,97,114,97,99,116,101,114,32,105,110,32,108,101,120,101,114,95,110,101,120,116,58,32,39,0
	gs_387: db 39,0
	gs_388: db 58,32,69,120,112,101,99,116,101,100,32,0
	gs_389: db 32,98,117,116,32,103,111,116,32,0
	gs_390: db 67,111,110,115,116,97,110,116,32,101,120,112,114,101,115,115,105,111,110,115,32,99,97,110,32,111,110,108,121,32,99,111,110,116,97,105,110,32,105,110,116,101,103,101,114,32,108,105,116,101,114,97,108,115,47,99,111,110,115,116,97,110,116,115,46,0
	gs_391: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,49,49,54,58,49,55,0
	gs_392: db 85,110,115,117,112,112,111,114,116,101,100,32,98,105,110,97,114,121,32,111,112,101,114,97,116,111,114,32,105,110,32,99,111,110,115,116,97,110,116,32,101,120,112,114,101,115,115,105,111,110,46,0
	gs_393: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,49,51,50,58,49,55,0
	gs_394: db 85,110,115,117,112,112,111,114,116,101,100,32,99,111,110,115,116,97,110,116,32,101,120,112,114,101,115,115,105,111,110,46,0
	gs_395: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,49,51,55,58,49,51,0
	gs_396: db 73,100,101,110,116,105,102,105,101,114,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,58,32,0
	gs_397: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,49,53,53,58,49,56,0
	gs_398: db 69,120,112,101,99,116,101,100,32,39,105,110,116,39,32,116,121,112,101,32,102,111,114,32,99,111,110,115,116,97,110,116,0
	gs_399: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,49,54,51,58,50,49,0
	gs_400: db 85,110,101,120,112,101,99,116,101,100,32,116,111,107,101,110,32,105,110,32,112,97,114,115,101,95,108,105,116,101,114,97,108,58,32,0
	gs_401: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,49,57,54,58,50,50,0
	gs_402: db 85,110,101,120,112,101,99,116,101,100,32,116,111,107,101,110,32,105,110,32,112,97,114,115,101,95,116,121,112,101,58,32,0
	gs_403: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,50,49,55,58,50,54,0
	gs_404: db 85,110,107,110,111,119,110,32,116,111,107,101,110,32,105,110,32,112,97,114,115,101,95,116,121,112,101,58,32,0
	gs_405: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,50,50,48,58,50,54,0
	gs_406: db 70,117,110,99,116,105,111,110,32,99,97,108,108,32,97,114,103,117,109,101,110,116,32,99,111,117,110,116,32,109,105,115,109,97,116,99,104,58,32,0
	gs_407: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,50,55,56,58,49,56,0
	gs_408: db 70,117,110,99,116,105,111,110,32,97,114,103,117,109,101,110,116,32,116,121,112,101,32,109,105,115,109,97,116,99,104,58,32,0
	gs_409: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,50,56,55,58,50,50,0
	gs_410: db 85,110,107,110,111,119,110,32,105,100,101,110,116,105,102,105,101,114,32,105,110,32,112,97,114,115,101,95,105,100,101,110,116,105,102,105,101,114,58,32,0
	gs_411: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,51,51,51,58,49,52,0
	gs_412: db 67,97,110,110,111,116,32,105,110,99,114,101,109,101,110,116,32,110,111,110,45,108,118,97,108,117,101,0
	gs_413: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,51,53,57,58,50,49,0
	gs_414: db 67,97,110,110,111,116,32,100,101,99,114,101,109,101,110,116,32,110,111,110,45,108,118,97,108,117,101,0
	gs_415: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,51,55,51,58,50,49,0
	gs_416: db 67,97,110,110,111,116,32,116,97,107,101,32,97,100,100,114,101,115,115,32,111,102,32,110,111,110,45,108,118,97,108,117,101,0
	gs_417: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,52,49,49,58,50,49,0
	gs_418: db 67,97,110,110,111,116,32,100,101,114,101,102,101,114,101,110,99,101,32,110,111,110,45,112,111,105,110,116,101,114,32,116,121,112,101,0
	gs_419: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,52,49,56,58,50,49,0
	gs_420: db 58,32,85,110,101,120,112,101,99,116,101,100,32,116,111,107,101,110,32,102,111,117,110,100,32,105,110,32,112,97,114,115,101,95,102,97,99,116,111,114,58,32,0
	gs_421: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,52,50,53,58,49,56,0
	gs_422: db 67,97,110,110,111,116,32,105,110,100,101,120,32,110,111,110,45,112,111,105,110,116,101,114,47,97,114,114,97,121,32,116,121,112,101,0
	gs_423: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,52,51,51,58,50,53,0
	gs_424: db 67,97,110,110,111,116,32,97,99,99,101,115,115,32,109,101,109,98,101,114,32,111,102,32,110,111,110,45,115,116,114,117,99,116,32,116,121,112,101,0
	gs_425: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,52,53,51,58,50,53,0
	gs_426: db 83,116,114,117,99,116,32,116,121,112,101,58,32,0
	gs_427: db 70,105,101,108,100,32,110,97,109,101,58,32,0
	gs_428: db 73,110,118,97,108,105,100,32,102,105,101,108,100,32,110,97,109,101,32,102,111,114,32,115,116,114,117,99,116,0
	gs_429: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,52,54,54,58,50,53,0
	gs_430: db 67,97,110,110,111,116,32,99,97,108,108,32,109,101,116,104,111,100,32,111,110,32,110,111,110,45,115,116,114,117,99,116,32,116,121,112,101,0
	gs_431: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,52,56,49,58,50,53,0
	gs_432: db 73,110,118,97,108,105,100,32,109,101,116,104,111,100,32,110,97,109,101,32,102,111,114,32,115,116,114,117,99,116,0
	gs_433: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,53,48,48,58,50,53,0
	gs_434: db 84,72,69,78,32,97,110,100,32,69,76,83,69,32,98,114,97,110,99,104,101,115,32,111,102,32,99,111,110,100,105,116,105,111,110,97,108,32,101,120,112,114,101,115,115,105,111,110,32,104,97,118,101,32,100,105,102,102,101,114,101,110,116,32,116,121,112,101,115,0
	gs_435: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,54,56,52,58,50,49,0
	gs_436: db 45,32,76,72,83,32,116,121,112,101,58,32,0
	gs_437: db 45,32,82,72,83,32,116,121,112,101,58,32,0
	gs_438: db 84,121,112,101,32,109,105,115,109,97,116,99,104,32,102,111,114,32,118,97,114,105,97,98,108,101,32,97,115,115,105,103,110,109,101,110,116,0
	gs_439: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,55,48,54,58,50,53,0
	gs_440: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,55,50,54,58,49,50,0
	gs_441: db 73,100,101,110,116,105,102,105,101,114,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,58,32,37,115,0
	gs_442: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,55,53,49,58,49,56,0
	gs_443: db 45,32,86,97,114,105,97,98,108,101,32,116,121,112,101,58,32,0
	gs_444: db 45,32,86,97,108,117,101,32,116,121,112,101,58,32,0
	gs_445: db 84,121,112,101,32,109,105,115,109,97,116,99,104,32,102,111,114,32,118,97,114,105,97,98,108,101,32,100,101,99,108,97,114,97,116,105,111,110,58,32,0
	gs_446: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,55,55,57,58,50,54,0
	gs_447: db 69,120,112,101,99,116,101,100,32,39,58,39,32,111,114,32,39,61,39,32,97,102,116,101,114,32,118,97,114,105,97,98,108,101,32,100,101,99,108,97,114,97,116,105,111,110,0
	gs_448: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,55,56,54,58,49,55,0
	gs_449: db 73,100,101,110,116,105,102,105,101,114,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,58,32,0
	gs_450: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,56,49,48,58,50,50,0
	gs_451: db 69,120,112,101,99,116,101,100,32,105,110,116,101,103,101,114,45,108,105,107,101,32,101,120,112,114,101,115,115,105,111,110,32,102,111,114,32,115,119,105,116,99,104,32,115,116,97,116,101,109,101,110,116,0
	gs_452: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,56,53,53,58,49,55,0
	gs_453: db 83,104,111,117,108,100,110,39,116,32,104,97,118,101,32,97,110,121,32,109,111,114,101,32,99,97,115,101,32,115,116,97,116,109,101,110,116,115,32,97,102,116,101,114,32,39,100,101,102,97,117,108,116,39,46,32,69,120,112,101,99,116,101,100,32,39,125,39,0
	gs_454: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,56,57,57,58,50,53,0
	gs_455: db 69,120,112,101,99,116,101,100,32,39,99,97,115,101,39,32,111,114,32,39,100,101,102,97,117,108,116,39,0
	gs_456: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,57,48,50,58,50,49,0
	gs_457: db 82,101,116,117,114,110,101,100,32,101,120,112,114,101,115,115,105,111,110,32,99,97,110,110,111,116,32,98,101,32,105,109,112,108,105,99,105,116,108,121,32,99,111,110,118,101,114,116,101,100,32,116,111,32,102,117,110,99,116,105,111,110,39,115,32,114,101,116,117,114,110,32,116,121,112,101,46,0
	gs_458: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,57,55,52,58,50,53,0
	gs_459: db 69,120,112,101,99,116,101,100,32,114,101,116,117,114,110,32,116,121,112,101,58,32,0
	gs_460: db 67,97,110,39,116,32,104,97,118,101,32,97,110,32,101,109,112,116,121,32,114,101,116,117,114,110,32,115,116,97,116,101,109,101,110,116,32,105,110,32,97,32,110,111,110,45,118,111,105,100,32,102,117,110,99,116,105,111,110,0
	gs_461: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,57,56,48,58,50,53,0
	gs_462: db 67,97,110,39,116,32,98,114,101,97,107,32,111,117,116,115,105,100,101,32,111,102,32,97,32,108,111,111,112,32,47,32,115,119,105,116,99,104,32,115,116,97,116,101,109,101,110,116,0
	gs_463: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,49,48,50,49,58,50,49,0
	gs_464: db 73,100,101,110,116,105,102,105,101,114,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,44,32,101,110,117,109,115,32,106,117,115,116,32,98,101,104,97,118,101,32,108,105,107,101,32,110,117,109,98,101,114,101,100,32,99,111,110,115,116,97,110,116,115,46,0
	gs_465: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,49,48,55,56,58,50,49,0
	gs_466: db 69,120,112,101,99,116,101,100,32,97,32,99,111,109,109,97,32,111,114,32,97,32,99,108,111,115,105,110,103,32,98,114,97,99,101,46,0
	gs_467: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,49,48,56,56,58,50,49,0
	gs_468: db 69,120,112,101,99,116,101,100,32,83,84,82,85,67,84,32,111,114,32,85,78,73,79,78,32,105,110,32,112,97,114,115,101,95,115,116,114,117,99,116,95,117,110,105,111,110,95,100,101,99,108,97,114,97,116,105,111,110,0
	gs_469: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,49,49,48,50,58,49,55,0
	gs_470: db 89,111,117,32,110,101,101,100,32,116,111,32,115,112,101,99,105,102,121,32,97,32,110,97,109,101,32,102,111,114,32,116,104,101,32,115,116,114,117,99,116,32,100,101,102,105,110,101,100,32,103,108,111,98,97,108,108,121,46,0
	gs_471: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,49,49,49,50,58,49,55,0
	gs_472: db 60,97,110,111,110,62,0
	gs_473: db 60,97,110,111,110,62,0
	gs_474: db 69,120,112,101,99,116,101,100,32,97,32,110,97,109,101,32,102,111,114,32,97,32,110,111,110,45,99,111,109,112,111,117,110,100,32,102,105,101,108,100,32,105,110,32,97,32,115,116,114,117,99,116,47,117,110,105,111,110,46,0
	gs_475: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,49,49,54,54,58,50,49,0
	gs_476: db 67,111,117,108,100,32,110,111,116,32,102,105,110,100,32,115,116,114,117,99,116,47,117,110,105,111,110,32,119,105,116,104,32,110,97,109,101,58,32,0
	gs_477: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,49,49,56,56,58,49,56,0
	gs_478: db 77,101,116,104,111,100,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,32,101,97,114,108,105,101,114,0
	gs_479: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,49,50,48,54,58,50,49,0
	gs_480: db 115,101,108,102,0
	gs_481: db 70,117,110,99,116,105,111,110,32,110,97,109,101,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,32,97,115,32,97,110,32,105,100,101,110,116,105,102,105,101,114,0
	gs_482: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,49,50,54,55,58,50,49,0
	gs_483: db 70,117,110,99,116,105,111,110,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,32,101,97,114,108,105,101,114,0
	gs_484: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,49,50,55,48,58,50,49,0
	gs_485: db 70,111,117,110,100,32,97,32,99,105,114,99,117,108,97,114,32,105,109,112,111,114,116,32,100,101,112,101,110,100,101,110,99,121,32,105,110,58,32,0
	gs_486: db 58,32,69,120,105,116,105,110,103,46,0
	gs_487: db 117,110,101,120,112,101,99,116,101,100,32,116,111,107,101,110,32,105,110,32,112,97,114,115,101,95,112,114,111,103,114,97,109,58,32,0
	gs_488: db 99,111,109,112,105,108,101,114,47,112,97,114,115,101,114,46,99,117,112,58,49,51,53,55,58,50,50,0
	gs_489: db 45,0
	gs_490: db 9,109,111,118,32,114,97,120,44,32,0
	gs_491: db 10,0
	gs_492: db 9,115,121,115,99,97,108,108,10,0
	gs_493: db 97,108,0
	gs_494: db 97,120,0
	gs_495: db 101,97,120,0
	gs_496: db 114,97,120,0
	gs_497: db 85,110,115,117,112,112,111,114,116,101,100,32,116,121,112,101,32,115,105,122,101,0
	gs_498: db 99,111,109,112,105,108,101,114,47,99,111,100,101,103,101,110,46,99,117,112,58,53,54,58,57,0
	gs_499: db 98,121,116,101,0
	gs_500: db 119,111,114,100,0
	gs_501: db 100,119,111,114,100,0
	gs_502: db 113,119,111,114,100,0
	gs_503: db 85,110,115,117,112,112,111,114,116,101,100,32,116,121,112,101,32,115,105,122,101,0
	gs_504: db 99,111,109,112,105,108,101,114,47,99,111,100,101,103,101,110,46,99,117,112,58,54,54,58,57,0
	gs_505: db 95,0
	gs_506: db 95,109,101,116,104,111,100,95,0
	gs_507: db 102,117,110,99,95,0
	gs_508: db 9,112,117,115,104,32,114,97,120,10,0
	gs_509: db 9,112,111,112,32,114,99,120,10,0
	gs_510: db 97,100,100,0
	gs_511: db 115,117,98,0
	gs_512: db 115,104,108,0
	gs_513: db 115,104,114,0
	gs_514: db 97,110,100,0
	gs_515: db 111,114,0
	gs_516: db 120,111,114,0
	gs_517: db 105,109,117,108,0
	gs_518: db 105,100,105,118,0
	gs_519: db 105,100,105,118,0
	gs_520: db 85,110,115,117,112,112,111,114,116,101,100,32,98,105,110,97,114,121,32,111,112,32,105,110,32,103,101,110,101,114,97,116,101,95,98,105,110,111,112,95,105,110,116,95,97,114,105,116,104,0
	gs_521: db 99,111,109,112,105,108,101,114,47,99,111,100,101,103,101,110,46,99,117,112,58,49,48,54,58,49,51,0
	gs_522: db 9,99,113,111,10,0
	gs_523: db 9,105,100,105,118,32,114,99,120,10,0
	gs_524: db 9,109,111,118,32,114,97,120,44,32,114,100,120,10,0
	gs_525: db 32,114,97,120,44,32,99,108,10,0
	gs_526: db 9,0
	gs_527: db 32,114,97,120,44,32,114,99,120,10,0
	gs_528: db 9,0
	gs_529: db 9,115,117,98,32,114,115,112,44,32,56,10,0
	gs_530: db 9,109,111,118,115,100,32,91,114,115,112,93,44,32,120,109,109,48,10,0
	gs_531: db 9,109,111,118,115,100,32,120,109,109,49,44,32,91,114,115,112,93,10,0
	gs_532: db 9,97,100,100,32,114,115,112,44,32,56,10,0
	gs_533: db 97,100,100,115,100,0
	gs_534: db 115,117,98,115,100,0
	gs_535: db 109,117,108,115,100,0
	gs_536: db 100,105,118,115,100,0
	gs_537: db 85,110,115,117,112,112,111,114,116,101,100,32,98,105,110,97,114,121,32,111,112,32,105,110,32,103,101,110,101,114,97,116,101,95,98,105,110,111,112,95,102,108,111,97,116,95,97,114,105,116,104,0
	gs_538: db 99,111,109,112,105,108,101,114,47,99,111,100,101,103,101,110,46,99,117,112,58,49,51,55,58,49,51,0
	gs_539: db 32,120,109,109,48,44,32,120,109,109,49,10,0
	gs_540: db 9,0
	gs_541: db 9,112,117,115,104,32,114,97,120,10,0
	gs_542: db 9,112,111,112,32,114,99,120,10,0
	gs_543: db 9,99,109,112,32,114,97,120,44,32,114,99,120,10,0
	gs_544: db 9,115,117,98,32,114,115,112,44,32,56,10,0
	gs_545: db 9,109,111,118,115,100,32,91,114,115,112,93,44,32,120,109,109,48,10,0
	gs_546: db 9,109,111,118,115,100,32,120,109,109,49,44,32,91,114,115,112,93,10,0
	gs_547: db 9,97,100,100,32,114,115,112,44,32,56,10,0
	gs_548: db 9,117,99,111,109,105,115,100,32,120,109,109,48,44,32,120,109,109,49,10,0
	gs_549: db 115,101,116,101,0
	gs_550: db 115,101,116,101,0
	gs_551: db 115,101,116,108,0
	gs_552: db 115,101,116,98,0
	gs_553: db 115,101,116,103,0
	gs_554: db 115,101,116,97,0
	gs_555: db 115,101,116,110,101,0
	gs_556: db 115,101,116,110,101,0
	gs_557: db 115,101,116,108,101,0
	gs_558: db 115,101,116,110,97,0
	gs_559: db 115,101,116,103,101,0
	gs_560: db 115,101,116,110,98,0
	gs_561: db 32,97,108,10,0
	gs_562: db 9,0
	gs_563: db 32,97,108,10,0
	gs_564: db 9,0
	gs_565: db 9,109,111,118,122,120,32,114,97,120,44,32,97,108,10,0
	gs_566: db 9,109,111,118,32,114,97,120,44,32,114,98,112,10,0
	gs_567: db 9,115,117,98,32,114,97,120,44,32,0
	gs_568: db 10,0
	gs_569: db 9,109,111,118,32,114,97,120,44,32,113,119,111,114,100,32,103,118,97,114,115,10,0
	gs_570: db 9,97,100,100,32,114,97,120,44,32,0
	gs_571: db 10,0
	gs_572: db 9,97,100,100,32,114,97,120,44,32,0
	gs_573: db 10,0
	gs_574: db 85,110,115,117,112,112,111,114,116,101,100,32,116,121,112,101,32,105,110,32,103,101,110,101,114,97,116,101,95,108,118,97,108,117,101,95,105,110,116,111,95,114,97,120,58,32,0
	gs_575: db 99,111,109,112,105,108,101,114,47,99,111,100,101,103,101,110,46,99,117,112,58,50,48,56,58,49,52,0
	gs_576: db 9,115,117,98,32,114,115,112,44,32,56,10,0
	gs_577: db 9,109,111,118,115,100,32,91,114,115,112,93,44,32,120,109,109,48,10,0
	gs_578: db 9,112,117,115,104,32,114,97,120,10,0
	gs_579: db 10,0
	gs_580: db 9,99,97,108,108,32,0
	gs_581: db 9,97,100,100,32,114,115,112,44,32,0
	gs_582: db 10,0
	gs_583: db 9,109,111,118,32,114,97,120,44,32,0
	gs_584: db 10,0
	gs_585: db 9,109,111,118,32,114,97,120,44,32,0
	gs_586: db 10,0
	gs_587: db 9,109,111,118,32,114,97,120,44,32,113,119,111,114,100,32,103,115,95,0
	gs_588: db 10,0
	gs_589: db 9,109,111,118,32,114,97,120,44,32,91,113,119,111,114,100,32,103,102,95,0
	gs_590: db 93,10,0
	gs_591: db 9,109,111,118,32,91,114,115,112,45,56,93,44,32,114,97,120,10,0
	gs_592: db 9,109,111,118,115,100,32,120,109,109,48,44,32,91,114,115,112,45,56,93,10,0
	gs_593: db 85,110,115,117,112,112,111,114,116,101,100,32,108,105,116,101,114,97,108,32,116,121,112,101,32,105,110,32,103,101,110,101,114,97,116,101,95,101,120,112,114,101,115,115,105,111,110,0
	gs_594: db 99,111,109,112,105,108,101,114,47,99,111,100,101,103,101,110,46,99,117,112,58,50,53,50,58,49,55,0
	gs_595: db 9,99,109,112,32,114,97,120,44,32,48,10,0
	gs_596: db 9,106,101,32,46,99,111,110,100,95,101,108,115,101,95,0
	gs_597: db 10,0
	gs_598: db 9,106,109,112,32,46,99,111,110,100,95,101,110,100,95,0
	gs_599: db 10,0
	gs_600: db 46,99,111,110,100,95,101,108,115,101,95,0
	gs_601: db 58,10,0
	gs_602: db 46,99,111,110,100,95,101,110,100,95,0
	gs_603: db 58,10,0
	gs_604: db 9,99,109,112,32,114,97,120,44,32,48,10,0
	gs_605: db 9,106,101,32,46,111,114,95,114,105,103,104,116,95,0
	gs_606: db 10,0
	gs_607: db 9,109,111,118,32,114,97,120,44,32,49,10,0
	gs_608: db 9,106,109,112,32,46,111,114,95,101,110,100,95,0
	gs_609: db 10,0
	gs_610: db 46,111,114,95,114,105,103,104,116,95,0
	gs_611: db 58,10,0
	gs_612: db 9,99,109,112,32,114,97,120,44,32,48,10,0
	gs_613: db 9,115,101,116,110,101,32,97,108,10,0
	gs_614: db 46,111,114,95,101,110,100,95,0
	gs_615: db 58,10,0
	gs_616: db 9,99,109,112,32,114,97,120,44,32,48,10,0
	gs_617: db 9,106,110,101,32,46,97,110,100,95,114,105,103,104,116,95,0
	gs_618: db 10,0
	gs_619: db 9,109,111,118,32,114,97,120,44,32,48,10,0
	gs_620: db 9,106,109,112,32,46,97,110,100,95,101,110,100,95,0
	gs_621: db 10,0
	gs_622: db 46,97,110,100,95,114,105,103,104,116,95,0
	gs_623: db 58,10,0
	gs_624: db 9,99,109,112,32,114,97,120,44,32,48,10,0
	gs_625: db 9,115,101,116,110,101,32,97,108,10,0
	gs_626: db 46,97,110,100,95,101,110,100,95,0
	gs_627: db 58,10,0
	gs_628: db 9,109,111,118,115,100,32,120,109,109,48,44,32,91,114,97,120,93,10,0
	gs_629: db 9,109,111,118,32,114,97,120,44,32,91,114,97,120,93,10,0
	gs_630: db 9,109,111,118,115,120,100,32,114,97,120,44,32,100,119,111,114,100,32,91,114,97,120,93,10,0
	gs_631: db 32,91,114,97,120,93,10,0
	gs_632: db 9,109,111,118,115,120,32,114,97,120,44,32,0
	gs_633: db 9,110,111,116,32,114,97,120,10,0
	gs_634: db 9,120,111,114,112,115,32,120,109,109,49,44,32,120,109,109,49,10,0
	gs_635: db 9,115,117,98,112,115,32,120,109,109,49,44,32,120,109,109,48,10,0
	gs_636: db 9,109,111,118,115,100,32,120,109,109,48,44,32,120,109,109,49,10,0
	gs_637: db 9,110,101,103,32,114,97,120,10,0
	gs_638: db 9,99,109,112,32,114,97,120,44,32,48,10,0
	gs_639: db 9,115,101,116,101,32,97,108,10,0
	gs_640: db 9,109,111,118,122,120,32,114,97,120,44,32,97,108,10,0
	gs_641: db 9,112,117,115,104,32,114,97,120,10,0
	gs_642: db 9,112,111,112,32,114,99,120,10,0
	gs_643: db 9,109,111,118,115,100,32,91,114,99,120,93,44,32,120,109,109,48,10,0
	gs_644: db 10,0
	gs_645: db 9,109,111,118,32,91,114,99,120,93,44,32,0
	gs_646: db 9,99,118,116,116,115,100,50,115,105,32,114,97,120,44,32,120,109,109,48,10,0
	gs_647: db 9,99,118,116,115,105,50,115,100,32,120,109,109,48,44,32,101,97,120,10,0
	gs_648: db 85,110,115,117,112,112,111,114,116,101,100,32,99,111,110,118,101,114,115,105,111,110,0
	gs_649: db 99,111,109,112,105,108,101,114,47,99,111,100,101,103,101,110,46,99,117,112,58,51,53,56,58,49,55,0
	gs_650: db 85,110,115,117,112,112,111,114,116,101,100,32,110,111,100,101,32,116,121,112,101,32,105,110,32,103,101,110,101,114,97,116,101,95,101,120,112,114,101,115,115,105,111,110,58,32,0
	gs_651: db 99,111,109,112,105,108,101,114,47,99,111,100,101,103,101,110,46,99,117,112,58,51,54,49,58,49,52,0
	gs_652: db 9,99,109,112,32,114,97,120,44,32,0
	gs_653: db 10,0
	gs_654: db 9,106,101,32,46,99,97,115,101,95,0
	gs_655: db 95,0
	gs_656: db 10,0
	gs_657: db 9,106,109,112,32,46,100,101,102,97,117,108,116,95,0
	gs_658: db 10,0
	gs_659: db 46,99,97,115,101,95,0
	gs_660: db 95,0
	gs_661: db 58,10,0
	gs_662: db 46,100,101,102,97,117,108,116,95,0
	gs_663: db 58,10,0
	gs_664: db 9,46,98,114,101,97,107,95,0
	gs_665: db 58,10,0
	gs_666: db 9,120,111,114,32,114,97,120,44,32,114,97,120,10,0
	gs_667: db 9,112,117,115,104,32,114,97,120,10,0
	gs_668: db 9,112,111,112,32,114,97,120,10,0
	gs_669: db 9,109,111,118,32,114,115,112,44,32,114,98,112,10,0
	gs_670: db 9,112,111,112,32,114,98,112,10,0
	gs_671: db 9,114,101,116,10,0
	gs_672: db 9,109,111,118,115,100,32,91,114,98,112,45,0
	gs_673: db 93,44,32,120,109,109,48,10,0
	gs_674: db 9,109,111,118,32,91,114,98,112,45,0
	gs_675: db 10,0
	gs_676: db 93,44,32,0
	gs_677: db 66,114,101,97,107,32,111,117,116,115,105,100,101,32,111,102,32,108,111,111,112,44,32,115,104,111,117,108,100,32,104,97,118,101,32,98,101,101,110,32,99,97,117,103,104,116,32,98,121,32,112,97,114,115,101,114,46,0
	gs_678: db 99,111,109,112,105,108,101,114,47,99,111,100,101,103,101,110,46,99,117,112,58,52,52,51,58,49,55,0
	gs_679: db 87,65,82,78,73,78,71,58,32,39,100,101,102,101,114,39,32,100,111,101,115,32,110,111,116,32,119,111,114,107,32,105,110,32,108,111,111,112,115,32,119,105,116,104,32,98,114,101,97,107,32,115,116,97,116,101,109,101,110,116,115,44,32,121,111,117,32,104,97,118,101,32,98,101,101,110,32,119,97,114,110,101,100,46,0
	gs_680: db 9,106,109,112,32,46,98,114,101,97,107,95,0
	gs_681: db 10,0
	gs_682: db 9,99,109,112,32,114,97,120,44,32,48,10,0
	gs_683: db 9,106,101,32,46,105,102,95,101,110,100,95,0
	gs_684: db 10,0
	gs_685: db 46,105,102,95,101,110,100,95,0
	gs_686: db 58,10,0
	gs_687: db 9,99,109,112,32,114,97,120,44,32,48,10,0
	gs_688: db 9,106,101,32,46,105,102,95,101,108,115,101,95,0
	gs_689: db 10,0
	gs_690: db 9,106,109,112,32,46,105,102,95,101,110,100,95,0
	gs_691: db 10,0
	gs_692: db 46,105,102,95,101,108,115,101,95,0
	gs_693: db 58,10,0
	gs_694: db 46,105,102,95,101,110,100,95,0
	gs_695: db 58,10,0
	gs_696: db 46,108,111,111,112,95,115,116,97,114,116,95,0
	gs_697: db 58,10,0
	gs_698: db 46,108,111,111,112,95,99,111,110,116,105,110,117,101,95,0
	gs_699: db 58,10,0
	gs_700: db 9,99,109,112,32,114,97,120,44,32,48,10,0
	gs_701: db 9,106,101,32,46,108,111,111,112,95,101,110,100,95,0
	gs_702: db 10,0
	gs_703: db 9,106,109,112,32,46,108,111,111,112,95,115,116,97,114,116,95,0
	gs_704: db 10,0
	gs_705: db 46,98,114,101,97,107,95,0
	gs_706: db 58,10,0
	gs_707: db 46,108,111,111,112,95,101,110,100,95,0
	gs_708: db 58,10,0
	gs_709: db 46,108,111,111,112,95,115,116,97,114,116,95,0
	gs_710: db 58,10,0
	gs_711: db 9,99,109,112,32,114,97,120,44,32,48,10,0
	gs_712: db 9,106,101,32,46,108,111,111,112,95,101,110,100,95,0
	gs_713: db 10,0
	gs_714: db 46,108,111,111,112,95,99,111,110,116,105,110,117,101,95,0
	gs_715: db 58,10,0
	gs_716: db 9,106,109,112,32,46,108,111,111,112,95,115,116,97,114,116,95,0
	gs_717: db 10,0
	gs_718: db 46,98,114,101,97,107,95,0
	gs_719: db 58,10,0
	gs_720: db 46,108,111,111,112,95,101,110,100,95,0
	gs_721: db 58,10,0
	gs_722: db 58,10,0
	gs_723: db 9,112,117,115,104,32,114,98,112,10,0
	gs_724: db 9,109,111,118,32,114,98,112,44,32,114,115,112,10,0
	gs_725: db 9,115,117,98,32,114,115,112,44,32,0
	gs_726: db 10,0
	gs_727: db 9,109,111,118,32,114,115,112,44,32,114,98,112,10,0
	gs_728: db 9,112,111,112,32,114,98,112,10,0
	gs_729: db 9,109,111,118,32,113,119,111,114,100,32,114,97,120,44,32,48,10,0
	gs_730: db 9,114,101,116,10,0
	gs_731: db 85,110,107,110,111,119,110,32,110,111,100,101,32,116,121,112,101,32,105,110,32,103,101,110,101,114,97,116,101,95,112,114,111,103,114,97,109,0
	gs_732: db 99,111,109,112,105,108,101,114,47,99,111,100,101,103,101,110,46,99,117,112,58,53,53,57,58,49,55,0
	gs_733: db 103,108,111,98,97,108,32,95,109,97,105,110,10,0
	gs_734: db 95,109,97,105,110,58,10,0
	gs_735: db 9,109,111,118,32,114,97,120,44,32,114,100,120,10,0
	gs_736: db 9,112,117,115,104,32,114,97,120,10,0
	gs_737: db 9,109,111,118,32,114,97,120,44,32,114,115,105,10,0
	gs_738: db 9,112,117,115,104,32,114,97,120,10,0
	gs_739: db 9,109,111,118,32,114,97,120,44,32,114,100,105,10,0
	gs_740: db 9,112,117,115,104,32,114,97,120,10,0
	gs_741: db 103,108,111,98,97,108,32,95,115,116,97,114,116,10,0
	gs_742: db 95,115,116,97,114,116,58,10,0
	gs_743: db 9,109,111,118,32,114,98,112,44,32,114,115,112,10,0
	gs_744: db 9,109,111,118,32,114,97,120,44,32,91,114,98,112,93,10,0
	gs_745: db 9,97,100,100,32,114,97,120,44,32,50,10,0
	gs_746: db 9,115,104,108,32,114,97,120,44,32,51,10,0
	gs_747: db 9,97,100,100,32,114,97,120,44,32,114,98,112,10,0
	gs_748: db 9,112,117,115,104,32,114,97,120,10,0
	gs_749: db 9,109,111,118,32,114,97,120,44,32,114,98,112,10,0
	gs_750: db 9,97,100,100,32,114,97,120,44,32,56,10,0
	gs_751: db 9,112,117,115,104,32,114,97,120,10,0
	gs_752: db 9,109,111,118,32,114,97,120,44,32,91,114,98,112,93,10,0
	gs_753: db 9,112,117,115,104,32,114,97,120,10,0
	gs_754: db 9,109,111,118,32,114,99,120,44,32,113,119,111,114,100,32,103,118,97,114,115,10,0
	gs_755: db 9,97,100,100,32,114,99,120,44,32,0
	gs_756: db 10,0
	gs_757: db 10,0
	gs_758: db 9,109,111,118,32,91,114,99,120,93,44,32,0
	gs_759: db 9,99,97,108,108,32,102,117,110,99,95,109,97,105,110,10,0
	gs_760: db 9,109,111,118,32,114,100,105,44,32,114,97,120,10,0
	gs_761: db 115,101,99,116,105,111,110,32,46,98,115,115,10,0
	gs_762: db 9,103,118,97,114,115,58,32,114,101,115,98,32,0
	gs_763: db 10,0
	gs_764: db 115,101,99,116,105,111,110,32,46,100,97,116,97,10,0
	gs_765: db 9,103,115,95,0
	gs_766: db 58,32,100,98,32,0
	gs_767: db 44,0
	gs_768: db 48,10,0
	gs_769: db 9,103,102,95,0
	gs_770: db 10,0
	gs_771: db 58,32,100,113,32,0
	gs_772: db 85,115,97,103,101,58,32,0
	gs_773: db 32,91,111,112,116,105,111,110,115,93,32,60,102,105,108,101,62,0
	gs_774: db 79,112,116,105,111,110,115,58,0
	gs_775: db 32,32,45,99,32,60,99,111,100,101,62,32,32,67,111,100,101,32,116,111,32,99,111,109,112,105,108,101,0
	gs_776: db 32,32,45,104,32,32,32,32,32,32,32,32,32,83,104,111,119,32,116,104,105,115,32,104,101,108,112,0
	gs_777: db 32,32,45,115,32,32,32,32,32,32,32,32,32,83,105,108,101,110,99,101,32,100,101,98,117,103,32,111,117,116,112,117,116,0
	gs_778: db 32,32,45,114,32,32,32,32,32,32,32,32,32,82,117,110,32,116,104,101,32,103,101,110,101,114,97,116,101,100,32,101,120,101,99,117,116,97,98,108,101,0
	gs_779: db 32,32,45,111,32,60,102,105,108,101,62,32,32,79,117,116,112,117,116,32,102,105,108,101,0
	gs_780: db 32,32,45,100,32,32,32,32,32,32,32,32,32,68,117,109,112,32,65,83,84,32,116,111,32,115,116,100,111,117,116,0
	gs_781: db 79,117,116,112,117,116,32,102,105,108,101,32,119,105,108,108,32,98,101,32,110,97,109,101,100,32,39,0
	gs_782: db 39,32,98,121,32,100,101,102,97,117,108,116,0
	gs_783: db 45,99,0
	gs_784: db 67,76,73,0
	gs_785: db 45,115,0
	gs_786: db 45,114,0
	gs_787: db 45,104,0
	gs_788: db 45,100,0
	gs_789: db 45,111,0
	gs_790: db 45,0
	gs_791: db 115,116,100,105,110,0
	gs_792: db 83,111,117,114,99,101,32,116,111,111,32,108,111,110,103,32,116,111,32,117,115,101,32,116,104,114,111,117,103,104,32,115,116,100,105,110,0
	gs_793: db 46,121,97,115,109,0
	gs_794: db 46,111,0
	gs_795: db 47,117,115,114,47,98,105,110,47,101,110,118,0
	gs_796: db 121,97,115,109,0
	gs_797: db 45,102,109,97,99,104,111,54,52,0
	gs_798: db 45,102,101,108,102,54,52,0
	gs_799: db 45,111,0
	gs_800: db 99,108,97,110,103,0
	gs_801: db 108,100,0
	gs_802: db 45,111,0
	gs_803: db 45,87,108,44,45,110,111,95,112,105,101,0
	gs_804: db 98,117,105,108,100,47,111,117,116,112,117,116,0
