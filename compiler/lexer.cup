import "compiler/tokens.cup"

struct Lexer {
    src: char*;
    len: int;
    pos: int;

    filename: char*;
    line: int;
    col: int;
};

fn lexer_new(filename: char*, src: char*, len: int): Lexer* {
    let lexer: Lexer* = malloc(sizeof(Lexer));
    lexer.filename = filename;
    lexer.src = src;
    lexer.len = len;
    return lexer;
}

fn lexer_new_open_file(filename: char*): Lexer* {
    let file = fopen(filename, 'r');
    defer file::close();
    let size = 0;
    let source = file::slurp(&size);
    return lexer_new(filename, source, size);
}

method Lexer::loc(loc: Location*) {
    loc.filename = self.filename;
    loc.line = self.line;
    loc.col = self.col;
}

method Lexer::skip_whitespace() {
    while (self.pos < self.len && is_space(self.src[self.pos])) {
        if (self.src[self.pos] == '\n') {
            self.line = self.pos + 1;
            self.col = 0;
        } else {
            self.col = self.col + 1;
        }
        self.pos = self.pos + 1;
    }
}

method Lexer::starts_with(str: char*): int {
    let len = strlen(str);
    if (self.len - self.pos < len)
        return 0;
    for (let i = 0; i < len; ++i)
        if (self.src[self.pos + i] != str[i])
            return 0;
    let end_pos = self.pos + len;
    if (end_pos == self.len)
        return len;
    let end_char = self.src[end_pos];
    return !(is_digit(end_char) || is_alpha(end_char));
}

method Lexer::advance(n: int) {
    self.pos = self.pos + n;
    self.col = self.col + n;
}

method Lexer::peek_char(n: int): char {
    if (self.pos + n >= self.len)
        return 0;
    return self.src[self.pos + n];
}

method Lexer::make_token(token: Token*, typ: int, inc: int) {
    self::loc(&token.loc);
    self::advance(inc);
    token.typ = typ;
}

method Lexer::next(token: Token*) {
    while (self.pos < self.len) {
        let c = self.src[self.pos];
        switch (c) {
            case ' ':
            case '\t':
            case '\r':
                self::advance(1); break;

            case '\n':   ++self.line; self.col = 0; ++self.pos; break;

            case '(': return self::make_token(token, TOKEN_OPEN_PAREN, 1);
            case ')': return self::make_token(token, TOKEN_CLOSE_PAREN, 1);
            case '{': return self::make_token(token, TOKEN_OPEN_BRACE, 1);
            case '}': return self::make_token(token, TOKEN_CLOSE_BRACE, 1);
            case '[': return self::make_token(token, TOKEN_OPEN_BRACKET, 1);
            case ']': return self::make_token(token, TOKEN_CLOSE_BRACKET, 1);
            case ';': return self::make_token(token, TOKEN_SEMICOLON, 1);
            case '~': return self::make_token(token, TOKEN_TILDE, 1);
            case '?': return self::make_token(token, TOKEN_QUESTION, 1);
            case '^': return self::make_token(token, TOKEN_CARET, 1);
            case '.': return self::make_token(token, TOKEN_DOT, 1);
            case ',': return self::make_token(token, TOKEN_COMMA, 1);
            case '*': return self::make_token(token, TOKEN_STAR, 1);
            case '%': return self::make_token(token, TOKEN_PERCENT, 1);

            case '/': {
                if (self::peek_char(1) == '/') {
                    self.pos = self.pos + 2;    // skip the '//'
                    while (self.pos < self.len && self.src[self.pos] != '\n')
                        ++self.pos;
                    break;  // Out of the switch
                }
                return self::make_token(token, TOKEN_SLASH, 1);
            }

            case ':': {
                if (self::peek_char(1) == ':')
                    return self::make_token(token, TOKEN_COLONCOLON, 2);
                return self::make_token(token, TOKEN_COLON, 1);
            }

            case '&': {
                if (self::peek_char(1) == '&')
                    return self::make_token(token, TOKEN_AND, 2);
                return self::make_token(token, TOKEN_AMPERSAND, 1);
            }

            case '!': {
                if (self::peek_char(1) == '=')
                    return self::make_token(token, TOKEN_NEQ, 2);
                return self::make_token(token, TOKEN_EXCLAMATION, 1);
            }

            case '<': {
                if (self::peek_char(1) == '<')
                    return self::make_token(token, TOKEN_LSHIFT, 2);
                if (self::peek_char(1) == '=')
                    return self::make_token(token, TOKEN_LEQ, 2);
                return self::make_token(token, TOKEN_LT, 1);
            }

            case '>': {
                if (self::peek_char(1) == '>')
                    return self::make_token(token, TOKEN_RSHIFT, 2);
                if (self::peek_char(1) == '=')
                    return self::make_token(token, TOKEN_GEQ, 2);
                return self::make_token(token, TOKEN_GT, 1);
            }

            case '=': {
                if (self::peek_char(1) == '=')
                    return self::make_token(token, TOKEN_EQ, 2);
                return self::make_token(token, TOKEN_ASSIGN, 1);
            }

            case '|': {
                if (self::peek_char(1) == '|')
                    return self::make_token(token, TOKEN_OR, 2);
                return self::make_token(token, TOKEN_BAR, 1);
            }


            case '+': {
                if (self::peek_char(1) == '+')
                    return self::make_token(token, TOKEN_PLUSPLUS, 2);
                if (self::peek_char(1) == '=')
                    return self::make_token(token, TOKEN_PLUSEQUALS, 2);
                return self::make_token(token, TOKEN_PLUS, 1);
            }

            case '-': {
                if (self::peek_char(1) == '-')
                    return self::make_token(token, TOKEN_MINUSMINUS, 2);
                if (self::peek_char(1) == '=')
                    return self::make_token(token, TOKEN_MINUSEQUALS, 2);
                return self::make_token(token, TOKEN_MINUS, 1);
            }

            default: {
                // Handle the `here` keyword at lex-time
                if (self::starts_with("here")) {
                    let s: char* = malloc(sizeof(char) * 128); // Should be enough
                    // Print the location into the string
                    let buf: char[32];
                    strcpy(s, self.filename); strcat(s, ":");
                    putu_buffer(self.line+1, buf); strcat(s, buf); strcat(s, ":");
                    putu_buffer(self.col+1, buf); strcat(s, buf);

                    // Make the token
                    let loc: Location;
                    self::loc(&loc);
                    self::advance(4);
                    return token_from_string(token, s, &loc);
                }

                // Parse the keywords...
                for (let i = TOKEN__KEYWORD_BEGIN+1; i < TOKEN__KEYWORD_END; ++i) {
                    let str = keyword_to_string(i);
                    if (self::starts_with(str)) {
                        return self::make_token(token, i, strlen(str));
                    }
                }

                // Parse numbers:
                if (is_digit(c)) {
                    let pos = self.pos;
                    let val = 0;
                    let is_float = false;

                    // Hex numbers
                    if (c == '0' && self::peek_char(1) == 'x') {
                        pos = pos + 2;
                        c = self.src[pos];
                        while (is_hex(c)) {
                                if (c >= 'a' && c <= 'f') val = val * 16 + (c - 'a' + 10);
                            else if (c >= 'A' && c <= 'F') val = val * 16 + (c - 'A' + 10);
                            else                           val = val * 16 + (c - '0');
                            ++pos;
                            c = self.src[pos];
                        }

                    // Binary
                    } else if (c == '0' && self::peek_char(1) == 'b') {
                        pos = pos + 2;
                        c = self.src[pos];
                        while (c == '0' || c == '1') {
                            val = val * 2 + (c - '0');
                            ++pos;
                            c = self.src[pos];
                        }

                    // Base 10
                    } else {
                        while (pos < self.len && is_digit(self.src[pos]))
                            ++pos;
                        if (pos < self.len && self.src[pos] == '.') {
                            ++pos;
                            while (pos < self.len && is_digit(self.src[pos]))
                                ++pos;
                            is_float = true;
                        // Regular number
                        } else {
                            val = atoi(self.src + self.pos);
                        }
                    }

                    // TODO: Parse octal numbers?
                    let loc: Location;
                    self::loc(&loc);
                    if (!is_float) {
                        token_from_int(token, val, &loc);
                    } else {
                        let str_len = pos - self.pos;
                        let flt_str: char* = malloc(str_len+1);
                        memcpy(flt_str, self.src + self.pos, str_len);
                        flt_str[str_len] = '\0';

                        token_from_string(token, flt_str, &loc);
                        token.typ = TOKEN_FLOATLIT;
                    }
                    self::advance(pos - self.pos);
                    return;
                }

                // Parse identifiers:
                if (is_alpha(self.src[self.pos])) {
                    let pos = self.pos;
                    while (pos < self.len && is_alnum(self.src[pos]))
                        ++pos;
                    let str_len = pos - self.pos;
                    let str: char* = malloc(str_len + 1);
                    memcpy(str, self.src + self.pos, str_len);
                    str[str_len] = '\0';
                    let loc: Location;
                    self::loc(&loc);
                    token_from_identifier(token, str, &loc);
                    self::advance(str_len);
                    return;
                }

                if (c == '"') {
                    let pos = self.pos + 1;
                    while (pos < self.len) {
                        if (self.src[pos] == '"' && self.src[pos-1] != '\\')
                            break;
                        ++pos;
                    }

                    let loc: Location;
                    self::loc(&loc);

                    if (pos == self.len)
                        die_loc(here, &loc, "EOF while parsing string literal");

                    // Careful with indexing here, because we want to skip opening and closing quotes
                    let str_len = pos - self.pos - 1;
                    let str: char* = malloc(str_len + 1);
                    memcpy(str, self.src + self.pos + 1, str_len);
                    str[str_len] = '\0';
                    token_from_string(token, str, &loc);
                    self::advance(pos - self.pos + 1);
                    return;
                }

                if (c == '\'') {
                    let pos = self.pos + 1;
                    // TODO: Handle malformed / incomplete literals
                    // TODO: Handle escapes
                    c = self.src[pos];
                    if (c == '\\') {
                        ++pos;
                        c = self.src[pos];
                            if (c == 'n')  { c = '\n'; }
                        else if (c == 't')  { c = '\t'; }
                        else if (c == 'n')  { c = '\n'; }
                        else if (c == 'r')  { c = '\r'; }
                        else if (c == 't')  { c = '\t'; }
                        else if (c == '0')  { c = '\0'; }
                        else { }
                        // TODO: Handle octal and hex escapes
                    }

                    let loc: Location;
                    self::loc(&loc);
                    token_from_char(token, c, &loc);
                    self::advance(pos - self.pos + 2);
                    return;
                }

                puts(here); puts(": Unknown character in lexer_next: '"); putc(c); putsln("'");
                exit(1);
            }
        }
    }
    return self::make_token(token, TOKEN_EOF, 0);
}

method Lexer::next_assert(token: Token*, expected: int) {
    self::next(token);
    if (token.typ != expected) {
        location_print(&token.loc);
        puts(": Expected "); puts(token_type_to_string(expected));
        puts(" but got "); puts(token_type_to_string(token.typ));
        putc('\n');
        exit(1);
    }
}

method Lexer::peek(token: Token*) {
    let pos = self.pos;
    let col = self.col;
    let line = self.line;
    self::next(token);
    self.pos = pos;
    self.col = col;
    self.line = line;
}